# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-1-250-8-64')
mdb.models['S2-1-250-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-1-250-8-64'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -114.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 11.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 136.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -114.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 136.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -114.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 11.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 136.0))
mdb.models['S2-1-250-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-1-250-8-64'].parts['plate'].BaseSolidExtrude(depth=14.0, sketch=
    mdb.models['S2-1-250-8-64'].sketches['__profile__'])
del mdb.models['S2-1-250-8-64'].sketches['__profile__']
mdb.models['S2-1-250-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-1-250-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(14.0, 0.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-1-250-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-1-250-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-1-250-8-64'].sketches['__profile__'])
del mdb.models['S2-1-250-8-64'].sketches['__profile__']
mdb.models['S2-1-250-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-1-250-8-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -114.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 11.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 136.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -114.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 136.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -114.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 11.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 136.0))
mdb.models['S2-1-250-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-1-250-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-1-250-8-64'].sketches['__profile__'])
del mdb.models['S2-1-250-8-64'].sketches['__profile__']
mdb.models['S2-1-250-8-64'].Material(name='Q355')
mdb.models['S2-1-250-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-1-250-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-1-250-8-64'].Material(name='CrMoA')
mdb.models['S2-1-250-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-1-250-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-1-250-8-64'].Material(name='Rigid')
mdb.models['S2-1-250-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-1-250-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-1-250-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-1-250-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-1-250-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-1-250-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-1-250-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-1-250-8-64'].parts['T-beam'].edges[0:1]), sectionName=
    'CrMoA', thicknessAssignment=FROM_SECTION)
mdb.models['S2-1-250-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-1-250-8-64'].parts['T-beam'].edges[0:1]))
mdb.models['S2-1-250-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-1-250-8-64'].parts['plane'].faces[0:1]), sectionName=
    'Rigid', thicknessAssignment=FROM_SECTION)
mdb.models['S2-1-250-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[0:1]), sectionName=
    'Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-1-250-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-1-250-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-1-250-8-64'].parts['plane'])
mdb.models['S2-1-250-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-1-250-8-64'].parts['plate'])
mdb.models['S2-1-250-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-1-250-8-64'].parts['T-beam'])
mdb.models['S2-1-250-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-1-250-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-125.0, 125.0, 14.0))
mdb.models['S2-1-250-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=125.0, spacing2=125.0)
del mdb.models['S2-1-250-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-1-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-1-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-1-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-1-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-1-250-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-1-250-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.5)
mdb.models['S2-1-250-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-1-250-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-1-250-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-1-250-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-1-250-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-1-250-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-1-250-8-64'].sketches['__profile__'])
mdb.models['S2-1-250-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-1-250-8-64'].sketches['__profile__'])
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -109.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 16.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 141.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -109.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 141.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -109.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 16.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 141.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].Line(point1=(-275.0, 125.0)
    , point2=(275.0, 125.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].Line(point1=(125.0, -275.0)
    , point2=(125.0, 275.0))
mdb.models['S2-1-250-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-1-250-8-64'].parts['plane'].faces[0:1], sketch=
    mdb.models['S2-1-250-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-1-250-8-64'].parts['plane'].edges[9])
mdb.models['S2-1-250-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-1-250-8-64'].parts['plane'].faces[0:48])
mdb.models['S2-1-250-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=14.0)
mdb.models['S2-1-250-8-64'].parts['plane'].generateMesh()
mdb.models['S2-1-250-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-1-250-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-1-250-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-1-250-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-1-250-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-1-250-8-64'].sketches['__profile__'])
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -109.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 16.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 141.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -109.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 141.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -109.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 16.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 141.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].rectangle(point1=(-60.0, 
    -60.0), point2=(60.0, 60.0))
mdb.models['S2-1-250-8-64'].sketches['__profile__'].rectangle(point1=(-52.0, 
    -52.0), point2=(52.0, 52.0))
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-1-250-8-64'].parts['plate'].faces[12:13], sketch=
    mdb.models['S2-1-250-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[7])
del mdb.models['S2-1-250-8-64'].sketches['__profile__']
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[0:1], edges=(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[14], ), line=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[31], sense=REVERSE)
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[1:2], edges=(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[18], ), line=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[33], sense=REVERSE)
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[2:3], edges=(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[10], ), line=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[35], sense=REVERSE)
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[3:4], edges=(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[24], ), line=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[37], sense=REVERSE)
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[4:5], edges=(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[5:6], edges=(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[6:7], edges=(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[7:8], edges=(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[0:2]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[7:9], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[0:2]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[3:4]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[5:6]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[11:13], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[0:3]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[4:5]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[17:19], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[3:5]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[6:7]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[8:9]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[16:17]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[20:22]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[24:25], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[5:6]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[11:12]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[18:20]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[27:28]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[31:33], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[10:11]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[16:20]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[25:26]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[32:34], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[12:13]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[15:16]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[18:19]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[23:24], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].vertices[174])
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[14:15]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[17:18]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[36:37]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[48:49], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].vertices[73])
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[1:2]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[4:5]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[8:9]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[11:12]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[16:17]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[39:40], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].vertices[100])
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[16:17]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[21:22]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[26:27]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[28:29]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[32:33]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[50:51], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].vertices[207])
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[16:21]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[23:24], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].vertices[88])
mdb.models['S2-1-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-1-250-8-64'].parts['plate'].cells[11:16]+\
    mdb.models['S2-1-250-8-64'].parts['plate'].cells[33:34], normal=
    mdb.models['S2-1-250-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-1-250-8-64'].parts['plate'].vertices[64])
mdb.models['S2-1-250-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.5)
mdb.models['S2-1-250-8-64'].parts['plate'].generateMesh()
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1'].vertices[0:1])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-1', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[284:285]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[290:291]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[316:317]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[352:353])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices[0:1])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-2', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[151:152]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[167:168]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[295:296]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[353:354])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices[0:1])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-3', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[260:261]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[266:267]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[297:298]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[347:348])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices[0:1])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-4', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[182:183]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[192:193]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[269:270]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[354:355])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices[0:1])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-5', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[225:226]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[237:238]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[252:253]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[348:349])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices[0:1])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-6', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[138:139]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[156:157]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[218:219]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[349:350])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices[0:1])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-7', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[213:214]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[227:228]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[324:325]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[351:352])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices[0:1])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-8', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[183:184]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[201:202]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[322:323]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[350:351])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices[1:2])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-9', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[1:2]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[10:12]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[30:31])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices[1:2])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-10', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[9:10]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[27:29]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[43:44])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1'].vertices[1:2])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-11', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[8:9]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[24:26]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[41:42])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices[1:2])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-12', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[23:24]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[38:40]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[46:47])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices[1:2])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-13', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[7:8]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[20:22]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[36:37])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices[1:2])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-14', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[4:5]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[17:19]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[34:35])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices[1:2])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-15', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[0:1]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[3:4]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[5:6]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[16:17])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices[1:2])
    , csys=None, mpcType=BEAM_MPC, name='Constraint-16', surface=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[2:3]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[13:15]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[32:33])
    , userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-1-250-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-1-250-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-1-250-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[0:48])
mdb.models['S2-1-250-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[8:9]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[11:12]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[13:14]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[15:16]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[17:18]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[21:22]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[31:32]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[33:34]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[37:38]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[39:40]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[42:43]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[44:45]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[54:55]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[58:59]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[61:62]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[64:65]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[66:67]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[69:70]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[81:82]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[84:85]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[86:87]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[89:90]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[91:92]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[94:95]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[102:103]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[105:107]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[108:109]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[121:123]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[125:126]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[128:129]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[143:144]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[145:146]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[149:151]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[157:158]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[159:160]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[163:164]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[166:167]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[177:179]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[181:182]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[190:191]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[193:194]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[196:197]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[199:200]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[214:215]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[217:218]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[220:221]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[223:224]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[228:229]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[231:232]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[235:236]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[238:239]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[251:252]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[256:257]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[258:259]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[263:264]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[265:266]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[268:269]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[286:287]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[288:289]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[291:292]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[298:299]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[301:302]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[303:304]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[318:319]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[321:322]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[325:326]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[327:328]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[331:332]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[333:334]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[335:336]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[337:338]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[339:340]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[341:342]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[343:344]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[345:346]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[369:370])
mdb.models['S2-1-250-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-1-250-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-1-250-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-1-250-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-1-250-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-1-250-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[57:58]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[67:68]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[82:83]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[92:93]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[140:141]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[152:153]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[186:187]+\
    mdb.models['S2-1-250-8-64'].rootAssembly.instances['plate-1'].faces[368:369])
    , u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-1-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1'].edges[0:1]))
mdb.models['S2-1-250-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-1-250-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-1-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges[0:1]))
mdb.models['S2-1-250-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-1-250-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-1-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges[0:1]))
mdb.models['S2-1-250-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-1-250-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-1-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges[0:1]))
mdb.models['S2-1-250-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-1-250-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-1-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges[0:1]))
mdb.models['S2-1-250-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-1-250-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-1-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges[0:1]))
mdb.models['S2-1-250-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-1-250-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-1-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges[0:1]))
mdb.models['S2-1-250-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-1-250-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-1-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-1-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges[0:1]))
mdb.models['S2-1-250-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-1-250-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-1-250-8-64'].ConcentratedForce(cf1=6609, cf2=8366, cf3=10932, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-1-250-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-1-250-8-64'].Moment(cm1=17322000, cm2=11913000, cm3=1945000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-1-250-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-1-250-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].faces[0:48], 
    edges=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].edges[0:136], 
    vertices=mdb.models['S2-1-250-8-64'].rootAssembly.instances['plane-1'].vertices[0:81])
    , u1=SET, u2=SET, u3=SET, ur1=SET, ur2=SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-1-250-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-1-250-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-1-250-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-1-250-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-1-250-8-64-1'].waitForCompletion()
mdb.Model(name='S2-1-250-8-64-2', objectToCopy=mdb.models['S2-1-250-8-64'])
mdb.models['S2-1-250-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-1-250-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-1-250-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-1-250-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-1-250-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-1-250-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=16.0, vertex1=
    mdb.models['S2-1-250-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-1-250-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-1-250-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-1-250-8-64-2'].sketches['__edit__'])
del mdb.models['S2-1-250-8-64-2'].sketches['__edit__']
mdb.models['S2-1-250-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-1-250-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=16.0)
mdb.models['S2-1-250-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-1-250-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-1-250-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-1-250-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-1-250-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-1-250-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-1-250-8-64-2', objectToCopy=mdb.jobs['S2-1-250-8-64-1'])
mdb.jobs['S2-1-250-8-64-2'].setValues(model='S2-1-250-8-64-2')
mdb.jobs['S2-1-250-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-1-250-8-64-2'].waitForCompletion()
mdb.Model(name='S2-1-250-8-64-3', objectToCopy=mdb.models['S2-1-250-8-64'])
mdb.models['S2-1-250-8-64-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-1-250-8-64-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-1-250-8-64-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-1-250-8-64-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-1-250-8-64-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-1-250-8-64-3'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=18.0, vertex1=
    mdb.models['S2-1-250-8-64-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-1-250-8-64-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-1-250-8-64-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-1-250-8-64-3'].sketches['__edit__'])
del mdb.models['S2-1-250-8-64-3'].sketches['__edit__']
mdb.models['S2-1-250-8-64-3'].parts['T-beam'].regenerate()
mdb.models['S2-1-250-8-64-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=18.0)
mdb.models['S2-1-250-8-64-3'].parts['plate'].regenerate()
mdb.models['S2-1-250-8-64-3'].parts['plate'].deleteMesh()
mdb.models['S2-1-250-8-64-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-1-250-8-64-3'].parts['plate'].generateMesh()
mdb.models['S2-1-250-8-64-3'].parts['T-beam'].generateMesh()
mdb.models['S2-1-250-8-64-3'].rootAssembly.regenerate()
mdb.Job(name='S2-1-250-8-64-3', objectToCopy=mdb.jobs['S2-1-250-8-64-2'])
mdb.jobs['S2-1-250-8-64-3'].setValues(model='S2-1-250-8-64-3')
mdb.jobs['S2-1-250-8-64-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-1-250-8-64-3'].waitForCompletion()
mdb.Model(name='S2-1-250-8-64-4', objectToCopy=mdb.models['S2-1-250-8-64'])
mdb.models['S2-1-250-8-64-4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-1-250-8-64-4'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-1-250-8-64-4'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-1-250-8-64-4'].sketches['__edit__'], upToFeature=
    mdb.models['S2-1-250-8-64-4'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-1-250-8-64-4'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=20.0, vertex1=
    mdb.models['S2-1-250-8-64-4'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-1-250-8-64-4'].sketches['__edit__'].vertices[1])
mdb.models['S2-1-250-8-64-4'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-1-250-8-64-4'].sketches['__edit__'])
del mdb.models['S2-1-250-8-64-4'].sketches['__edit__']
mdb.models['S2-1-250-8-64-4'].parts['T-beam'].regenerate()
mdb.models['S2-1-250-8-64-4'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=20.0)
mdb.models['S2-1-250-8-64-4'].parts['plate'].regenerate()
mdb.models['S2-1-250-8-64-4'].parts['plate'].deleteMesh()
mdb.models['S2-1-250-8-64-4'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['S2-1-250-8-64-4'].parts['plate'].generateMesh()
mdb.models['S2-1-250-8-64-4'].parts['T-beam'].generateMesh()
mdb.models['S2-1-250-8-64-4'].rootAssembly.regenerate()
mdb.Job(name='S2-1-250-8-64-4', objectToCopy=mdb.jobs['S2-1-250-8-64-3'])
mdb.jobs['S2-1-250-8-64-4'].setValues(model='S2-1-250-8-64-4')
mdb.jobs['S2-1-250-8-64-4'].submit(consistencyChecking=OFF)
mdb.jobs['S2-1-250-8-64-4'].waitForCompletion()
mdb.Model(name='S2-1-250-8-64-5', objectToCopy=mdb.models['S2-1-250-8-64'])
mdb.models['S2-1-250-8-64-5'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-1-250-8-64-5'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-1-250-8-64-5'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'], upToFeature=
    mdb.models['S2-1-250-8-64-5'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=22.0, vertex1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[1])
mdb.models['S2-1-250-8-64-5'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-1-250-8-64-5'].sketches['__edit__'])
del mdb.models['S2-1-250-8-64-5'].sketches['__edit__']
mdb.models['S2-1-250-8-64-5'].parts['T-beam'].regenerate()
mdb.models['S2-1-250-8-64-5'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=22.0)
mdb.models['S2-1-250-8-64-5'].parts['plate'].regenerate()
mdb.models['S2-1-250-8-64-5'].parts['plate'].deleteMesh()
mdb.models['S2-1-250-8-64-5'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.5)
mdb.models['S2-1-250-8-64-5'].parts['plate'].generateMesh()
mdb.models['S2-1-250-8-64-5'].parts['T-beam'].generateMesh()
mdb.models['S2-1-250-8-64-5'].rootAssembly.regenerate()
mdb.Job(name='S2-1-250-8-64-5', objectToCopy=mdb.jobs['S2-1-250-8-64-4'])
mdb.jobs['S2-1-250-8-64-5'].setValues(model='S2-1-250-8-64-5')
mdb.jobs['S2-1-250-8-64-5'].submit(consistencyChecking=OFF)
mdb.jobs['S2-1-250-8-64-5'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-2-450-8-64')
mdb.models['S2-2-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-2-450-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-2-450-8-64'].parts['plate'].BaseSolidExtrude(depth=16.0, sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(16.0, 0.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-2-450-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-2-450-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-375.0, 
    -375.0), point2=(375.0, 375.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-2-450-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-2-450-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].Material(name='Q355')
mdb.models['S2-2-450-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-2-450-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-2-450-8-64'].Material(name='CrMoA')
mdb.models['S2-2-450-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-2-450-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-2-450-8-64'].Material(name='Rigid')
mdb.models['S2-2-450-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-2-450-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-2-450-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-2-450-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-2-450-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-2-450-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-2-450-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-2-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-2-450-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-2-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-2-450-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-2-450-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-2-450-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-2-450-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-2-450-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-2-450-8-64'].parts['plane'])
mdb.models['S2-2-450-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-2-450-8-64'].parts['plate'])
mdb.models['S2-2-450-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-2-450-8-64'].parts['T-beam'])
mdb.models['S2-2-450-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-2-450-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-225.0, 225.0, 16.0))
mdb.models['S2-2-450-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=225.0, spacing2=225.0)
del mdb.models['S2-2-450-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-2-450-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-2-450-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-2-450-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-2-450-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-2-450-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-2-450-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-2-450-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-2-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'])
mdb.models['S2-2-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'])
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 
    -225.0), point2=(375.0, -225.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 0.0), 
    point2=(375.0, 0.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 225.0)
    , point2=(375.0, 225.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-225.0, 
    -375.0), point2=(-225.0, 375.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(0.0, -375.0), 
    point2=(0.0, 375.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(225.0, -375.0)
    , point2=(225.0, 375.0))
mdb.models['S2-2-450-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-2-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-2-450-8-64'].parts['plane'].edges[9])
mdb.models['S2-2-450-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-2-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-2-450-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=16.0)
mdb.models['S2-2-450-8-64'].parts['plane'].generateMesh()
mdb.models['S2-2-450-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-2-450-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-2-450-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-2-450-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-2-450-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'])
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-70.0, 
    -70.0), point2=(70.0, 70.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-58.0, 
    -58.0), point2=(58.0, 58.0))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-2-450-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[7])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].rootAssembly.regenerate()
mdb.models['S2-2-450-8-64'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-2-450-8-64'].parts['plate'].features['Partition face-1'].sketch)
mdb.models['S2-2-450-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-2-450-8-64'].sketches['__edit__'], 
    upToFeature=
    mdb.models['S2-2-450-8-64'].parts['plate'].features['Partition face-1'])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].Line(point1=(0.0, 321.88), 
    point2=(0.0, -365.21))
mdb.models['S2-2-450-8-64'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[42])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].Line(point1=(-334.26, 0.0), 
    point2=(352.83, 0.0))
mdb.models['S2-2-450-8-64'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[43])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].Line(point1=(-70.0, 70.0), 
    point2=(-70.0, 377.59))
mdb.models['S2-2-450-8-64'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[44])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[22], entity2=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[44])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].Line(point1=(-70.0, 70.0), 
    point2=(-70.0, -470.44))
mdb.models['S2-2-450-8-64'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[45])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[22], entity2=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[45])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].Line(point1=(70.0, 70.0), 
    point2=(70.0, 359.02))
mdb.models['S2-2-450-8-64'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[46])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[23], entity2=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[46])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].Line(point1=(70.0, 70.0), 
    point2=(70.0, -464.25))
mdb.models['S2-2-450-8-64'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[47])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[23], entity2=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[47])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].Line(point1=(-70.0, -70.0), 
    point2=(-346.64, -70.0))
mdb.models['S2-2-450-8-64'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[48])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[22], entity2=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[48])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].Line(point1=(-70.0, -70.0), 
    point2=(383.78, -70.0))
mdb.models['S2-2-450-8-64'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[49])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[22], entity2=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[49])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].Line(point1=(-70.0, 70.0), 
    point2=(-359.02, 70.0))
mdb.models['S2-2-450-8-64'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[50])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[22], entity2=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[50])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].Line(point1=(-70.0, 70.0), 
    point2=(371.4, 70.0))
mdb.models['S2-2-450-8-64'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[51])
mdb.models['S2-2-450-8-64'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[22], entity2=
    mdb.models['S2-2-450-8-64'].sketches['__edit__'].geometry[51])
mdb.models['S2-2-450-8-64'].parts['plate'].features['Partition face-1'].setValues(
    sketch=mdb.models['S2-2-450-8-64'].sketches['__edit__'])
del mdb.models['S2-2-450-8-64'].sketches['__edit__']
mdb.models['S2-2-450-8-64'].parts['plate'].regenerate()
mdb.models['S2-2-450-8-64'].parts['plate'].setMeshControls(algorithm=
    MEDIAL_AXIS, regions=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['S2-2-450-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-2-450-8-64'].parts['plate'].generateMesh()
del mdb.models['S2-2-450-8-64']
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-2-450-8-64')
mdb.models['S2-2-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-2-450-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-2-450-8-64'].parts['plate'].BaseSolidExtrude(depth=16.0, sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(16.0, 0.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-2-450-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-2-450-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-375.0, 
    -375.0), point2=(375.0, 375.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-2-450-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-2-450-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].Material(name='Q355')
mdb.models['S2-2-450-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-2-450-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-2-450-8-64'].Material(name='CrMoA')
mdb.models['S2-2-450-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-2-450-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-2-450-8-64'].Material(name='Rigid')
mdb.models['S2-2-450-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-2-450-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-2-450-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-2-450-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-2-450-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-2-450-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-2-450-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-2-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-2-450-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-2-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-2-450-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-2-450-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-2-450-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-2-450-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-2-450-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-2-450-8-64'].parts['plane'])
mdb.models['S2-2-450-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-2-450-8-64'].parts['plate'])
mdb.models['S2-2-450-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-2-450-8-64'].parts['T-beam'])
mdb.models['S2-2-450-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-2-450-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-225.0, 225.0, 16.0))
mdb.models['S2-2-450-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=225.0, spacing2=225.0)
del mdb.models['S2-2-450-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-2-450-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-2-450-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-2-450-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-2-450-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-2-450-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-2-450-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-2-450-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-2-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'])
mdb.models['S2-2-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'])
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 
    -225.0), point2=(375.0, -225.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 0.0), 
    point2=(375.0, 0.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 225.0)
    , point2=(375.0, 225.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-225.0, 
    -375.0), point2=(-225.0, 375.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(0.0, -375.0), 
    point2=(0.0, 375.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(225.0, -375.0)
    , point2=(225.0, 375.0))
mdb.models['S2-2-450-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-2-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-2-450-8-64'].parts['plane'].edges[9])
mdb.models['S2-2-450-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-2-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-2-450-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=16.0)
mdb.models['S2-2-450-8-64'].parts['plane'].generateMesh()
mdb.models['S2-2-450-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-2-450-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-2-450-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-2-450-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-2-450-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'])
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-70.0, 
    -70.0), point2=(70.0, 70.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-58.0, 
    -58.0), point2=(58.0, 58.0))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-2-450-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[7])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-2-450-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-2-450-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-2-450-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-2-450-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-2-450-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-2-450-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-2-450-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-2-450-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[174])
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[73])
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[100])
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[207])
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[88])
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[64])
mdb.models['S2-2-450-8-64'].parts['plate'].setMeshControls(algorithm=
    MEDIAL_AXIS, regions=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask((
    '[#ffffffff:2 #ffff ]', ), ), technique=SWEEP)
mdb.models['S2-2-450-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-2-450-8-64'].parts['plate'].generateMesh()
mdb.models['S2-2-450-8-64'].parts['plate'].deleteMesh(regions=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask((
    '[#ffffffff:2 #ffff ]', ), ))
mdb.models['S2-2-450-8-64'].parts['plate'].setMeshControls(regions=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask((
    '[#ffffffff:2 #ffff ]', ), ), technique=STRUCTURED)
mdb.models['S2-2-450-8-64'].parts['plate'].generateMesh()
del mdb.models['S2-2-450-8-64']
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-2-450-8-64')
mdb.models['S2-2-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-2-450-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-2-450-8-64'].parts['plate'].BaseSolidExtrude(depth=18.0, sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(18.0, 0.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-2-450-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-2-450-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-375.0, 
    -375.0), point2=(375.0, 375.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-2-450-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-2-450-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].Material(name='Q355')
mdb.models['S2-2-450-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-2-450-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-2-450-8-64'].Material(name='CrMoA')
mdb.models['S2-2-450-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-2-450-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-2-450-8-64'].Material(name='Rigid')
mdb.models['S2-2-450-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-2-450-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-2-450-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-2-450-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-2-450-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-2-450-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-2-450-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-2-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-2-450-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-2-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-2-450-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-2-450-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-2-450-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-2-450-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-2-450-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-2-450-8-64'].parts['plane'])
mdb.models['S2-2-450-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-2-450-8-64'].parts['plate'])
mdb.models['S2-2-450-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-2-450-8-64'].parts['T-beam'])
mdb.models['S2-2-450-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-2-450-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-225.0, 225.0, 18.0))
mdb.models['S2-2-450-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=225.0, spacing2=225.0)
del mdb.models['S2-2-450-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-2-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-2-450-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-2-450-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-2-450-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-2-450-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-2-450-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-2-450-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-2-450-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-2-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'])
mdb.models['S2-2-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'])
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 
    -225.0), point2=(375.0, -225.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 0.0), 
    point2=(375.0, 0.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 225.0)
    , point2=(375.0, 225.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(-225.0, 
    -375.0), point2=(-225.0, 375.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(0.0, -375.0), 
    point2=(0.0, 375.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].Line(point1=(225.0, -375.0)
    , point2=(225.0, 375.0))
mdb.models['S2-2-450-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-2-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-2-450-8-64'].parts['plane'].edges[9])
mdb.models['S2-2-450-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-2-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-2-450-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=18.0)
mdb.models['S2-2-450-8-64'].parts['plane'].generateMesh()
mdb.models['S2-2-450-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-2-450-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-2-450-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-2-450-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-2-450-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-2-450-8-64'].sketches['__profile__'])
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-70.0, 
    -70.0), point2=(70.0, 70.0))
mdb.models['S2-2-450-8-64'].sketches['__profile__'].rectangle(point1=(-58.0, 
    -58.0), point2=(58.0, 58.0))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-2-450-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-2-450-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[7])
del mdb.models['S2-2-450-8-64'].sketches['__profile__']
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-2-450-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-2-450-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-2-450-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-2-450-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-2-450-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-2-450-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-2-450-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-2-450-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[174])
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[73])
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[100])
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[207])
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[88])
mdb.models['S2-2-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-2-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-2-450-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-2-450-8-64'].parts['plate'].vertices[64])
mdb.models['S2-2-450-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-2-450-8-64'].parts['plate'].generateMesh()
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-2-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-2-450-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-2-450-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-2-450-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-2-450-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-2-450-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-2-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-2-450-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-2-450-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-2-450-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-2-450-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-2-450-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-2-450-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-2-450-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-2-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-2-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-2-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-2-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-2-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-2-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-2-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-2-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-2-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-2-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-2-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-2-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-2-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-2-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-2-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-2-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-2-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-2-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-2-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-2-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-2-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-2-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-2-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-2-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-2-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-2-450-8-64'].ConcentratedForce(cf1=12740, cf2=11892, cf3=18222, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-2-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-2-450-8-64'].Moment(cm1=31047000, cm2=32433000, cm3=8000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-2-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-2-450-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-2-450-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-2-450-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-2-450-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-2-450-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-2-450-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-2-450-8-64-1'].waitForCompletion()
mdb.Model(name='S2-2-450-8-64-2', objectToCopy=mdb.models['S2-2-450-8-64'])
mdb.models['S2-2-450-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-2-450-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-2-450-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-2-450-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-2-450-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-2-450-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=20.0, vertex1=
    mdb.models['S2-2-450-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-2-450-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-2-450-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-2-450-8-64-2'].sketches['__edit__'])
del mdb.models['S2-2-450-8-64-2'].sketches['__edit__']
mdb.models['S2-2-450-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-2-450-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=20.0)
mdb.models['S2-2-450-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-2-450-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-2-450-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['S2-2-450-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-2-450-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-2-450-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-2-450-8-64-2', objectToCopy=mdb.jobs['S2-2-450-8-64-1'])
mdb.jobs['S2-2-450-8-64-2'].setValues(model='S2-2-450-8-64-2')
mdb.jobs['S2-2-450-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-2-450-8-64-2'].waitForCompletion()
mdb.Model(name='S2-2-450-8-64-3', objectToCopy=mdb.models['S2-2-450-8-64'])
mdb.models['S2-2-450-8-64-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-2-450-8-64-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-2-450-8-64-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-2-450-8-64-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-2-450-8-64-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-2-450-8-64-3'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=22.0, vertex1=
    mdb.models['S2-2-450-8-64-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-2-450-8-64-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-2-450-8-64-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-2-450-8-64-3'].sketches['__edit__'])
del mdb.models['S2-2-450-8-64-3'].sketches['__edit__']
mdb.models['S2-2-450-8-64-3'].parts['T-beam'].regenerate()
mdb.models['S2-2-450-8-64-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=22.0)
mdb.models['S2-2-450-8-64-3'].parts['plate'].regenerate()
mdb.models['S2-2-450-8-64-3'].parts['plate'].deleteMesh()
mdb.models['S2-2-450-8-64-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.5)
mdb.models['S2-2-450-8-64-3'].parts['plate'].generateMesh()
mdb.models['S2-2-450-8-64-3'].parts['T-beam'].generateMesh()
mdb.models['S2-2-450-8-64-3'].rootAssembly.regenerate()
mdb.Job(name='S2-2-450-8-64-3', objectToCopy=mdb.jobs['S2-2-450-8-64-2'])
mdb.jobs['S2-2-450-8-64-3'].setValues(model='S2-2-450-8-64-3')
mdb.jobs['S2-2-450-8-64-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-2-450-8-64-3'].waitForCompletion()
mdb.Model(name='S2-2-450-8-64-4', objectToCopy=mdb.models['S2-2-450-8-64'])
mdb.models['S2-2-450-8-64-4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-2-450-8-64-4'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-2-450-8-64-4'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-2-450-8-64-4'].sketches['__edit__'], upToFeature=
    mdb.models['S2-2-450-8-64-4'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-2-450-8-64-4'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=24.0, vertex1=
    mdb.models['S2-2-450-8-64-4'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-2-450-8-64-4'].sketches['__edit__'].vertices[1])
mdb.models['S2-2-450-8-64-4'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-2-450-8-64-4'].sketches['__edit__'])
del mdb.models['S2-2-450-8-64-4'].sketches['__edit__']
mdb.models['S2-2-450-8-64-4'].parts['T-beam'].regenerate()
mdb.models['S2-2-450-8-64-4'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=24.0)
mdb.models['S2-2-450-8-64-4'].parts['plate'].regenerate()
mdb.models['S2-2-450-8-64-4'].parts['plate'].deleteMesh()
mdb.models['S2-2-450-8-64-4'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['S2-2-450-8-64-4'].parts['plate'].generateMesh()
mdb.models['S2-2-450-8-64-4'].parts['T-beam'].generateMesh()
mdb.models['S2-2-450-8-64-4'].rootAssembly.regenerate()
mdb.Job(name='S2-2-450-8-64-4', objectToCopy=mdb.jobs['S2-2-450-8-64-3'])
mdb.jobs['S2-2-450-8-64-4'].setValues(model='S2-2-450-8-64-4')
mdb.jobs['S2-2-450-8-64-4'].submit(consistencyChecking=OFF)
mdb.jobs['S2-2-450-8-64-4'].waitForCompletion()
mdb.Model(name='S2-2-450-8-64-5', objectToCopy=mdb.models['S2-2-450-8-64'])
mdb.models['S2-2-450-8-64-5'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-2-450-8-64-5'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-2-450-8-64-5'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-2-450-8-64-5'].sketches['__edit__'], upToFeature=
    mdb.models['S2-2-450-8-64-5'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-2-450-8-64-5'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=26.0, vertex1=
    mdb.models['S2-2-450-8-64-5'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-2-450-8-64-5'].sketches['__edit__'].vertices[1])
mdb.models['S2-2-450-8-64-5'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-2-450-8-64-5'].sketches['__edit__'])
del mdb.models['S2-2-450-8-64-5'].sketches['__edit__']
mdb.models['S2-2-450-8-64-5'].parts['T-beam'].regenerate()
mdb.models['S2-2-450-8-64-5'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=26.0)
mdb.models['S2-2-450-8-64-5'].parts['plate'].regenerate()
mdb.models['S2-2-450-8-64-5'].parts['plate'].deleteMesh()
mdb.models['S2-2-450-8-64-5'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-2-450-8-64-5'].parts['plate'].generateMesh()
mdb.models['S2-2-450-8-64-5'].parts['T-beam'].generateMesh()
mdb.models['S2-2-450-8-64-5'].rootAssembly.regenerate()
mdb.Job(name='S2-2-450-8-64-5', objectToCopy=mdb.jobs['S2-2-450-8-64-4'])
mdb.jobs['S2-2-450-8-64-5'].setValues(model='S2-2-450-8-64-5')
mdb.jobs['S2-2-450-8-64-5'].submit(consistencyChecking=OFF)
mdb.jobs['S2-2-450-8-64-5'].waitForCompletion()
mdb.Model(name='S2-2-450-8-64-6', objectToCopy=mdb.models['S2-2-450-8-64'])
mdb.models['S2-2-450-8-64-6'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-2-450-8-64-6'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-2-450-8-64-6'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-2-450-8-64-6'].sketches['__edit__'], upToFeature=
    mdb.models['S2-2-450-8-64-6'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-2-450-8-64-6'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=28.0, vertex1=
    mdb.models['S2-2-450-8-64-6'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-2-450-8-64-6'].sketches['__edit__'].vertices[1])
mdb.models['S2-2-450-8-64-6'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-2-450-8-64-6'].sketches['__edit__'])
del mdb.models['S2-2-450-8-64-6'].sketches['__edit__']
mdb.models['S2-2-450-8-64-6'].parts['T-beam'].regenerate()
mdb.models['S2-2-450-8-64-6'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=28.0)
mdb.models['S2-2-450-8-64-6'].parts['plate'].regenerate()
mdb.models['S2-2-450-8-64-6'].parts['plate'].deleteMesh()
mdb.models['S2-2-450-8-64-6'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['S2-2-450-8-64-6'].parts['plate'].generateMesh()
mdb.models['S2-2-450-8-64-6'].parts['T-beam'].generateMesh()
mdb.models['S2-2-450-8-64-6'].rootAssembly.regenerate()
mdb.Job(name='S2-2-450-8-64-6', objectToCopy=mdb.jobs['S2-2-450-8-64-5'])
mdb.jobs['S2-2-450-8-64-6'].setValues(model='S2-2-450-8-64-6')
mdb.jobs['S2-2-450-8-64-6'].submit(consistencyChecking=OFF)
mdb.jobs['S2-2-450-8-64-6'].waitForCompletion()
mdb.Model(name='S2-2-450-8-64-7', objectToCopy=mdb.models['S2-2-450-8-64'])
mdb.models['S2-2-450-8-64-7'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-2-450-8-64-7'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-2-450-8-64-7'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-2-450-8-64-7'].sketches['__edit__'], upToFeature=
    mdb.models['S2-2-450-8-64-7'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-2-450-8-64-7'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=30.0, vertex1=
    mdb.models['S2-2-450-8-64-7'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-2-450-8-64-7'].sketches['__edit__'].vertices[1])
mdb.models['S2-2-450-8-64-7'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-2-450-8-64-7'].sketches['__edit__'])
del mdb.models['S2-2-450-8-64-7'].sketches['__edit__']
mdb.models['S2-2-450-8-64-7'].parts['T-beam'].regenerate()
mdb.models['S2-2-450-8-64-7'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=30.0)
mdb.models['S2-2-450-8-64-7'].parts['plate'].regenerate()
mdb.models['S2-2-450-8-64-7'].parts['plate'].deleteMesh()
mdb.models['S2-2-450-8-64-7'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-2-450-8-64-7'].parts['plate'].generateMesh()
mdb.models['S2-2-450-8-64-7'].parts['T-beam'].generateMesh()
mdb.models['S2-2-450-8-64-7'].rootAssembly.regenerate()
mdb.Job(name='S2-2-450-8-64-7', objectToCopy=mdb.jobs['S2-2-450-8-64-6'])
mdb.jobs['S2-2-450-8-64-7'].setValues(model='S2-2-450-8-64-7')
mdb.jobs['S2-2-450-8-64-7'].submit(consistencyChecking=OFF)
mdb.jobs['S2-2-450-8-64-7'].waitForCompletion()
mdb.Model(name='S2-2-450-8-64-8', objectToCopy=mdb.models['S2-2-450-8-64'])
mdb.models['S2-2-450-8-64-8'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-2-450-8-64-8'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-2-450-8-64-8'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-2-450-8-64-8'].sketches['__edit__'], upToFeature=
    mdb.models['S2-2-450-8-64-8'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-2-450-8-64-8'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=32.0, vertex1=
    mdb.models['S2-2-450-8-64-8'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-2-450-8-64-8'].sketches['__edit__'].vertices[1])
mdb.models['S2-2-450-8-64-8'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-2-450-8-64-8'].sketches['__edit__'])
del mdb.models['S2-2-450-8-64-8'].sketches['__edit__']
mdb.models['S2-2-450-8-64-8'].parts['T-beam'].regenerate()
mdb.models['S2-2-450-8-64-8'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=32.0)
mdb.models['S2-2-450-8-64-8'].parts['plate'].regenerate()
mdb.models['S2-2-450-8-64-8'].parts['plate'].deleteMesh()
mdb.models['S2-2-450-8-64-8'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.0)
mdb.models['S2-2-450-8-64-8'].parts['plate'].generateMesh()
mdb.models['S2-2-450-8-64-8'].parts['T-beam'].generateMesh()
mdb.models['S2-2-450-8-64-8'].rootAssembly.regenerate()
mdb.Job(name='S2-2-450-8-64-8', objectToCopy=mdb.jobs['S2-2-450-8-64-7'])
mdb.jobs['S2-2-450-8-64-8'].setValues(model='S2-2-450-8-64-8')
mdb.jobs['S2-2-450-8-64-8'].submit(consistencyChecking=OFF)
mdb.jobs['S2-2-450-8-64-8'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-3-450-8-64')
mdb.models['S2-3-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-3-450-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-450-8-64'].parts['plate'].BaseSolidExtrude(depth=30.0, sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(30.0, 0.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-3-450-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-450-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-375.0, 
    -375.0), point2=(375.0, 375.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-3-450-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-450-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].Material(name='Q355')
mdb.models['S2-3-450-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-450-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-3-450-8-64'].Material(name='CrMoA')
mdb.models['S2-3-450-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-450-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-3-450-8-64'].Material(name='Rigid')
mdb.models['S2-3-450-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-450-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-3-450-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-3-450-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-3-450-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-3-450-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-3-450-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-3-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-3-450-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-3-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-3-450-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-3-450-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-3-450-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-3-450-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-3-450-8-64'].parts['plane'])
mdb.models['S2-3-450-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-3-450-8-64'].parts['plate'])
mdb.models['S2-3-450-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-3-450-8-64'].parts['T-beam'])
mdb.models['S2-3-450-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-3-450-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-225.0, 225.0, 30.0))
mdb.models['S2-3-450-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=225.0, spacing2=225.0)
del mdb.models['S2-3-450-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-3-450-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-3-450-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-3-450-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-3-450-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-3-450-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-3-450-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-3-450-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-3-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'])
mdb.models['S2-3-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'])
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 
    -225.0), point2=(375.0, -225.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 0.0), 
    point2=(375.0, 0.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 225.0)
    , point2=(375.0, 225.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-225.0, 
    -375.0), point2=(-225.0, 375.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(0.0, -375.0), 
    point2=(0.0, 375.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(225.0, -375.0)
    , point2=(225.0, 375.0))
mdb.models['S2-3-450-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-3-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-3-450-8-64'].parts['plane'].edges[9])
mdb.models['S2-3-450-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-3-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-3-450-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=30.0)
mdb.models['S2-3-450-8-64'].parts['plane'].generateMesh()
mdb.models['S2-3-450-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-3-450-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-3-450-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-3-450-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-3-450-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'])
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-75.0, 
    -75.0), point2=(75.0, 75.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-65.0, 
    -65.0), point2=(65.0, 65.0))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-3-450-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[7])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[174])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[73])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[100])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[207])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[88])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[64])
mdb.models['S2-3-450-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-3-450-8-64'].parts['plate'].generateMesh()
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-3-450-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-3-450-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-3-450-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-3-450-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-3-450-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-3-450-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-3-450-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-3-450-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-3-450-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-3-450-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].ConcentratedForce(cf1=20871, cf2=18387, cf3=32747, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-3-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-3-450-8-64'].Moment(cm1=31528000, cm2=33952000, cm3=13000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-3-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-3-450-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-3-450-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-3-450-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-3-450-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-3-450-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-3-450-8-64-1'].waitForCompletion()
del mdb.models['S2-3-450-8-64']
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-3-450-8-64')
mdb.models['S2-3-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-3-450-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-450-8-64'].parts['plate'].BaseSolidExtrude(depth=26.0, sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(26.0, 0.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-3-450-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-450-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-375.0, 
    -375.0), point2=(375.0, 375.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-3-450-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-450-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].Material(name='Q355')
mdb.models['S2-3-450-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-450-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-3-450-8-64'].Material(name='CrMoA')
mdb.models['S2-3-450-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-450-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-3-450-8-64'].Material(name='Rigid')
mdb.models['S2-3-450-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-450-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-3-450-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-3-450-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-3-450-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-3-450-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-3-450-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-3-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-3-450-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-3-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-3-450-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-3-450-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-3-450-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-3-450-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-3-450-8-64'].parts['plane'])
mdb.models['S2-3-450-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-3-450-8-64'].parts['plate'])
mdb.models['S2-3-450-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-3-450-8-64'].parts['T-beam'])
mdb.models['S2-3-450-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-3-450-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-225.0, 225.0, 26.0))
mdb.models['S2-3-450-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=225.0, spacing2=225.0)
del mdb.models['S2-3-450-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-3-450-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-3-450-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-3-450-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-3-450-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-3-450-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-3-450-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-3-450-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-3-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'])
mdb.models['S2-3-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'])
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 
    -225.0), point2=(375.0, -225.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 0.0), 
    point2=(375.0, 0.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 225.0)
    , point2=(375.0, 225.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-225.0, 
    -375.0), point2=(-225.0, 375.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(0.0, -375.0), 
    point2=(0.0, 375.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(225.0, -375.0)
    , point2=(225.0, 375.0))
mdb.models['S2-3-450-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-3-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-3-450-8-64'].parts['plane'].edges[9])
mdb.models['S2-3-450-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-3-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-3-450-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=26.0)
mdb.models['S2-3-450-8-64'].parts['plane'].generateMesh()
mdb.models['S2-3-450-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-3-450-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-3-450-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-3-450-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-3-450-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'])
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-75.0, 
    -75.0), point2=(75.0, 75.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-65.0, 
    -65.0), point2=(65.0, 65.0))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-3-450-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[7])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[174])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[73])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[100])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[207])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[88])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[64])
mdb.models['S2-3-450-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-3-450-8-64'].parts['plate'].generateMesh()
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-3-450-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-3-450-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-3-450-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-3-450-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-3-450-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-3-450-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-3-450-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-3-450-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-3-450-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-3-450-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].ConcentratedForce(cf1=20871, cf2=18387, cf3=32747, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-3-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-3-450-8-64'].Moment(cm1=31528000, cm2=33952000, cm3=13000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-3-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-3-450-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-3-450-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-3-450-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-3-450-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-3-450-8-64-1'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file S2-3-450-8-64-1.lck. Please confirm that no 
#* other applications are attempting to write to the output database associated 
#* with this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
del mdb.models['S2-3-450-8-64']
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-3-450-8-64')
mdb.models['S2-3-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-3-450-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-450-8-64'].parts['plate'].BaseSolidExtrude(depth=26.0, sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(26.0, 0.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-3-450-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-450-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-375.0, 
    -375.0), point2=(375.0, 375.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-3-450-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-450-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].Material(name='Q355')
mdb.models['S2-3-450-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-450-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-3-450-8-64'].Material(name='CrMoA')
mdb.models['S2-3-450-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-450-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-3-450-8-64'].Material(name='Rigid')
mdb.models['S2-3-450-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-450-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-3-450-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-3-450-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-3-450-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-3-450-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-3-450-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-3-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-3-450-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-3-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-3-450-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-3-450-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-3-450-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-3-450-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-3-450-8-64'].parts['plane'])
mdb.models['S2-3-450-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-3-450-8-64'].parts['plate'])
mdb.models['S2-3-450-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-3-450-8-64'].parts['T-beam'])
mdb.models['S2-3-450-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-3-450-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-225.0, 225.0, 26.0))
mdb.models['S2-3-450-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=225.0, spacing2=225.0)
del mdb.models['S2-3-450-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-3-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-3-450-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-3-450-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-3-450-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-3-450-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-3-450-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-3-450-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-3-450-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-3-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'])
mdb.models['S2-3-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'])
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 
    -225.0), point2=(375.0, -225.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 0.0), 
    point2=(375.0, 0.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 225.0)
    , point2=(375.0, 225.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(-225.0, 
    -375.0), point2=(-225.0, 375.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(0.0, -375.0), 
    point2=(0.0, 375.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].Line(point1=(225.0, -375.0)
    , point2=(225.0, 375.0))
mdb.models['S2-3-450-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-3-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-3-450-8-64'].parts['plane'].edges[9])
mdb.models['S2-3-450-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-3-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-3-450-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=26.0)
mdb.models['S2-3-450-8-64'].parts['plane'].generateMesh()
mdb.models['S2-3-450-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-3-450-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-3-450-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-3-450-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-3-450-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-450-8-64'].sketches['__profile__'])
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-75.0, 
    -75.0), point2=(75.0, 75.0))
mdb.models['S2-3-450-8-64'].sketches['__profile__'].rectangle(point1=(-65.0, 
    -65.0), point2=(65.0, 65.0))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-3-450-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-3-450-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[7])
del mdb.models['S2-3-450-8-64'].sketches['__profile__']
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-3-450-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-3-450-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[174])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[73])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[100])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[207])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[88])
mdb.models['S2-3-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-3-450-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-3-450-8-64'].parts['plate'].vertices[64])
mdb.models['S2-3-450-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-3-450-8-64'].parts['plate'].generateMesh()
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-450-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-3-450-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-3-450-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-3-450-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-3-450-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-3-450-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-3-450-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-3-450-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-3-450-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-3-450-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-3-450-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-450-8-64'].ConcentratedForce(cf1=20871, cf2=18387, cf3=32747, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-3-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-3-450-8-64'].Moment(cm1=31528000, cm2=33952000, cm3=13000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-3-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-3-450-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-3-450-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-3-450-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-3-450-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-3-450-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-3-450-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-3-450-8-64-1'].waitForCompletion()
mdb.Model(name='S2-3-450-8-64-2', objectToCopy=mdb.models['S2-3-450-8-64'])
mdb.models['S2-3-450-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-3-450-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-3-450-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-3-450-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-3-450-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-3-450-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=28.0, vertex1=
    mdb.models['S2-3-450-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-3-450-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-3-450-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-3-450-8-64-2'].sketches['__edit__'])
del mdb.models['S2-3-450-8-64-2'].sketches['__edit__']
mdb.models['S2-3-450-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-3-450-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=28.0)
mdb.models['S2-3-450-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-3-450-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-3-450-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['S2-3-450-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-3-450-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-3-450-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-3-450-8-64-2', objectToCopy=mdb.jobs['S2-3-450-8-64-1'])
mdb.jobs['S2-3-450-8-64-2'].setValues(model='S2-3-450-8-64-2')
mdb.jobs['S2-3-450-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-3-450-8-64-2'].waitForCompletion()
mdb.Model(name='S2-3-450-8-64-3', objectToCopy=mdb.models['S2-3-450-8-64'])
mdb.models['S2-3-450-8-64-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-3-450-8-64-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-3-450-8-64-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-3-450-8-64-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-3-450-8-64-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-3-450-8-64-3'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=30.0, vertex1=
    mdb.models['S2-3-450-8-64-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-3-450-8-64-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-3-450-8-64-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-3-450-8-64-3'].sketches['__edit__'])
del mdb.models['S2-3-450-8-64-3'].sketches['__edit__']
mdb.models['S2-3-450-8-64-3'].parts['T-beam'].regenerate()
mdb.models['S2-3-450-8-64-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=30.0)
mdb.models['S2-3-450-8-64-3'].parts['plate'].regenerate()
mdb.models['S2-3-450-8-64-3'].parts['plate'].deleteMesh()
mdb.models['S2-3-450-8-64-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-3-450-8-64-3'].parts['plate'].generateMesh()
mdb.models['S2-3-450-8-64-3'].parts['T-beam'].generateMesh()
mdb.models['S2-3-450-8-64-3'].rootAssembly.regenerate()
mdb.Job(name='S2-3-450-8-64-3', objectToCopy=mdb.jobs['S2-3-450-8-64-2'])
mdb.jobs['S2-3-450-8-64-3'].setValues(model='S2-3-450-8-64-3')
mdb.jobs['S2-3-450-8-64-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-3-450-8-64-3'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-3-550-8-64')
mdb.models['S2-3-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-550-8-64'].sketches['__profile__'].rectangle(point1=(-325.0, 
    -325.0), point2=(325.0, 325.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-3-550-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-550-8-64'].parts['plate'].BaseSolidExtrude(depth=26.0, sketch=
    mdb.models['S2-3-550-8-64'].sketches['__profile__'])
del mdb.models['S2-3-550-8-64'].sketches['__profile__']
mdb.models['S2-3-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-550-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(26.0, 0.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-3-550-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-3-550-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-550-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-3-550-8-64'].sketches['__profile__'])
del mdb.models['S2-3-550-8-64'].sketches['__profile__']
mdb.models['S2-3-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-3-550-8-64'].sketches['__profile__'].rectangle(point1=(-425.0, 
    -425.0), point2=(425.0, 425.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-3-550-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-3-550-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-3-550-8-64'].sketches['__profile__'])
del mdb.models['S2-3-550-8-64'].sketches['__profile__']
mdb.models['S2-3-550-8-64'].Material(name='Q355')
mdb.models['S2-3-550-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-550-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-3-550-8-64'].Material(name='CrMoA')
mdb.models['S2-3-550-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-550-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-3-550-8-64'].Material(name='Rigid')
mdb.models['S2-3-550-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-3-550-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-3-550-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-3-550-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-3-550-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-3-550-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-3-550-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-3-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-3-550-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-3-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-550-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-3-550-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-3-550-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-3-550-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-3-550-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-3-550-8-64'].parts['plane'])
mdb.models['S2-3-550-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-3-550-8-64'].parts['plate'])
mdb.models['S2-3-550-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-3-550-8-64'].parts['T-beam'])
mdb.models['S2-3-550-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-3-550-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-275.0, 275.0, 26.0))
mdb.models['S2-3-550-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=275.0, spacing2=275.0)
del mdb.models['S2-3-550-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-3-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-3-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-3-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-3-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-3-550-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-3-550-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-3-550-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-3-550-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-3-550-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-3-550-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-3-550-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-3-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-550-8-64'].sketches['__profile__'])
mdb.models['S2-3-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-550-8-64'].sketches['__profile__'])
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 
    -275.0), point2=(425.0, -275.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 0.0), 
    point2=(425.0, 0.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 275.0)
    , point2=(425.0, 275.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].Line(point1=(-275.0, 
    -425.0), point2=(-275.0, 425.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].Line(point1=(0.0, -425.0), 
    point2=(0.0, 425.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].Line(point1=(275.0, -425.0)
    , point2=(275.0, 425.0))
mdb.models['S2-3-550-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-3-550-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-3-550-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-3-550-8-64'].parts['plane'].edges[9])
mdb.models['S2-3-550-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-3-550-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-3-550-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=26.0)
mdb.models['S2-3-550-8-64'].parts['plane'].generateMesh()
mdb.models['S2-3-550-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-3-550-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-3-550-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-3-550-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-3-550-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-3-550-8-64'].sketches['__profile__'])
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].rectangle(point1=(-75.0, 
    -75.0), point2=(75.0, 75.0))
mdb.models['S2-3-550-8-64'].sketches['__profile__'].rectangle(point1=(-65.0, 
    -65.0), point2=(65.0, 65.0))
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-3-550-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-3-550-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[7])
del mdb.models['S2-3-550-8-64'].sketches['__profile__']
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-3-550-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-3-550-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-3-550-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-3-550-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-3-550-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-3-550-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-3-550-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-3-550-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].vertices[174])
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].vertices[73])
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].vertices[100])
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].vertices[207])
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].vertices[88])
mdb.models['S2-3-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-3-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-3-550-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-3-550-8-64'].parts['plate'].vertices[64])
mdb.models['S2-3-550-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-3-550-8-64'].parts['plate'].generateMesh()
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-3-550-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-3-550-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-3-550-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-3-550-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-3-550-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-3-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-3-550-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-3-550-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-3-550-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-3-550-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-3-550-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-3-550-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-3-550-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-3-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-3-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-3-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-3-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-3-550-8-64'].ConcentratedForce(cf1=20871, cf2=18387, cf3=32747, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-3-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-3-550-8-64'].Moment(cm1=31528000, cm2=33952000, cm3=13000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-3-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-3-550-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-3-550-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-3-550-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-3-550-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-3-550-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-3-550-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-3-550-8-64-1'].waitForCompletion()
mdb.Model(name='S2-3-550-8-64-2', objectToCopy=mdb.models['S2-3-550-8-64'])
mdb.models['S2-3-550-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-3-550-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-3-550-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-3-550-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-3-550-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-3-550-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=28.0, vertex1=
    mdb.models['S2-3-550-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-3-550-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-3-550-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-3-550-8-64-2'].sketches['__edit__'])
del mdb.models['S2-3-550-8-64-2'].sketches['__edit__']
mdb.models['S2-3-550-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-3-550-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=28.0)
mdb.models['S2-3-550-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-3-550-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-3-550-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['S2-3-550-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-3-550-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-3-550-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-3-550-8-64-2', objectToCopy=mdb.jobs['S2-3-550-8-64-1'])
mdb.jobs['S2-3-550-8-64-2'].setValues(model='S2-3-550-8-64-2')
mdb.jobs['S2-3-550-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-3-550-8-64-2'].waitForCompletion()
mdb.Model(name='S2-3-550-8-64-3', objectToCopy=mdb.models['S2-3-550-8-64'])
mdb.models['S2-3-550-8-64-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-3-550-8-64-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-3-550-8-64-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-3-550-8-64-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-3-550-8-64-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-3-550-8-64-3'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=30.0, vertex1=
    mdb.models['S2-3-550-8-64-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-3-550-8-64-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-3-550-8-64-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-3-550-8-64-3'].sketches['__edit__'])
del mdb.models['S2-3-550-8-64-3'].sketches['__edit__']
mdb.models['S2-3-550-8-64-3'].parts['T-beam'].regenerate()
mdb.models['S2-3-550-8-64-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=30.0)
mdb.models['S2-3-550-8-64-3'].parts['plate'].regenerate()
mdb.models['S2-3-550-8-64-3'].parts['plate'].deleteMesh()
mdb.models['S2-3-550-8-64-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-3-550-8-64-3'].parts['plate'].generateMesh()
mdb.models['S2-3-550-8-64-3'].parts['T-beam'].generateMesh()
mdb.models['S2-3-550-8-64-3'].rootAssembly.regenerate()
mdb.Job(name='S2-3-550-8-64-3', objectToCopy=mdb.jobs['S2-3-550-8-64-2'])
mdb.jobs['S2-3-550-8-64-3'].setValues(model='S2-3-550-8-64-3')
mdb.jobs['S2-3-550-8-64-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-3-550-8-64-3'].waitForCompletion()
mdb.Model(name='S2-3-550-8-64-4', objectToCopy=mdb.models['S2-3-550-8-64'])
mdb.models['S2-3-550-8-64-4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-3-550-8-64-4'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-3-550-8-64-4'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-3-550-8-64-4'].sketches['__edit__'], upToFeature=
    mdb.models['S2-3-550-8-64-4'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-3-550-8-64-4'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=32.0, vertex1=
    mdb.models['S2-3-550-8-64-4'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-3-550-8-64-4'].sketches['__edit__'].vertices[1])
mdb.models['S2-3-550-8-64-4'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-3-550-8-64-4'].sketches['__edit__'])
del mdb.models['S2-3-550-8-64-4'].sketches['__edit__']
mdb.models['S2-3-550-8-64-4'].parts['T-beam'].regenerate()
mdb.models['S2-3-550-8-64-4'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=32.0)
mdb.models['S2-3-550-8-64-4'].parts['plate'].regenerate()
mdb.models['S2-3-550-8-64-4'].parts['plate'].deleteMesh()
mdb.models['S2-3-550-8-64-4'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.0)
mdb.models['S2-3-550-8-64-4'].parts['plate'].generateMesh()
mdb.models['S2-3-550-8-64-4'].parts['T-beam'].generateMesh()
mdb.models['S2-3-550-8-64-4'].rootAssembly.regenerate()
mdb.Job(name='S2-3-550-8-64-4', objectToCopy=mdb.jobs['S2-3-550-8-64-3'])
mdb.jobs['S2-3-550-8-64-4'].setValues(model='S2-3-550-8-64-4')
mdb.jobs['S2-3-550-8-64-4'].submit(consistencyChecking=OFF)
mdb.jobs['S2-3-550-8-64-4'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-4-550-8-64')
mdb.models['S2-4-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-4-550-8-64'].sketches['__profile__'].rectangle(point1=(-325.0, 
    -325.0), point2=(325.0, 325.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-4-550-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-4-550-8-64'].parts['plate'].BaseSolidExtrude(depth=30.0, sketch=
    mdb.models['S2-4-550-8-64'].sketches['__profile__'])
del mdb.models['S2-4-550-8-64'].sketches['__profile__']
mdb.models['S2-4-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-4-550-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(30.0, 0.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-4-550-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-4-550-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-4-550-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-4-550-8-64'].sketches['__profile__'])
del mdb.models['S2-4-550-8-64'].sketches['__profile__']
mdb.models['S2-4-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-4-550-8-64'].sketches['__profile__'].rectangle(point1=(-425.0, 
    -425.0), point2=(425.0, 425.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-4-550-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-4-550-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-4-550-8-64'].sketches['__profile__'])
del mdb.models['S2-4-550-8-64'].sketches['__profile__']
mdb.models['S2-4-550-8-64'].Material(name='Q355')
mdb.models['S2-4-550-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-4-550-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-4-550-8-64'].Material(name='CrMoA')
mdb.models['S2-4-550-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-4-550-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-4-550-8-64'].Material(name='Rigid')
mdb.models['S2-4-550-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-4-550-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-4-550-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-4-550-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-4-550-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-4-550-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-4-550-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-4-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-4-550-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-4-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-4-550-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-4-550-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-4-550-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-4-550-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-4-550-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-4-550-8-64'].parts['plane'])
mdb.models['S2-4-550-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-4-550-8-64'].parts['plate'])
mdb.models['S2-4-550-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-4-550-8-64'].parts['T-beam'])
mdb.models['S2-4-550-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-4-550-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-275.0, 275.0, 30.0))
mdb.models['S2-4-550-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=275.0, spacing2=275.0)
del mdb.models['S2-4-550-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-4-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-4-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-4-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-4-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-4-550-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-4-550-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-4-550-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-4-550-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-4-550-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-4-550-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-4-550-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-4-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-4-550-8-64'].sketches['__profile__'])
mdb.models['S2-4-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-4-550-8-64'].sketches['__profile__'])
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 
    -275.0), point2=(425.0, -275.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 0.0), 
    point2=(425.0, 0.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 275.0)
    , point2=(425.0, 275.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].Line(point1=(-275.0, 
    -425.0), point2=(-275.0, 425.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].Line(point1=(0.0, -425.0), 
    point2=(0.0, 425.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].Line(point1=(275.0, -425.0)
    , point2=(275.0, 425.0))
mdb.models['S2-4-550-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-4-550-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-4-550-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-4-550-8-64'].parts['plane'].edges[9])
mdb.models['S2-4-550-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-4-550-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-4-550-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=30.0)
mdb.models['S2-4-550-8-64'].parts['plane'].generateMesh()
mdb.models['S2-4-550-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-4-550-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-4-550-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-4-550-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-4-550-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-4-550-8-64'].sketches['__profile__'])
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].rectangle(point1=(-70.0, 
    -70.0), point2=(70.0, 70.0))
mdb.models['S2-4-550-8-64'].sketches['__profile__'].rectangle(point1=(-58.0, 
    -58.0), point2=(58.0, 58.0))
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-4-550-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-4-550-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[7])
del mdb.models['S2-4-550-8-64'].sketches['__profile__']
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-4-550-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-4-550-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-4-550-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-4-550-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-4-550-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-4-550-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-4-550-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-4-550-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].vertices[174])
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].vertices[73])
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].vertices[100])
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].vertices[207])
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].vertices[88])
mdb.models['S2-4-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-4-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-4-550-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-4-550-8-64'].parts['plate'].vertices[64])
mdb.models['S2-4-550-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-4-550-8-64'].parts['plate'].generateMesh()
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-4-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-4-550-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-4-550-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-4-550-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-4-550-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-4-550-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-4-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-4-550-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-4-550-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-4-550-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-4-550-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-4-550-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-4-550-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-4-550-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-4-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-4-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-4-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-4-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-4-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-4-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-4-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-4-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-4-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-4-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-4-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-4-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-4-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-4-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-4-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-4-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-4-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-4-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-4-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-4-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-4-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-4-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-4-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-4-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-4-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-4-550-8-64'].ConcentratedForce(cf1=16307, cf2=23127, cf3=25203, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-4-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-4-550-8-64'].Moment(cm1=44589000, cm2=28198000, cm3=4818000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-4-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-4-550-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-4-550-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-4-550-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-4-550-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-4-550-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-4-550-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-4-550-8-64-1'].waitForCompletion()
mdb.Model(name='S2-4-550-8-64-2', objectToCopy=mdb.models['S2-4-550-8-64'])
mdb.models['S2-4-550-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-4-550-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-4-550-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-4-550-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-4-550-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-4-550-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=32.0, vertex1=
    mdb.models['S2-4-550-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-4-550-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-4-550-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-4-550-8-64-2'].sketches['__edit__'])
del mdb.models['S2-4-550-8-64-2'].sketches['__edit__']
mdb.models['S2-4-550-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-4-550-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=32.0)
mdb.models['S2-4-550-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-4-550-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-4-550-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.0)
mdb.models['S2-4-550-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-4-550-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-4-550-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-4-550-8-64-2', objectToCopy=mdb.jobs['S2-4-550-8-64-1'])
mdb.jobs['S2-4-550-8-64-2'].setValues(model='S2-4-550-8-64-2')
mdb.jobs['S2-4-550-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-4-550-8-64-2'].waitForCompletion()
mdb.Model(name='S2-4-550-8-64-3', objectToCopy=mdb.models['S2-4-550-8-64'])
mdb.models['S2-4-550-8-64-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-4-550-8-64-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-4-550-8-64-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-4-550-8-64-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-4-550-8-64-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-4-550-8-64-3'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=34.0, vertex1=
    mdb.models['S2-4-550-8-64-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-4-550-8-64-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-4-550-8-64-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-4-550-8-64-3'].sketches['__edit__'])
del mdb.models['S2-4-550-8-64-3'].sketches['__edit__']
mdb.models['S2-4-550-8-64-3'].parts['T-beam'].regenerate()
mdb.models['S2-4-550-8-64-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=34.0)
mdb.models['S2-4-550-8-64-3'].parts['plate'].regenerate()
mdb.models['S2-4-550-8-64-3'].parts['plate'].deleteMesh()
mdb.models['S2-4-550-8-64-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.5)
mdb.models['S2-4-550-8-64-3'].parts['plate'].generateMesh()
mdb.models['S2-4-550-8-64-3'].parts['T-beam'].generateMesh()
mdb.models['S2-4-550-8-64-3'].rootAssembly.regenerate()
mdb.Job(name='S2-4-550-8-64-3', objectToCopy=mdb.jobs['S2-4-550-8-64-2'])
mdb.jobs['S2-4-550-8-64-3'].setValues(model='S2-4-550-8-64-3')
mdb.jobs['S2-4-550-8-64-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-4-550-8-64-3'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-5-550-8-64')
mdb.models['S2-5-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-5-550-8-64'].sketches['__profile__'].rectangle(point1=(-325.0, 
    -325.0), point2=(325.0, 325.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-5-550-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-5-550-8-64'].parts['plate'].BaseSolidExtrude(depth=30.0, sketch=
    mdb.models['S2-5-550-8-64'].sketches['__profile__'])
del mdb.models['S2-5-550-8-64'].sketches['__profile__']
mdb.models['S2-5-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-5-550-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(30.0, 0.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-5-550-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-5-550-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-5-550-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-5-550-8-64'].sketches['__profile__'])
del mdb.models['S2-5-550-8-64'].sketches['__profile__']
mdb.models['S2-5-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-5-550-8-64'].sketches['__profile__'].rectangle(point1=(-425.0, 
    -425.0), point2=(425.0, 425.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-5-550-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-5-550-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-5-550-8-64'].sketches['__profile__'])
del mdb.models['S2-5-550-8-64'].sketches['__profile__']
mdb.models['S2-5-550-8-64'].Material(name='Q355')
mdb.models['S2-5-550-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-5-550-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-5-550-8-64'].Material(name='CrMoA')
mdb.models['S2-5-550-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-5-550-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-5-550-8-64'].Material(name='Rigid')
mdb.models['S2-5-550-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-5-550-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-5-550-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-5-550-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-5-550-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-5-550-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-5-550-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-5-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-5-550-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-5-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-5-550-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-5-550-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-5-550-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-5-550-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-5-550-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-5-550-8-64'].parts['plane'])
mdb.models['S2-5-550-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-5-550-8-64'].parts['plate'])
mdb.models['S2-5-550-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-5-550-8-64'].parts['T-beam'])
mdb.models['S2-5-550-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-5-550-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-275.0, 275.0, 30.0))
mdb.models['S2-5-550-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=275.0, spacing2=275.0)
del mdb.models['S2-5-550-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-5-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-5-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-5-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-5-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-5-550-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-5-550-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-5-550-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-5-550-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-5-550-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-5-550-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-5-550-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-5-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-5-550-8-64'].sketches['__profile__'])
mdb.models['S2-5-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-5-550-8-64'].sketches['__profile__'])
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 
    -275.0), point2=(425.0, -275.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 0.0), 
    point2=(425.0, 0.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 275.0)
    , point2=(425.0, 275.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].Line(point1=(-275.0, 
    -425.0), point2=(-275.0, 425.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].Line(point1=(0.0, -425.0), 
    point2=(0.0, 425.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].Line(point1=(275.0, -425.0)
    , point2=(275.0, 425.0))
mdb.models['S2-5-550-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-5-550-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-5-550-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-5-550-8-64'].parts['plane'].edges[9])
mdb.models['S2-5-550-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-5-550-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-5-550-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=30.0)
mdb.models['S2-5-550-8-64'].parts['plane'].generateMesh()
mdb.models['S2-5-550-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-5-550-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-5-550-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-5-550-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-5-550-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-5-550-8-64'].sketches['__profile__'])
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].rectangle(point1=(-80.0, 
    -80.0), point2=(80.0, 80.0))
mdb.models['S2-5-550-8-64'].sketches['__profile__'].rectangle(point1=(-70.0, 
    -70.0), point2=(70.0, 70.0))
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-5-550-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-5-550-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[7])
del mdb.models['S2-5-550-8-64'].sketches['__profile__']
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-5-550-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-5-550-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-5-550-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-5-550-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-5-550-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-5-550-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-5-550-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-5-550-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].vertices[174])
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].vertices[73])
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].vertices[100])
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].vertices[207])
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].vertices[88])
mdb.models['S2-5-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-5-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-5-550-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-5-550-8-64'].parts['plate'].vertices[64])
mdb.models['S2-5-550-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-5-550-8-64'].parts['plate'].generateMesh()
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-5-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-5-550-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-5-550-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-5-550-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-5-550-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-5-550-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-5-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-5-550-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-5-550-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-5-550-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-5-550-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-5-550-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-5-550-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-5-550-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-5-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-5-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-5-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-5-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-5-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-5-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-5-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-5-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-5-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-5-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-5-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-5-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-5-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-5-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-5-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-5-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-5-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-5-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-5-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-5-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-5-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-5-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-5-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-5-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-5-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-5-550-8-64'].ConcentratedForce(cf1=25097, cf2=24189, cf3=36155, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-5-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-5-550-8-64'].Moment(cm1=38872000, cm2=37841000, cm3=24000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-5-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-5-550-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-5-550-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-5-550-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-5-550-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-5-550-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-5-550-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-5-550-8-64-1'].waitForCompletion()
mdb.Model(name='S2-5-550-8-64-2', objectToCopy=mdb.models['S2-5-550-8-64'])
mdb.models['S2-5-550-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-5-550-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-5-550-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-5-550-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-5-550-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-5-550-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=32.0, vertex1=
    mdb.models['S2-5-550-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-5-550-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-5-550-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-5-550-8-64-2'].sketches['__edit__'])
del mdb.models['S2-5-550-8-64-2'].sketches['__edit__']
mdb.models['S2-5-550-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-5-550-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=32.0)
mdb.models['S2-5-550-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-5-550-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-5-550-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.0)
mdb.models['S2-5-550-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-5-550-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-5-550-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-5-550-8-64-2', objectToCopy=mdb.jobs['S2-5-550-8-64-1'])
mdb.jobs['S2-5-550-8-64-2'].setValues(model='S2-5-550-8-64-2')
mdb.jobs['S2-5-550-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-5-550-8-64-2'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-6-450-8-64')
mdb.models['S2-6-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-6-450-8-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-6-450-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-6-450-8-64'].parts['plate'].BaseSolidExtrude(depth=26.0, sketch=
    mdb.models['S2-6-450-8-64'].sketches['__profile__'])
del mdb.models['S2-6-450-8-64'].sketches['__profile__']
mdb.models['S2-6-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-6-450-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(26.0, 0.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-6-450-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-6-450-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-6-450-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-6-450-8-64'].sketches['__profile__'])
del mdb.models['S2-6-450-8-64'].sketches['__profile__']
mdb.models['S2-6-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-6-450-8-64'].sketches['__profile__'].rectangle(point1=(-375.0, 
    -375.0), point2=(375.0, 375.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-6-450-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-6-450-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-6-450-8-64'].sketches['__profile__'])
del mdb.models['S2-6-450-8-64'].sketches['__profile__']
mdb.models['S2-6-450-8-64'].Material(name='Q355')
mdb.models['S2-6-450-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-6-450-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-6-450-8-64'].Material(name='CrMoA')
mdb.models['S2-6-450-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-6-450-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-6-450-8-64'].Material(name='Rigid')
mdb.models['S2-6-450-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-6-450-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-6-450-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-6-450-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-6-450-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-6-450-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-6-450-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-6-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-6-450-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-6-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-6-450-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-6-450-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-6-450-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-6-450-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-6-450-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-6-450-8-64'].parts['plane'])
mdb.models['S2-6-450-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-6-450-8-64'].parts['plate'])
mdb.models['S2-6-450-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-6-450-8-64'].parts['T-beam'])
mdb.models['S2-6-450-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-6-450-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-225.0, 225.0, 26.0))
mdb.models['S2-6-450-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=225.0, spacing2=225.0)
del mdb.models['S2-6-450-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-6-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-6-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-6-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-6-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-6-450-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-6-450-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-6-450-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-6-450-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-6-450-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-6-450-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-6-450-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-6-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-6-450-8-64'].sketches['__profile__'])
mdb.models['S2-6-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-6-450-8-64'].sketches['__profile__'])
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 
    -225.0), point2=(375.0, -225.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 0.0), 
    point2=(375.0, 0.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 225.0)
    , point2=(375.0, 225.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].Line(point1=(-225.0, 
    -375.0), point2=(-225.0, 375.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].Line(point1=(0.0, -375.0), 
    point2=(0.0, 375.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].Line(point1=(225.0, -375.0)
    , point2=(225.0, 375.0))
mdb.models['S2-6-450-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-6-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-6-450-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-6-450-8-64'].parts['plane'].edges[9])
mdb.models['S2-6-450-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-6-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-6-450-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=26.0)
mdb.models['S2-6-450-8-64'].parts['plane'].generateMesh()
mdb.models['S2-6-450-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-6-450-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-6-450-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-6-450-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-6-450-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-6-450-8-64'].sketches['__profile__'])
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].rectangle(point1=(-70.0, 
    -70.0), point2=(70.0, 70.0))
mdb.models['S2-6-450-8-64'].sketches['__profile__'].rectangle(point1=(-62.0, 
    -62.0), point2=(62.0, 62.0))
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-6-450-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-6-450-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[7])
del mdb.models['S2-6-450-8-64'].sketches['__profile__']
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-6-450-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-6-450-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-6-450-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-6-450-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-6-450-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-6-450-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-6-450-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-6-450-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].vertices[174])
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].vertices[73])
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].vertices[100])
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].vertices[207])
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].vertices[88])
mdb.models['S2-6-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-6-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-6-450-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-6-450-8-64'].parts['plate'].vertices[64])
mdb.models['S2-6-450-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-6-450-8-64'].parts['plate'].generateMesh()
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-6-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-6-450-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-6-450-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-6-450-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-6-450-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-6-450-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-6-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-6-450-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-6-450-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-6-450-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-6-450-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-6-450-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-6-450-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-6-450-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-6-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-6-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-6-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-6-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-6-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-6-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-6-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-6-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-6-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-6-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-6-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-6-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-6-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-6-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-6-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-6-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-6-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-6-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-6-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-6-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-6-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-6-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-6-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-6-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-6-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-6-450-8-64'].ConcentratedForce(cf1=11111, cf2=16342, cf3=17106, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-6-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-6-450-8-64'].Moment(cm1=31393000, cm2=17991000, cm3=3733000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-6-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-6-450-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-6-450-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-6-450-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-6-450-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-6-450-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-6-450-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-6-450-8-64-1'].waitForCompletion()
mdb.Model(name='S2-6-450-8-64-2', objectToCopy=mdb.models['S2-6-450-8-64'])
mdb.models['S2-6-450-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-6-450-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-6-450-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-6-450-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-6-450-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-6-450-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=28.0, vertex1=
    mdb.models['S2-6-450-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-6-450-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-6-450-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-6-450-8-64-2'].sketches['__edit__'])
del mdb.models['S2-6-450-8-64-2'].sketches['__edit__']
mdb.models['S2-6-450-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-6-450-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=28.0)
mdb.models['S2-6-450-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-6-450-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-6-450-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['S2-6-450-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-6-450-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-6-450-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-6-450-8-64-2', objectToCopy=mdb.jobs['S2-6-450-8-64-1'])
mdb.jobs['S2-6-450-8-64-2'].setValues(model='S2-6-450-8-64-2')
mdb.jobs['S2-6-450-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-6-450-8-64-2'].waitForCompletion()
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-7-450-8-64')
mdb.models['S2-7-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-7-450-8-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-7-450-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-7-450-8-64'].parts['plate'].BaseSolidExtrude(depth=28.0, sketch=
    mdb.models['S2-7-450-8-64'].sketches['__profile__'])
del mdb.models['S2-7-450-8-64'].sketches['__profile__']
mdb.models['S2-7-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-7-450-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(28.0, 0.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-7-450-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-7-450-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-7-450-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-7-450-8-64'].sketches['__profile__'])
del mdb.models['S2-7-450-8-64'].sketches['__profile__']
mdb.models['S2-7-450-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-7-450-8-64'].sketches['__profile__'].rectangle(point1=(-375.0, 
    -375.0), point2=(375.0, 375.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 11.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -214.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 236.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 11.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-7-450-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-7-450-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-7-450-8-64'].sketches['__profile__'])
del mdb.models['S2-7-450-8-64'].sketches['__profile__']
mdb.models['S2-7-450-8-64'].Material(name='Q355')
mdb.models['S2-7-450-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-7-450-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-7-450-8-64'].Material(name='CrMoA')
mdb.models['S2-7-450-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-7-450-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-7-450-8-64'].Material(name='Rigid')
mdb.models['S2-7-450-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-7-450-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-7-450-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-7-450-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-7-450-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-7-450-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-7-450-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-7-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-7-450-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-7-450-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-450-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-7-450-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-7-450-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-7-450-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-7-450-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-7-450-8-64'].parts['plane'])
mdb.models['S2-7-450-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-7-450-8-64'].parts['plate'])
mdb.models['S2-7-450-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-7-450-8-64'].parts['T-beam'])
mdb.models['S2-7-450-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-7-450-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-225.0, 225.0, 28.0))
mdb.models['S2-7-450-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=225.0, spacing2=225.0)
del mdb.models['S2-7-450-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-7-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-7-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-7-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-7-450-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-7-450-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-7-450-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['S2-7-450-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-7-450-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-7-450-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-7-450-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-7-450-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-7-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-7-450-8-64'].sketches['__profile__'])
mdb.models['S2-7-450-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-7-450-8-64'].sketches['__profile__'])
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 
    -225.0), point2=(375.0, -225.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 0.0), 
    point2=(375.0, 0.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].Line(point1=(-375.0, 225.0)
    , point2=(375.0, 225.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].Line(point1=(-225.0, 
    -375.0), point2=(-225.0, 375.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].Line(point1=(0.0, -375.0), 
    point2=(0.0, 375.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].Line(point1=(225.0, -375.0)
    , point2=(225.0, 375.0))
mdb.models['S2-7-450-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-7-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-7-450-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-7-450-8-64'].parts['plane'].edges[9])
mdb.models['S2-7-450-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-7-450-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-7-450-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=28.0)
mdb.models['S2-7-450-8-64'].parts['plane'].generateMesh()
mdb.models['S2-7-450-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-7-450-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-7-450-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-7-450-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-7-450-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-7-450-8-64'].sketches['__profile__'])
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 0.0), point1=(-225.0, 16.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -225.0), point1=(0.0, -209.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 225.0), point1=(0.0, 241.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 0.0), point1=(225.0, 16.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].rectangle(point1=(-80.0, 
    -80.0), point2=(80.0, 80.0))
mdb.models['S2-7-450-8-64'].sketches['__profile__'].rectangle(point1=(-72.0, 
    -72.0), point2=(72.0, 72.0))
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-7-450-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-7-450-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[7])
del mdb.models['S2-7-450-8-64'].sketches['__profile__']
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-7-450-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-7-450-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-7-450-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-7-450-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-7-450-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-7-450-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-7-450-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-7-450-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].vertices[174])
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].vertices[73])
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].vertices[100])
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].vertices[207])
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].vertices[88])
mdb.models['S2-7-450-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-450-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-7-450-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-7-450-8-64'].parts['plate'].vertices[64])
mdb.models['S2-7-450-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['S2-7-450-8-64'].parts['plate'].generateMesh()
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-450-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-450-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-7-450-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-7-450-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-7-450-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-7-450-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-7-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-7-450-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-7-450-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-7-450-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-7-450-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-7-450-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-7-450-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-7-450-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-7-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-450-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-450-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-450-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-450-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-450-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-450-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-450-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-450-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-7-450-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-450-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-450-8-64'].ConcentratedForce(cf1=16156, cf2=20282, cf3=28823, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-7-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-7-450-8-64'].Moment(cm1=37530000, cm2=26453000, cm3=4688000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-7-450-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-7-450-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-7-450-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-7-450-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-7-450-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-7-450-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-7-450-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-7-450-8-64-1'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-7-550-8-64')
mdb.models['S2-7-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-7-550-8-64'].sketches['__profile__'].rectangle(point1=(-325.0, 
    -325.0), point2=(325.0, 325.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-7-550-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-7-550-8-64'].parts['plate'].BaseSolidExtrude(depth=26.0, sketch=
    mdb.models['S2-7-550-8-64'].sketches['__profile__'])
del mdb.models['S2-7-550-8-64'].sketches['__profile__']
mdb.models['S2-7-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-7-550-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(26.0, 0.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-7-550-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-7-550-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-7-550-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-7-550-8-64'].sketches['__profile__'])
del mdb.models['S2-7-550-8-64'].sketches['__profile__']
mdb.models['S2-7-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-7-550-8-64'].sketches['__profile__'].rectangle(point1=(-425.0, 
    -425.0), point2=(425.0, 425.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-7-550-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-7-550-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-7-550-8-64'].sketches['__profile__'])
del mdb.models['S2-7-550-8-64'].sketches['__profile__']
mdb.models['S2-7-550-8-64'].Material(name='Q355')
mdb.models['S2-7-550-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-7-550-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-7-550-8-64'].Material(name='CrMoA')
mdb.models['S2-7-550-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-7-550-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-7-550-8-64'].Material(name='Rigid')
mdb.models['S2-7-550-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-7-550-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-7-550-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-7-550-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-7-550-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-7-550-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-7-550-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-7-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-7-550-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-7-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-550-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-7-550-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-7-550-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-7-550-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-7-550-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-7-550-8-64'].parts['plane'])
mdb.models['S2-7-550-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-7-550-8-64'].parts['plate'])
mdb.models['S2-7-550-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-7-550-8-64'].parts['T-beam'])
mdb.models['S2-7-550-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-7-550-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-275.0, 275.0, 26.0))
mdb.models['S2-7-550-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=275.0, spacing2=275.0)
del mdb.models['S2-7-550-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-7-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-7-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-7-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-7-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-7-550-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-7-550-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-7-550-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-7-550-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-7-550-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-7-550-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-7-550-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-7-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-7-550-8-64'].sketches['__profile__'])
mdb.models['S2-7-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-7-550-8-64'].sketches['__profile__'])
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 
    -275.0), point2=(425.0, -275.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 0.0), 
    point2=(425.0, 0.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 275.0)
    , point2=(425.0, 275.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].Line(point1=(-275.0, 
    -425.0), point2=(-275.0, 425.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].Line(point1=(0.0, -425.0), 
    point2=(0.0, 425.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].Line(point1=(275.0, -425.0)
    , point2=(275.0, 425.0))
mdb.models['S2-7-550-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-7-550-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-7-550-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-7-550-8-64'].parts['plane'].edges[9])
mdb.models['S2-7-550-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-7-550-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-7-550-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=26.0)
mdb.models['S2-7-550-8-64'].parts['plane'].generateMesh()
mdb.models['S2-7-550-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-7-550-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-7-550-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-7-550-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-7-550-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-7-550-8-64'].sketches['__profile__'])
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].rectangle(point1=(-80.0, 
    -80.0), point2=(80.0, 80.0))
mdb.models['S2-7-550-8-64'].sketches['__profile__'].rectangle(point1=(-72.0, 
    -72.0), point2=(72.0, 72.0))
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-7-550-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-7-550-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[7])
del mdb.models['S2-7-550-8-64'].sketches['__profile__']
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-7-550-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-7-550-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-7-550-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-7-550-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-7-550-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-7-550-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-7-550-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-7-550-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].vertices[174])
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].vertices[73])
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].vertices[100])
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].vertices[207])
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].vertices[88])
mdb.models['S2-7-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-7-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-7-550-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-7-550-8-64'].parts['plate'].vertices[64])
mdb.models['S2-7-550-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-7-550-8-64'].parts['plate'].generateMesh()
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-7-550-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-7-550-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-7-550-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-7-550-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-7-550-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-7-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-7-550-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-7-550-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-7-550-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-7-550-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-7-550-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-7-550-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-7-550-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-7-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-7-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-7-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-7-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-7-550-8-64'].ConcentratedForce(cf1=16156, cf2=20282, cf3=28823, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-7-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-7-550-8-64'].Moment(cm1=37530000, cm2=26453000, cm3=4688000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-7-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-7-550-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-7-550-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-7-550-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-7-550-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-7-550-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-7-550-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-7-550-8-64-1'].waitForCompletion()
mdb.Model(name='S2-7-550-8-64-2', objectToCopy=mdb.models['S2-7-550-8-64'])
mdb.models['S2-7-550-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-7-550-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-7-550-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-7-550-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-7-550-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-7-550-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=28.0, vertex1=
    mdb.models['S2-7-550-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-7-550-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-7-550-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-7-550-8-64-2'].sketches['__edit__'])
del mdb.models['S2-7-550-8-64-2'].sketches['__edit__']
mdb.models['S2-7-550-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-7-550-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=28.0)
mdb.models['S2-7-550-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-7-550-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-7-550-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['S2-7-550-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-7-550-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-7-550-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-7-550-8-64-2', objectToCopy=mdb.jobs['S2-7-550-8-64-1'])
mdb.jobs['S2-7-550-8-64-2'].setValues(model='S2-7-550-8-64-2')
mdb.jobs['S2-7-550-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-7-550-8-64-2'].waitForCompletion()
mdb.Model(name='S2-7-550-8-64-3', objectToCopy=mdb.models['S2-7-550-8-64'])
mdb.models['S2-7-550-8-64-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-7-550-8-64-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-7-550-8-64-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-7-550-8-64-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-7-550-8-64-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-7-550-8-64-3'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=30.0, vertex1=
    mdb.models['S2-7-550-8-64-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-7-550-8-64-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-7-550-8-64-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-7-550-8-64-3'].sketches['__edit__'])
del mdb.models['S2-7-550-8-64-3'].sketches['__edit__']
mdb.models['S2-7-550-8-64-3'].parts['T-beam'].regenerate()
mdb.models['S2-7-550-8-64-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=30.0)
mdb.models['S2-7-550-8-64-3'].parts['plate'].regenerate()
mdb.models['S2-7-550-8-64-3'].parts['plate'].deleteMesh()
mdb.models['S2-7-550-8-64-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-7-550-8-64-3'].parts['plate'].generateMesh()
mdb.models['S2-7-550-8-64-3'].parts['T-beam'].generateMesh()
mdb.models['S2-7-550-8-64-3'].rootAssembly.regenerate()
mdb.Job(name='S2-7-550-8-64-3', objectToCopy=mdb.jobs['S2-7-550-8-64-2'])
mdb.jobs['S2-7-550-8-64-3'].setValues(model='S2-7-550-8-64-3')
mdb.jobs['S2-7-550-8-64-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-7-550-8-64-3'].waitForCompletion()
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-8-550-8-64')
mdb.models['S2-8-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-8-550-8-64'].sketches['__profile__'].rectangle(point1=(-325.0, 
    -325.0), point2=(325.0, 325.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-8-550-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-8-550-8-64'].parts['plate'].BaseSolidExtrude(depth=26.0, sketch=
    mdb.models['S2-8-550-8-64'].sketches['__profile__'])
del mdb.models['S2-8-550-8-64'].sketches['__profile__']
mdb.models['S2-8-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-8-550-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(26.0, 0.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-8-550-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-8-550-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-8-550-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-8-550-8-64'].sketches['__profile__'])
del mdb.models['S2-8-550-8-64'].sketches['__profile__']
mdb.models['S2-8-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-8-550-8-64'].sketches['__profile__'].rectangle(point1=(-425.0, 
    -425.0), point2=(425.0, 425.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-8-550-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-8-550-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-8-550-8-64'].sketches['__profile__'])
del mdb.models['S2-8-550-8-64'].sketches['__profile__']
mdb.models['S2-8-550-8-64'].Material(name='Q355')
mdb.models['S2-8-550-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-8-550-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-8-550-8-64'].Material(name='CrMoA')
mdb.models['S2-8-550-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-8-550-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-8-550-8-64'].Material(name='Rigid')
mdb.models['S2-8-550-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-8-550-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-8-550-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-8-550-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-8-550-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-8-550-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-8-550-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-8-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-8-550-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-8-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-8-550-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-8-550-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-8-550-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-8-550-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-8-550-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-8-550-8-64'].parts['plane'])
mdb.models['S2-8-550-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-8-550-8-64'].parts['plate'])
mdb.models['S2-8-550-8-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-8-550-8-64'].parts['T-beam'])
mdb.models['S2-8-550-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-8-550-8-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-275.0, 275.0, 26.0))
mdb.models['S2-8-550-8-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=275.0, spacing2=275.0)
del mdb.models['S2-8-550-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-8-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-8-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-8-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-8-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-8-550-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-8-550-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-8-550-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-8-550-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-8-550-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-8-550-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-8-550-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-8-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-8-550-8-64'].sketches['__profile__'])
mdb.models['S2-8-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-8-550-8-64'].sketches['__profile__'])
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 
    -275.0), point2=(425.0, -275.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 0.0), 
    point2=(425.0, 0.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 275.0)
    , point2=(425.0, 275.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].Line(point1=(-275.0, 
    -425.0), point2=(-275.0, 425.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].Line(point1=(0.0, -425.0), 
    point2=(0.0, 425.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].Line(point1=(275.0, -425.0)
    , point2=(275.0, 425.0))
mdb.models['S2-8-550-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-8-550-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-8-550-8-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-8-550-8-64'].parts['plane'].edges[9])
mdb.models['S2-8-550-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-8-550-8-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-8-550-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=26.0)
mdb.models['S2-8-550-8-64'].parts['plane'].generateMesh()
mdb.models['S2-8-550-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-8-550-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-8-550-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-8-550-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-8-550-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-8-550-8-64'].sketches['__profile__'])
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].rectangle(point1=(-80.0, 
    -80.0), point2=(80.0, 80.0))
mdb.models['S2-8-550-8-64'].sketches['__profile__'].rectangle(point1=(-70.0, 
    -70.0), point2=(70.0, 70.0))
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-8-550-8-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-8-550-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[7])
del mdb.models['S2-8-550-8-64'].sketches['__profile__']
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-8-550-8-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-8-550-8-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-8-550-8-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-8-550-8-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-8-550-8-64'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-8-550-8-64'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-8-550-8-64'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-8-550-8-64'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].vertices[174])
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].vertices[73])
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].vertices[100])
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].vertices[207])
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].vertices[88])
mdb.models['S2-8-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-8-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-8-550-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-8-550-8-64'].parts['plate'].vertices[64])
mdb.models['S2-8-550-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-8-550-8-64'].parts['plate'].generateMesh()
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-8-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-8-550-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-8-550-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-8-550-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-8-550-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-8-550-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-8-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-8-550-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-8-550-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-8-550-8-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-8-550-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-8-550-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-8-550-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-8-550-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-8-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-8-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-8-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-8-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-8-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-8-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-8-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-8-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-8-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-8-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-8-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-8-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-8-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-8-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-8-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-8-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-8-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-8-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-8-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-8-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-8-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-8-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-8-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-8-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-8-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-8-550-8-64'].ConcentratedForce(cf1=13376, cf2=12381, cf3=16698, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-8-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-8-550-8-64'].Moment(cm1=39963000, cm2=42417291, cm3=3536, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-8-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-8-550-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-8-550-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-8-550-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-8-550-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-8-550-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-8-550-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-8-550-8-64-1'].waitForCompletion()
mdb.Model(name='S2-8-550-8-64-2', objectToCopy=mdb.models['S2-8-550-8-64'])
mdb.models['S2-8-550-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-8-550-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-8-550-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-8-550-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-8-550-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-8-550-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=28.0, vertex1=
    mdb.models['S2-8-550-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-8-550-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-8-550-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-8-550-8-64-2'].sketches['__edit__'])
del mdb.models['S2-8-550-8-64-2'].sketches['__edit__']
mdb.models['S2-8-550-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-8-550-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=28.0)
mdb.models['S2-8-550-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-8-550-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-8-550-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['S2-8-550-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-8-550-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-8-550-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-8-550-8-64-2', objectToCopy=mdb.jobs['S2-8-550-8-64-1'])
mdb.jobs['S2-8-550-8-64-2'].setValues(model='S2-8-550-8-64-2')
mdb.jobs['S2-8-550-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-8-550-8-64-2'].waitForCompletion()
mdb.Model(name='S2-8-550-8-64-3', objectToCopy=mdb.models['S2-8-550-8-64'])
mdb.models['S2-8-550-8-64-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-8-550-8-64-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-8-550-8-64-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-8-550-8-64-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-8-550-8-64-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-8-550-8-64-3'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=30.0, vertex1=
    mdb.models['S2-8-550-8-64-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-8-550-8-64-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-8-550-8-64-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-8-550-8-64-3'].sketches['__edit__'])
del mdb.models['S2-8-550-8-64-3'].sketches['__edit__']
mdb.models['S2-8-550-8-64-3'].parts['T-beam'].regenerate()
mdb.models['S2-8-550-8-64-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=30.0)
mdb.models['S2-8-550-8-64-3'].parts['plate'].regenerate()
mdb.models['S2-8-550-8-64-3'].parts['plate'].deleteMesh()
mdb.models['S2-8-550-8-64-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-8-550-8-64-3'].parts['plate'].generateMesh()
mdb.models['S2-8-550-8-64-3'].parts['T-beam'].generateMesh()
mdb.models['S2-8-550-8-64-3'].rootAssembly.regenerate()
mdb.Job(name='S2-8-550-8-64-3', objectToCopy=mdb.jobs['S2-8-550-8-64-2'])
mdb.jobs['S2-8-550-8-64-3'].setValues(model='S2-8-550-8-64-3')
mdb.jobs['S2-8-550-8-64-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-8-550-8-64-3'].waitForCompletion()
mdb.Model(name='S2-8-550-8-64-4', objectToCopy=mdb.models['S2-8-550-8-64'])
mdb.models['S2-8-550-8-64-4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-8-550-8-64-4'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-8-550-8-64-4'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-8-550-8-64-4'].sketches['__edit__'], upToFeature=
    mdb.models['S2-8-550-8-64-4'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-8-550-8-64-4'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=32.0, vertex1=
    mdb.models['S2-8-550-8-64-4'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-8-550-8-64-4'].sketches['__edit__'].vertices[1])
mdb.models['S2-8-550-8-64-4'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-8-550-8-64-4'].sketches['__edit__'])
del mdb.models['S2-8-550-8-64-4'].sketches['__edit__']
mdb.models['S2-8-550-8-64-4'].parts['T-beam'].regenerate()
mdb.models['S2-8-550-8-64-4'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=32.0)
mdb.models['S2-8-550-8-64-4'].parts['plate'].regenerate()
mdb.models['S2-8-550-8-64-4'].parts['plate'].deleteMesh()
mdb.models['S2-8-550-8-64-4'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.0)
mdb.models['S2-8-550-8-64-4'].parts['plate'].generateMesh()
mdb.models['S2-8-550-8-64-4'].parts['T-beam'].generateMesh()
mdb.models['S2-8-550-8-64-4'].rootAssembly.regenerate()
mdb.Job(name='S2-8-550-8-64-4', objectToCopy=mdb.jobs['S2-8-550-8-64-3'])
mdb.jobs['S2-8-550-8-64-4'].setValues(model='S2-8-550-8-64-4')
mdb.jobs['S2-8-550-8-64-4'].submit(consistencyChecking=OFF)
mdb.jobs['S2-8-550-8-64-4'].waitForCompletion()
mdb.Model(name='S2-8-550-8-64-5', objectToCopy=mdb.models['S2-8-550-8-64'])
mdb.models['S2-8-550-8-64-5'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-8-550-8-64-5'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-8-550-8-64-5'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-8-550-8-64-5'].sketches['__edit__'], upToFeature=
    mdb.models['S2-8-550-8-64-5'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-8-550-8-64-5'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=34.0, vertex1=
    mdb.models['S2-8-550-8-64-5'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-8-550-8-64-5'].sketches['__edit__'].vertices[1])
mdb.models['S2-8-550-8-64-5'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-8-550-8-64-5'].sketches['__edit__'])
del mdb.models['S2-8-550-8-64-5'].sketches['__edit__']
mdb.models['S2-8-550-8-64-5'].parts['T-beam'].regenerate()
mdb.models['S2-8-550-8-64-5'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=34.0)
mdb.models['S2-8-550-8-64-5'].parts['plate'].regenerate()
mdb.models['S2-8-550-8-64-5'].parts['plate'].deleteMesh()
mdb.models['S2-8-550-8-64-5'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.5)
mdb.models['S2-8-550-8-64-5'].parts['plate'].generateMesh()
mdb.models['S2-8-550-8-64-5'].parts['T-beam'].generateMesh()
mdb.models['S2-8-550-8-64-5'].rootAssembly.regenerate()
mdb.Job(name='S2-8-550-8-64-5', objectToCopy=mdb.jobs['S2-8-550-8-64-4'])
mdb.jobs['S2-8-550-8-64-5'].setValues(model='S2-8-550-8-64-5')
mdb.jobs['S2-8-550-8-64-5'].submit(consistencyChecking=OFF)
mdb.jobs['S2-8-550-8-64-5'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-9-250-8-53')
mdb.models['S2-9-250-8-53'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-8-53'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 135.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-9-250-8-53'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-8-53'].parts['plate'].BaseSolidExtrude(depth=24.0, sketch=
    mdb.models['S2-9-250-8-53'].sketches['__profile__'])
del mdb.models['S2-9-250-8-53'].sketches['__profile__']
mdb.models['S2-9-250-8-53'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(24.0, 0.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-9-250-8-53'].sketches['__profile__'].geometry[2])
mdb.models['S2-9-250-8-53'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-8-53'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-9-250-8-53'].sketches['__profile__'])
del mdb.models['S2-9-250-8-53'].sketches['__profile__']
mdb.models['S2-9-250-8-53'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-8-53'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 135.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-9-250-8-53'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-8-53'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-9-250-8-53'].sketches['__profile__'])
del mdb.models['S2-9-250-8-53'].sketches['__profile__']
mdb.models['S2-9-250-8-53'].Material(name='Q355')
mdb.models['S2-9-250-8-53'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-8-53'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-9-250-8-53'].Material(name='CrMoA')
mdb.models['S2-9-250-8-53'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-8-53'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-9-250-8-53'].Material(name='Rigid')
mdb.models['S2-9-250-8-53'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-8-53'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-9-250-8-53'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-9-250-8-53'].CircularProfile(name='M20', r=10.0)
mdb.models['S2-9-250-8-53'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-9-250-8-53'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-9-250-8-53'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-9-250-8-53'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-9-250-8-53'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-9-250-8-53'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-9-250-8-53'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-9-250-8-53'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-9-250-8-53'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-9-250-8-53'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-9-250-8-53'].parts['plane'])
mdb.models['S2-9-250-8-53'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-9-250-8-53'].parts['plate'])
mdb.models['S2-9-250-8-53'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-9-250-8-53'].parts['T-beam'])
mdb.models['S2-9-250-8-53'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-9-250-8-53'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-125.0, 125.0, 24.0))
mdb.models['S2-9-250-8-53'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=125.0, spacing2=125.0)
del mdb.models['S2-9-250-8-53'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-9-250-8-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-9-250-8-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-9-250-8-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-9-250-8-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-9-250-8-53'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-9-250-8-53'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['S2-9-250-8-53'].parts['T-beam'].generateMesh()
mdb.models['S2-9-250-8-53'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-9-250-8-53'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-9-250-8-53'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-9-250-8-53'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-9-250-8-53'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-8-53'].sketches['__profile__'])
mdb.models['S2-9-250-8-53'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-8-53'].sketches['__profile__'])
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(-275.0, 125.0)
    , point2=(275.0, 125.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(125.0, -275.0)
    , point2=(125.0, 275.0))
mdb.models['S2-9-250-8-53'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-9-250-8-53'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-9-250-8-53'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-9-250-8-53'].parts['plane'].edges[9])
mdb.models['S2-9-250-8-53'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-9-250-8-53'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-9-250-8-53'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=24.0)
mdb.models['S2-9-250-8-53'].parts['plane'].generateMesh()
mdb.models['S2-9-250-8-53'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-9-250-8-53'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-9-250-8-53'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-9-250-8-53'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-9-250-8-53'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-8-53'].sketches['__profile__'])
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].rectangle(point1=(-80.0, 
    -80.0), point2=(80.0, 80.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].rectangle(point1=(-72.0, 
    -72.0), point2=(72.0, 72.0))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-9-250-8-53'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-9-250-8-53'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[7])
del mdb.models['S2-9-250-8-53'].sketches['__profile__']
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-9-250-8-53'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-9-250-8-53'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-9-250-8-53'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-9-250-8-53'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-9-250-8-53'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-9-250-8-53'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-9-250-8-53'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-9-250-8-53'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[17], ), line=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[21], ), line=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[27], ), line=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[28], ), line=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[39], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[21], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[92], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[77], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[95], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[89], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[117], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[156], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[196], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[256], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[307], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[292], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[352], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[174])
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[98], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[73])
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[149], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[100])
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[446], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[207])
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[186], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[88])
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[96], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[64])
mdb.models['S2-9-250-8-53'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['S2-9-250-8-53'].parts['plate'].generateMesh()
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].ContactProperty('IntProp-1')
mdb.models['S2-9-250-8-53'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-9-250-8-53'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-9-250-8-53'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-9-250-8-53'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-9-250-8-53'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-9-250-8-53'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-9-250-8-53'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-9-250-8-53'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-9-250-8-53'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-9-250-8-53'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].ConcentratedForce(cf1=5189, cf2=7423, cf3=13999, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-9-250-8-53'].rootAssembly.referencePoints[58], )))
mdb.models['S2-9-250-8-53'].Moment(cm1=14550100, cm2=8695700, cm3=1330600, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-9-250-8-53'].rootAssembly.referencePoints[58], )))
mdb.models['S2-9-250-8-53'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-9-250-8-53', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-9-250-8-53-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-9-250-8-53'].rootAssembly.regenerate()
mdb.jobs['S2-9-250-8-53-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-9-250-8-53-1'].waitForCompletion()
del mdb.models['S2-9-250-8-53']
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-9-250-8-53')
mdb.models['S2-9-250-8-53'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-8-53'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 135.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-9-250-8-53'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-8-53'].parts['plate'].BaseSolidExtrude(depth=16.0, sketch=
    mdb.models['S2-9-250-8-53'].sketches['__profile__'])
del mdb.models['S2-9-250-8-53'].sketches['__profile__']
mdb.models['S2-9-250-8-53'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(16.0, 0.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-9-250-8-53'].sketches['__profile__'].geometry[2])
mdb.models['S2-9-250-8-53'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-8-53'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-9-250-8-53'].sketches['__profile__'])
del mdb.models['S2-9-250-8-53'].sketches['__profile__']
mdb.models['S2-9-250-8-53'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-8-53'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 135.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-9-250-8-53'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-8-53'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-9-250-8-53'].sketches['__profile__'])
del mdb.models['S2-9-250-8-53'].sketches['__profile__']
mdb.models['S2-9-250-8-53'].Material(name='Q355')
mdb.models['S2-9-250-8-53'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-8-53'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-9-250-8-53'].Material(name='CrMoA')
mdb.models['S2-9-250-8-53'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-8-53'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-9-250-8-53'].Material(name='Rigid')
mdb.models['S2-9-250-8-53'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-8-53'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-9-250-8-53'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-9-250-8-53'].CircularProfile(name='M20', r=10.0)
mdb.models['S2-9-250-8-53'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-9-250-8-53'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-9-250-8-53'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-9-250-8-53'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-9-250-8-53'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-9-250-8-53'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-9-250-8-53'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-9-250-8-53'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-9-250-8-53'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-9-250-8-53'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-9-250-8-53'].parts['plane'])
mdb.models['S2-9-250-8-53'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-9-250-8-53'].parts['plate'])
mdb.models['S2-9-250-8-53'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-9-250-8-53'].parts['T-beam'])
mdb.models['S2-9-250-8-53'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-9-250-8-53'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-125.0, 125.0, 16.0))
mdb.models['S2-9-250-8-53'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=125.0, spacing2=125.0)
del mdb.models['S2-9-250-8-53'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-9-250-8-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-9-250-8-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-9-250-8-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-9-250-8-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-9-250-8-53'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-9-250-8-53'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-9-250-8-53'].parts['T-beam'].generateMesh()
mdb.models['S2-9-250-8-53'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-9-250-8-53'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-9-250-8-53'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-9-250-8-53'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-9-250-8-53'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-8-53'].sketches['__profile__'])
mdb.models['S2-9-250-8-53'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-8-53'].sketches['__profile__'])
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(-275.0, 125.0)
    , point2=(275.0, 125.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].Line(point1=(125.0, -275.0)
    , point2=(125.0, 275.0))
mdb.models['S2-9-250-8-53'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-9-250-8-53'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-9-250-8-53'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-9-250-8-53'].parts['plane'].edges[9])
mdb.models['S2-9-250-8-53'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-9-250-8-53'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ffff ]', ), ))
mdb.models['S2-9-250-8-53'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=16.0)
mdb.models['S2-9-250-8-53'].parts['plane'].generateMesh()
mdb.models['S2-9-250-8-53'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-9-250-8-53'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-9-250-8-53'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-9-250-8-53'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-9-250-8-53'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-8-53'].sketches['__profile__'])
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].rectangle(point1=(-80.0, 
    -80.0), point2=(80.0, 80.0))
mdb.models['S2-9-250-8-53'].sketches['__profile__'].rectangle(point1=(-72.0, 
    -72.0), point2=(72.0, 72.0))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-9-250-8-53'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#1000 ]', ), ), sketch=
    mdb.models['S2-9-250-8-53'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[7])
del mdb.models['S2-9-250-8-53'].sketches['__profile__']
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-9-250-8-53'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-9-250-8-53'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-9-250-8-53'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-9-250-8-53'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-9-250-8-53'].parts['plate'].edges[10], 
    ), line=mdb.models['S2-9-250-8-53'].parts['plate'].edges[35], sense=
    REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-9-250-8-53'].parts['plate'].edges[24], 
    ), line=mdb.models['S2-9-250-8-53'].parts['plate'].edges[37], sense=
    REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[17], ), line=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[21], ), line=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#40 ]', ), ), edges=(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[27], ), line=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#80 ]', ), ), edges=(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[28], ), line=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[39], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[21], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[92], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[77], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[95], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[89], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[117], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[156], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[196], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[256], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[307], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[292], CENTER))
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[352], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[174])
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[98], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[73])
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[149], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[100])
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[446], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[207])
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[186], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[88])
mdb.models['S2-9-250-8-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-8-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-9-250-8-53'].parts['plate'].edges[96], point=
    mdb.models['S2-9-250-8-53'].parts['plate'].vertices[64])
mdb.models['S2-9-250-8-53'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-9-250-8-53'].parts['plate'].generateMesh()
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-8-53'].ContactProperty('IntProp-1')
mdb.models['S2-9-250-8-53'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-9-250-8-53'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-9-250-8-53'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-9-250-8-53'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-9-250-8-53'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-9-250-8-53'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-9-250-8-53'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=NONE)
mdb.models['S2-9-250-8-53'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-9-250-8-53'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-9-250-8-53'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-8-53'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-8-53'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-8-53'].ConcentratedForce(cf1=5189, cf2=7423, cf3=13999, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-9-250-8-53'].rootAssembly.referencePoints[58], )))
mdb.models['S2-9-250-8-53'].Moment(cm1=14550100, cm2=8695700, cm3=1330600, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-9-250-8-53'].rootAssembly.referencePoints[58], )))
mdb.models['S2-9-250-8-53'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-9-250-8-53'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-9-250-8-53', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-9-250-8-53-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-9-250-8-53'].rootAssembly.regenerate()
mdb.jobs['S2-9-250-8-53-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-9-250-8-53-1'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-10-250-8-41')
mdb.models['S2-10-250-8-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-10-250-8-41'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -115.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 135.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-10-250-8-41'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-10-250-8-41'].parts['plate'].BaseSolidExtrude(depth=16.0, 
    sketch=mdb.models['S2-10-250-8-41'].sketches['__profile__'])
del mdb.models['S2-10-250-8-41'].sketches['__profile__']
mdb.models['S2-10-250-8-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(16.0, 0.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'].geometry[2])
mdb.models['S2-10-250-8-41'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-10-250-8-41'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'])
del mdb.models['S2-10-250-8-41'].sketches['__profile__']
mdb.models['S2-10-250-8-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-10-250-8-41'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -115.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 135.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-10-250-8-41'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-10-250-8-41'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'])
del mdb.models['S2-10-250-8-41'].sketches['__profile__']
mdb.models['S2-10-250-8-41'].Material(name='Q355')
mdb.models['S2-10-250-8-41'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-10-250-8-41'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-10-250-8-41'].Material(name='CrMoA')
mdb.models['S2-10-250-8-41'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-10-250-8-41'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-10-250-8-41'].Material(name='Rigid')
mdb.models['S2-10-250-8-41'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-10-250-8-41'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-10-250-8-41'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-10-250-8-41'].CircularProfile(name='M20', r=10.0)
mdb.models['S2-10-250-8-41'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-10-250-8-41'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-10-250-8-41'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-10-250-8-41'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-10-250-8-41'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-10-250-8-41'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-10-250-8-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-10-250-8-41'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-10-250-8-41'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-10-250-8-41'].rootAssembly.Instance(dependent=ON, name='plane-1'
    , part=mdb.models['S2-10-250-8-41'].parts['plane'])
mdb.models['S2-10-250-8-41'].rootAssembly.Instance(dependent=ON, name='plate-1'
    , part=mdb.models['S2-10-250-8-41'].parts['plate'])
mdb.models['S2-10-250-8-41'].rootAssembly.Instance(dependent=ON, name=
    'T-beam-1', part=mdb.models['S2-10-250-8-41'].parts['T-beam'])
mdb.models['S2-10-250-8-41'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-10-250-8-41'].rootAssembly.translate(instanceList=('T-beam-1', )
    , vector=(-125.0, 125.0, 16.0))
mdb.models['S2-10-250-8-41'].rootAssembly.LinearInstancePattern(direction1=(
    1.0, 0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=125.0, spacing2=125.0)
del mdb.models['S2-10-250-8-41'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-10-250-8-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-10-250-8-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-10-250-8-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-10-250-8-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-10-250-8-41'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-10-250-8-41'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-10-250-8-41'].parts['T-beam'].generateMesh()
mdb.models['S2-10-250-8-41'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-10-250-8-41'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-10-250-8-41'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-10-250-8-41'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-10-250-8-41'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'])
mdb.models['S2-10-250-8-41'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'])
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -110.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 140.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(-275.0, 
    125.0), point2=(275.0, 125.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(125.0, 
    -275.0), point2=(125.0, 275.0))
mdb.models['S2-10-250-8-41'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-10-250-8-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-10-250-8-41'].parts['plane'].edges[9])
mdb.models['S2-10-250-8-41'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-10-250-8-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-10-250-8-41'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=16.0)
mdb.models['S2-10-250-8-41'].parts['plane'].generateMesh()
mdb.models['S2-10-250-8-41'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-10-250-8-41'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-10-250-8-41'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-10-250-8-41'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-10-250-8-41'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'])
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -110.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 140.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].rectangle(point1=(-60.0, 
    -60.0), point2=(60.0, 60.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].rectangle(point1=(-52.0, 
    -52.0), point2=(52.0, 52.0))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-10-250-8-41'].parts['plate'].faces.getSequenceFromMask(
    mask=('[#1000 ]', ), ), sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[7])
del mdb.models['S2-10-250-8-41'].sketches['__profile__']
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[14], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[31], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[18], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[33], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#4 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[10], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[35], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[24], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[37], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[17], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[21], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#40 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[27], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#80 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[28], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[39], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[21], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[92], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[77], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[95], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[89], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[117], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[156], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[196], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[256], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[307], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[292], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[352], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[174])
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[98], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[73])
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[149], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[100])
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[446], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[207])
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[186], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[88])
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[96], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[64])
mdb.models['S2-10-250-8-41'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-10-250-8-41'].parts['plate'].generateMesh()
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].ContactProperty('IntProp-1')
mdb.models['S2-10-250-8-41'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-10-250-8-41'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-10-250-8-41'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-10-250-8-41'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-10-250-8-41'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-10-250-8-41'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-10-250-8-41'].rootAssembly.surfaces['CP-1-plate-1'], 
    sliding=FINITE, surfaceSmoothing=NONE)
mdb.models['S2-10-250-8-41'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-10-250-8-41'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-10-250-8-41'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].ConcentratedForce(cf1=8492, cf2=9092, cf3=18872, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-10-250-8-41'].rootAssembly.referencePoints[58], )))
mdb.models['S2-10-250-8-41'].Moment(cm1=9851100, cm2=6446500, cm3=709300, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-10-250-8-41'].rootAssembly.referencePoints[58], )))
mdb.models['S2-10-250-8-41'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-10-250-8-41', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-10-250-8-41-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-10-250-8-41'].rootAssembly.regenerate()
mdb.jobs['S2-10-250-8-41-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-10-250-8-41-1'].waitForCompletion()
mdb.Model(name='S2-10-250-8-41-2', objectToCopy=mdb.models['S2-10-250-8-41'])
mdb.models['S2-10-250-8-41-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-10-250-8-41-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-10-250-8-41-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-10-250-8-41-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-10-250-8-41-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-10-250-8-41-2'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=18.0, vertex1=
    mdb.models['S2-10-250-8-41-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-10-250-8-41-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-10-250-8-41-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-10-250-8-41-2'].sketches['__edit__'])
del mdb.models['S2-10-250-8-41-2'].sketches['__edit__']
mdb.models['S2-10-250-8-41-2'].parts['T-beam'].regenerate()
mdb.models['S2-10-250-8-41-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=18.0)
mdb.models['S2-10-250-8-41-2'].parts['plate'].regenerate()
mdb.models['S2-10-250-8-41-2'].parts['plate'].deleteMesh()
mdb.models['S2-10-250-8-41-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-10-250-8-41-2'].parts['plate'].generateMesh()
mdb.models['S2-10-250-8-41-2'].parts['T-beam'].generateMesh()
mdb.models['S2-10-250-8-41-2'].rootAssembly.regenerate()
mdb.Job(name='S2-10-250-8-41-2', objectToCopy=mdb.jobs['S2-10-250-8-41-1'])
mdb.jobs['S2-10-250-8-41-2'].setValues(model='S2-10-250-8-41-2')
mdb.jobs['S2-10-250-8-41-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-10-250-8-41-2'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-9-250-6-64')
mdb.models['S2-9-250-6-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-6-64'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-9-250-6-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-6-64'].parts['plate'].BaseSolidExtrude(depth=16.0, sketch=
    mdb.models['S2-9-250-6-64'].sketches['__profile__'])
del mdb.models['S2-9-250-6-64'].sketches['__profile__']
mdb.models['S2-9-250-6-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(16.0, 0.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-9-250-6-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-9-250-6-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-6-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-9-250-6-64'].sketches['__profile__'])
del mdb.models['S2-9-250-6-64'].sketches['__profile__']
mdb.models['S2-9-250-6-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-6-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-9-250-6-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-6-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-9-250-6-64'].sketches['__profile__'])
del mdb.models['S2-9-250-6-64'].sketches['__profile__']
mdb.models['S2-9-250-6-64'].Material(name='Q355')
mdb.models['S2-9-250-6-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-6-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-9-250-6-64'].Material(name='CrMoA')
mdb.models['S2-9-250-6-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-6-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-9-250-6-64'].Material(name='Rigid')
mdb.models['S2-9-250-6-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-6-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-9-250-6-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-9-250-6-64'].CircularProfile(name='M20', r=10.0)
mdb.models['S2-9-250-6-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-9-250-6-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-9-250-6-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-9-250-6-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-9-250-6-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-9-250-6-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-9-250-6-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-9-250-6-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-9-250-6-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-9-250-6-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-9-250-6-64'].parts['plane'])
mdb.models['S2-9-250-6-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-9-250-6-64'].parts['plate'])
mdb.models['S2-9-250-6-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-9-250-6-64'].parts['T-beam'])
mdb.models['S2-9-250-6-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-9-250-6-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-125.0, 125.0, 16.0))
mdb.models['S2-9-250-6-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=2, number2=3, spacing1=250.0, spacing2=125.0)
mdb.models['S2-9-250-6-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-9-250-6-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-9-250-6-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-9-250-6-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-9-250-6-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-9-250-6-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-9-250-6-64'].parts['T-beam'].generateMesh()
mdb.models['S2-9-250-6-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-9-250-6-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-9-250-6-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-9-250-6-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-9-250-6-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-6-64'].sketches['__profile__'])
mdb.models['S2-9-250-6-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-6-64'].sketches['__profile__'])
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(-275.0, 125.0)
    , point2=(275.0, 125.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(125.0, -275.0)
    , point2=(125.0, 275.0))
mdb.models['S2-9-250-6-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-9-250-6-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-9-250-6-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-9-250-6-64'].parts['plane'].edges[9])
mdb.models['S2-9-250-6-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-9-250-6-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ff ]', ), ))
mdb.models['S2-9-250-6-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=16.0)
mdb.models['S2-9-250-6-64'].parts['plane'].generateMesh()
mdb.models['S2-9-250-6-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-9-250-6-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-9-250-6-64'].parts['plate'].faces[10], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-9-250-6-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-9-250-6-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-6-64'].sketches['__profile__'])
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].rectangle(point1=(-80.0, 
    -80.0), point2=(80.0, 80.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].rectangle(point1=(-72.0, 
    -72.0), point2=(72.0, 72.0))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-9-250-6-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#400 ]', ), ), sketch=mdb.models['S2-9-250-6-64'].sketches['__profile__']
    , sketchUpEdge=mdb.models['S2-9-250-6-64'].parts['plate'].edges[7])
del mdb.models['S2-9-250-6-64'].sketches['__profile__']
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-9-250-6-64'].parts['plate'].edges[12], 
    ), line=mdb.models['S2-9-250-6-64'].parts['plate'].edges[27], sense=
    REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-9-250-6-64'].parts['plate'].edges[7], 
    ), line=mdb.models['S2-9-250-6-64'].parts['plate'].edges[29], sense=
    REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-9-250-6-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-9-250-6-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-9-250-6-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-9-250-6-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[20], ), line=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[35], sense=REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[37], sense=REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#63 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[31], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[15], CENTER))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#708 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[36], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[73], CENTER))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1e43 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[119], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[41], CENTER))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#78052 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[34], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[31], CENTER))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1b009010 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[135], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[196], CENTER))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#50008400 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[166], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[166], MIDDLE))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#47 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[65], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[46])
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#200700 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[96], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[61])
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#240912 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[60], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[43])
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#a4800 #4800 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[110], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[70])
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#48042084 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[246], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[134])
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#e0100000 #5 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[241], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[129])
mdb.models['S2-9-250-6-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-9-250-6-64'].parts['plate'].generateMesh()
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #2002 #0 #10000000 #8000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #100080 #0 #80 #800000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #10020 #0:2 #4000 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #40200 #10 #1000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #1004 #0 #4000010 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #80010 #0:3 #2000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#4019 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#20030040 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#80080000 #41 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#1000302 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#4001804 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].vertices[31])
mdb.models['S2-9-250-6-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-9-250-6-64'].rootAssembly.referencePoints[42], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-13', surface=Region(
    side1Faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#400800 #1010 #0:2 #200800 #100 #0:4 #100 ]', ), )), u1=ON, u2=ON, 
    u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-9-250-6-64'].ContactProperty('IntProp-1')
mdb.models['S2-9-250-6-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-9-250-6-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-9-250-6-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ff ]', ), ))
mdb.models['S2-9-250-6-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#8c6400 #a400a4c8 #22a90092 #29009500 #40025401 #244809 #248905', 
    ' #124451 #40003108 #2aa8a2 #200 ]', ), ))
mdb.models['S2-9-250-6-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-9-250-6-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-9-250-6-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].ConcentratedForce(cf1=5189, cf2=7423, cf3=13999, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-9-250-6-64'].rootAssembly.referencePoints[42], )))
mdb.models['S2-9-250-6-64'].Moment(cm1=14550100, cm2=8695700, cm3=1330600, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-9-250-6-64'].rootAssembly.referencePoints[42], )))
mdb.models['S2-9-250-6-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ff ]', ), ), 
    edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:3 #ffff ]', ), ), 
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #7 ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=SET, 
    ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-9-250-6-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-9-250-6-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-9-250-6-64'].rootAssembly.regenerate()
mdb.jobs['S2-9-250-6-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-9-250-6-64-1'].waitForCompletion()
#* Command successfully aborted.
mdb.jobs['S2-9-250-6-64-1']._Message(ERROR, {
    'message': 'XML parsing failure for job S2-9-250-6-64-1.  Shutting down socket and terminating all further messages.  Please check the .log, .dat, .sta, or .msg files for information about the status of the job.', 
    'jobName': 'S2-9-250-6-64-1'})
mdb.jobs['S2-9-250-6-64-1']._Message(JOB_ABORTED, {})
del mdb.models['S2-9-250-6-64']
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-9-250-6-64')
mdb.models['S2-9-250-6-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-6-64'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-9-250-6-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-6-64'].parts['plate'].BaseSolidExtrude(depth=16.0, sketch=
    mdb.models['S2-9-250-6-64'].sketches['__profile__'])
del mdb.models['S2-9-250-6-64'].sketches['__profile__']
mdb.models['S2-9-250-6-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(16.0, 0.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-9-250-6-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-9-250-6-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-6-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-9-250-6-64'].sketches['__profile__'])
del mdb.models['S2-9-250-6-64'].sketches['__profile__']
mdb.models['S2-9-250-6-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-9-250-6-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-9-250-6-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-9-250-6-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-9-250-6-64'].sketches['__profile__'])
del mdb.models['S2-9-250-6-64'].sketches['__profile__']
mdb.models['S2-9-250-6-64'].Material(name='Q355')
mdb.models['S2-9-250-6-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-6-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-9-250-6-64'].Material(name='CrMoA')
mdb.models['S2-9-250-6-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-6-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-9-250-6-64'].Material(name='Rigid')
mdb.models['S2-9-250-6-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-9-250-6-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-9-250-6-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-9-250-6-64'].CircularProfile(name='M20', r=10.0)
mdb.models['S2-9-250-6-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-9-250-6-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-9-250-6-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-9-250-6-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-9-250-6-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-9-250-6-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-9-250-6-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-9-250-6-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-9-250-6-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-9-250-6-64'].rootAssembly.Instance(dependent=ON, name='plane-1', 
    part=mdb.models['S2-9-250-6-64'].parts['plane'])
mdb.models['S2-9-250-6-64'].rootAssembly.Instance(dependent=ON, name='plate-1', 
    part=mdb.models['S2-9-250-6-64'].parts['plate'])
mdb.models['S2-9-250-6-64'].rootAssembly.Instance(dependent=ON, name='T-beam-1'
    , part=mdb.models['S2-9-250-6-64'].parts['T-beam'])
mdb.models['S2-9-250-6-64'].rootAssembly.rotate(angle=90.0, axisDirection=(0.0, 
    10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-9-250-6-64'].rootAssembly.translate(instanceList=('T-beam-1', ), 
    vector=(-125.0, 125.0, 16.0))
mdb.models['S2-9-250-6-64'].rootAssembly.LinearInstancePattern(direction1=(1.0, 
    0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=2, number2=3, spacing1=250.0, spacing2=125.0)
mdb.models['S2-9-250-6-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-9-250-6-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-9-250-6-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-9-250-6-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-9-250-6-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-9-250-6-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-9-250-6-64'].parts['T-beam'].generateMesh()
mdb.models['S2-9-250-6-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-9-250-6-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-9-250-6-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-9-250-6-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-9-250-6-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-6-64'].sketches['__profile__'])
mdb.models['S2-9-250-6-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-6-64'].sketches['__profile__'])
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(-275.0, 125.0)
    , point2=(275.0, 125.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].Line(point1=(125.0, -275.0)
    , point2=(125.0, 275.0))
mdb.models['S2-9-250-6-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-9-250-6-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), ), sketch=mdb.models['S2-9-250-6-64'].sketches['__profile__'], 
    sketchUpEdge=mdb.models['S2-9-250-6-64'].parts['plane'].edges[9])
mdb.models['S2-9-250-6-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-9-250-6-64'].parts['plane'].faces.getSequenceFromMask(mask=(
    '[#ffffffff #ff ]', ), ))
mdb.models['S2-9-250-6-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=16.0)
mdb.models['S2-9-250-6-64'].parts['plane'].generateMesh()
mdb.models['S2-9-250-6-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-9-250-6-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-9-250-6-64'].parts['plate'].faces[10], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-9-250-6-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-9-250-6-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['S2-9-250-6-64'].sketches['__profile__'])
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].rectangle(point1=(-80.0, 
    -80.0), point2=(80.0, 80.0))
mdb.models['S2-9-250-6-64'].sketches['__profile__'].rectangle(point1=(-72.0, 
    -72.0), point2=(72.0, 72.0))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-9-250-6-64'].parts['plate'].faces.getSequenceFromMask(mask=(
    '[#400 ]', ), ), sketch=mdb.models['S2-9-250-6-64'].sketches['__profile__']
    , sketchUpEdge=mdb.models['S2-9-250-6-64'].parts['plate'].edges[7])
del mdb.models['S2-9-250-6-64'].sketches['__profile__']
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), ), edges=(mdb.models['S2-9-250-6-64'].parts['plate'].edges[12], 
    ), line=mdb.models['S2-9-250-6-64'].parts['plate'].edges[27], sense=
    REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#2 ]', ), ), edges=(mdb.models['S2-9-250-6-64'].parts['plate'].edges[7], 
    ), line=mdb.models['S2-9-250-6-64'].parts['plate'].edges[29], sense=
    REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#4 ]', ), ), edges=(mdb.models['S2-9-250-6-64'].parts['plate'].edges[18], 
    ), line=mdb.models['S2-9-250-6-64'].parts['plate'].edges[31], sense=
    REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#8 ]', ), ), edges=(mdb.models['S2-9-250-6-64'].parts['plate'].edges[14], 
    ), line=mdb.models['S2-9-250-6-64'].parts['plate'].edges[33], sense=
    REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#10 ]', ), ), edges=(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[20], ), line=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[35], sense=REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(mask=(
    '[#20 ]', ), ), edges=(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[37], sense=REVERSE)
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#63 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[31], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[15], CENTER))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#708 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[36], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[73], CENTER))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1e43 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[119], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[41], CENTER))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#78052 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[34], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[31], CENTER))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1b009010 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[135], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[196], CENTER))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#50008400 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[166], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[166], MIDDLE))
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#47 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[65], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[46])
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#200700 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[96], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[61])
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#240912 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[60], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[43])
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#a4800 #4800 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[110], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[70])
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#48042084 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[246], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[134])
mdb.models['S2-9-250-6-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=mdb.models['S2-9-250-6-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#e0100000 #5 ]', ), ), normal=
    mdb.models['S2-9-250-6-64'].parts['plate'].edges[241], point=
    mdb.models['S2-9-250-6-64'].parts['plate'].vertices[129])
mdb.models['S2-9-250-6-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-9-250-6-64'].parts['plate'].generateMesh()
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #2002 #0 #10000000 #8000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #100080 #0 #80 #800000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #10020 #0:2 #4000 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #40200 #10 #1000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #1004 #0 #4000010 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #80010 #0:3 #2000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#4019 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#20030040 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#80080000 #41 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#1000302 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#4001804 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-9-250-6-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].vertices[31])
mdb.models['S2-9-250-6-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-9-250-6-64'].rootAssembly.referencePoints[42], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-13', surface=Region(
    side1Faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#400800 #1010 #0:2 #200800 #100 #0:4 #100 ]', ), )), u1=ON, u2=ON, 
    u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-9-250-6-64'].ContactProperty('IntProp-1')
mdb.models['S2-9-250-6-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-9-250-6-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-9-250-6-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ff ]', ), ))
mdb.models['S2-9-250-6-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-9-250-6-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#8c6400 #a400a4c8 #22a90092 #29009500 #40025401 #244809 #248905', 
    ' #124451 #40003108 #2aa8a2 #200 ]', ), ))
mdb.models['S2-9-250-6-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-9-250-6-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-9-250-6-64'].rootAssembly.surfaces['CP-1-plate-1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-9-250-6-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-9-250-6-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-9-250-6-64'].ConcentratedForce(cf1=5189, cf2=7423, cf3=13999, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-9-250-6-64'].rootAssembly.referencePoints[42], )))
mdb.models['S2-9-250-6-64'].Moment(cm1=14550100, cm2=8695700, cm3=1330600, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-9-250-6-64'].rootAssembly.referencePoints[42], )))
mdb.models['S2-9-250-6-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ff ]', ), ), 
    edges=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:3 #ffff ]', ), ), 
    vertices=mdb.models['S2-9-250-6-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #7 ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=SET, 
    ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-9-250-6-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-9-250-6-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-9-250-6-64'].rootAssembly.regenerate()
mdb.jobs['S2-9-250-6-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-9-250-6-64-1'].waitForCompletion()
mdb.Model(name='S2-9-250-6-64-2', objectToCopy=mdb.models['S2-9-250-6-64'])
mdb.models['S2-9-250-6-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-9-250-6-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-9-250-6-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-9-250-6-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-9-250-6-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-9-250-6-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=(
    10.7996292114258, -2.39205169677734), value=18.0, vertex1=
    mdb.models['S2-9-250-6-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-9-250-6-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-9-250-6-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-9-250-6-64-2'].sketches['__edit__'])
del mdb.models['S2-9-250-6-64-2'].sketches['__edit__']
mdb.models['S2-9-250-6-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-9-250-6-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=18.0)
mdb.models['S2-9-250-6-64-2'].parts['plate'].regenerate()
mdb.models['S2-9-250-6-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-9-250-6-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-9-250-6-64-2'].parts['plate'].generateMesh()
mdb.models['S2-9-250-6-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-9-250-6-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-9-250-6-64-2', objectToCopy=mdb.jobs['S2-9-250-6-64-1'])
mdb.jobs['S2-9-250-6-64-2'].setValues(model='S2-9-250-6-64-2')
mdb.jobs['S2-9-250-6-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-9-250-6-64-2'].waitForCompletion()
del mdb.models['S2-10-250-8-41']
del mdb.models['S2-10-250-8-41-2']
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-10-250-6-53')
mdb.models['S2-10-250-6-53'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-10-250-6-53'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-10-250-6-53'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-10-250-6-53'].parts['plate'].BaseSolidExtrude(depth=16.0, 
    sketch=mdb.models['S2-10-250-6-53'].sketches['__profile__'])
del mdb.models['S2-10-250-6-53'].sketches['__profile__']
mdb.models['S2-10-250-6-53'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-10-250-6-53'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(16.0, 0.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-10-250-6-53'].sketches['__profile__'].geometry[2])
mdb.models['S2-10-250-6-53'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-10-250-6-53'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-10-250-6-53'].sketches['__profile__'])
del mdb.models['S2-10-250-6-53'].sketches['__profile__']
mdb.models['S2-10-250-6-53'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-10-250-6-53'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -115.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 10.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 135.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -115.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 10.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 135.0))
mdb.models['S2-10-250-6-53'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-10-250-6-53'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-10-250-6-53'].sketches['__profile__'])
del mdb.models['S2-10-250-6-53'].sketches['__profile__']
mdb.models['S2-10-250-6-53'].Material(name='Q355')
mdb.models['S2-10-250-6-53'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-10-250-6-53'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-10-250-6-53'].Material(name='CrMoA')
mdb.models['S2-10-250-6-53'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-10-250-6-53'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-10-250-6-53'].Material(name='Rigid')
mdb.models['S2-10-250-6-53'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-10-250-6-53'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-10-250-6-53'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-10-250-6-53'].CircularProfile(name='M20', r=10.0)
mdb.models['S2-10-250-6-53'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-10-250-6-53'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-10-250-6-53'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-10-250-6-53'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-10-250-6-53'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-10-250-6-53'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-6-53'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-10-250-6-53'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-10-250-6-53'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-10-250-6-53'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-10-250-6-53'].rootAssembly.Instance(dependent=ON, name='plane-1'
    , part=mdb.models['S2-10-250-6-53'].parts['plane'])
mdb.models['S2-10-250-6-53'].rootAssembly.Instance(dependent=ON, name='plate-1'
    , part=mdb.models['S2-10-250-6-53'].parts['plate'])
mdb.models['S2-10-250-6-53'].rootAssembly.Instance(dependent=ON, name=
    'T-beam-1', part=mdb.models['S2-10-250-6-53'].parts['T-beam'])
mdb.models['S2-10-250-6-53'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-10-250-6-53'].rootAssembly.translate(instanceList=('T-beam-1', )
    , vector=(-125.0, 125.0, 16.0))
mdb.models['S2-10-250-6-53'].rootAssembly.LinearInstancePattern(direction1=(
    1.0, 0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=2, number2=3, spacing1=250.0, spacing2=125.0)
mdb.models['S2-10-250-6-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-10-250-6-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-10-250-6-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-10-250-6-53'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-10-250-6-53'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-10-250-6-53'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-10-250-6-53'].parts['T-beam'].generateMesh()
mdb.models['S2-10-250-6-53'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-10-250-6-53'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-10-250-6-53'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-10-250-6-53'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-10-250-6-53'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-10-250-6-53'].sketches['__profile__'])
mdb.models['S2-10-250-6-53'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-10-250-6-53'].sketches['__profile__'])
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].Line(point1=(-275.0, 
    125.0), point2=(275.0, 125.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].Line(point1=(125.0, 
    -275.0), point2=(125.0, 275.0))
mdb.models['S2-10-250-6-53'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-10-250-6-53'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), sketch=
    mdb.models['S2-10-250-6-53'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-10-250-6-53'].parts['plane'].edges[9])
mdb.models['S2-10-250-6-53'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-10-250-6-53'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ff ]', ), ))
mdb.models['S2-10-250-6-53'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=16.0)
mdb.models['S2-10-250-6-53'].parts['plane'].generateMesh()
mdb.models['S2-10-250-6-53'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-10-250-6-53'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-10-250-6-53'].parts['plate'].faces[10], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-10-250-6-53'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-10-250-6-53'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-10-250-6-53'].sketches['__profile__'])
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -110.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 15.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 140.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -110.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 15.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 140.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].rectangle(point1=(-60.0, 
    -60.0), point2=(60.0, 60.0))
mdb.models['S2-10-250-6-53'].sketches['__profile__'].rectangle(point1=(-52.0, 
    -52.0), point2=(52.0, 52.0))
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-10-250-6-53'].parts['plate'].faces.getSequenceFromMask(
    mask=('[#400 ]', ), ), sketch=
    mdb.models['S2-10-250-6-53'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[7])
del mdb.models['S2-10-250-6-53'].sketches['__profile__']
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), edges=(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[12], ), line=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[27], sense=REVERSE)
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), edges=(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[7], ), line=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[29], sense=REVERSE)
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#4 ]', ), ), edges=(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[18], ), line=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[31], sense=REVERSE)
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8 ]', ), ), edges=(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[14], ), line=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[33], sense=REVERSE)
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10 ]', ), ), edges=(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[20], ), line=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[35], sense=REVERSE)
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20 ]', ), ), edges=(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[21], ), line=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[37], sense=REVERSE)
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#63 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[31], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[15], CENTER))
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#708 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[36], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[73], CENTER))
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1e43 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[119], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[41], CENTER))
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#78052 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[34], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[31], CENTER))
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1b009010 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[135], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[196], CENTER))
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#50008400 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[166], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[166], MIDDLE))
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#47 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[65], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].vertices[46])
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#200700 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[96], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].vertices[61])
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#240912 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[60], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].vertices[43])
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#a4800 #4800 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[110], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].vertices[70])
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#48042084 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[246], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].vertices[134])
mdb.models['S2-10-250-6-53'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-6-53'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#e0100000 #5 ]', ), ), normal=
    mdb.models['S2-10-250-6-53'].parts['plate'].edges[241], point=
    mdb.models['S2-10-250-6-53'].parts['plate'].vertices[129])
mdb.models['S2-10-250-6-53'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-10-250-6-53'].parts['plate'].generateMesh()
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #2002 #0 #10000000 #8000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #100080 #0 #80 #800000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #10020 #0:2 #4000 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #40200 #10 #1000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #1004 #0 #4000010 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #80010 #0:3 #2000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#4019 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#20030040 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#80080000 #41 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#1000302 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-6-53'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#4001804 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-6-53'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-10-250-6-53'].rootAssembly.instances['plate-1'].vertices[31])
mdb.models['S2-10-250-6-53'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-10-250-6-53'].rootAssembly.referencePoints[42], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-13', surface=Region(
    side1Faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#400800 #1010 #0:2 #200800 #100 #0:4 #100 ]', ), )), u1=ON, u2=ON, 
    u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-10-250-6-53'].ContactProperty('IntProp-1')
mdb.models['S2-10-250-6-53'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-10-250-6-53'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-10-250-6-53'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-10-250-6-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ff ]', ), ))
mdb.models['S2-10-250-6-53'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-10-250-6-53'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#8c6400 #a400a4c8 #22a90092 #29009500 #40025401 #244809 #248905', 
    ' #124451 #40003108 #2aa8a2 #200 ]', ), ))
mdb.models['S2-10-250-6-53'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-10-250-6-53'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-10-250-6-53'].rootAssembly.surfaces['CP-1-plate-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['S2-10-250-6-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-6-53'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-6-53'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-6-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-6-53'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-6-53'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-6-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-6-53'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-6-53'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-6-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-6-53'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-6-53'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-6-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-6-53'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-6-53'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-6-53'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-10-250-6-53'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-6-53'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=80000.0, stepName='boltload')
mdb.models['S2-10-250-6-53'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-6-53'].ConcentratedForce(cf1=8492, cf2=9092, cf3=18872, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-10-250-6-53'].rootAssembly.referencePoints[42], )))
mdb.models['S2-10-250-6-53'].Moment(cm1=9851100, cm2=6446500, cm3=709300, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-10-250-6-53'].rootAssembly.referencePoints[42], )))
mdb.models['S2-10-250-6-53'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ff ]', ), ), 
    edges=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:3 #ffff ]', ), ), 
    vertices=mdb.models['S2-10-250-6-53'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #7 ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=SET, 
    ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-10-250-6-53', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-10-250-6-53-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-10-250-6-53'].rootAssembly.regenerate()
mdb.jobs['S2-10-250-6-53-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-10-250-6-53-1'].waitForCompletion()
mdb.Model(name='S2-10-250-6-53-2', objectToCopy=mdb.models['S2-10-250-6-53'])
mdb.models['S2-10-250-6-53-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-10-250-6-53-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-10-250-6-53-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-10-250-6-53-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-10-250-6-53-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-10-250-6-53-2'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=18.0, vertex1=
    mdb.models['S2-10-250-6-53-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-10-250-6-53-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-10-250-6-53-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-10-250-6-53-2'].sketches['__edit__'])
del mdb.models['S2-10-250-6-53-2'].sketches['__edit__']
mdb.models['S2-10-250-6-53-2'].parts['T-beam'].regenerate()
mdb.models['S2-10-250-6-53-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=18.0)
mdb.models['S2-10-250-6-53-2'].parts['plate'].regenerate()
mdb.models['S2-10-250-6-53-2'].parts['plate'].deleteMesh()
mdb.models['S2-10-250-6-53-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-10-250-6-53-2'].parts['plate'].generateMesh()
mdb.models['S2-10-250-6-53-2'].parts['T-beam'].generateMesh()
mdb.models['S2-10-250-6-53-2'].rootAssembly.regenerate()
mdb.Job(name='S2-10-250-6-53-2', objectToCopy=mdb.jobs['S2-10-250-6-53-1'])
mdb.jobs['S2-10-250-6-53-2'].setValues(model='S2-10-250-6-53-2')
mdb.jobs['S2-10-250-6-53-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-10-250-6-53-2'].waitForCompletion()
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-10-250-8-41')
mdb.models['S2-10-250-8-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-10-250-8-41'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -117.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 8.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 133.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -117.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 133.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -117.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 8.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 133.0))
mdb.models['S2-10-250-8-41'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-10-250-8-41'].parts['plate'].BaseSolidExtrude(depth=16.0, 
    sketch=mdb.models['S2-10-250-8-41'].sketches['__profile__'])
del mdb.models['S2-10-250-8-41'].sketches['__profile__']
mdb.models['S2-10-250-8-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(16.0, 0.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'].geometry[2])
mdb.models['S2-10-250-8-41'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-10-250-8-41'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'])
del mdb.models['S2-10-250-8-41'].sketches['__profile__']
mdb.models['S2-10-250-8-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-10-250-8-41'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -117.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 8.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 133.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -117.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 133.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -117.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 8.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 133.0))
mdb.models['S2-10-250-8-41'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-10-250-8-41'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'])
del mdb.models['S2-10-250-8-41'].sketches['__profile__']
mdb.models['S2-10-250-8-41'].Material(name='Q355')
mdb.models['S2-10-250-8-41'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-10-250-8-41'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-10-250-8-41'].Material(name='CrMoA')
mdb.models['S2-10-250-8-41'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-10-250-8-41'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-10-250-8-41'].Material(name='Rigid')
mdb.models['S2-10-250-8-41'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-10-250-8-41'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-10-250-8-41'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-10-250-8-41'].CircularProfile(name='M20', r=8.0)
mdb.models['S2-10-250-8-41'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-10-250-8-41'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-10-250-8-41'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-10-250-8-41'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-10-250-8-41'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-10-250-8-41'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-10-250-8-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-10-250-8-41'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-10-250-8-41'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-10-250-8-41'].rootAssembly.Instance(dependent=ON, name='plane-1'
    , part=mdb.models['S2-10-250-8-41'].parts['plane'])
mdb.models['S2-10-250-8-41'].rootAssembly.Instance(dependent=ON, name='plate-1'
    , part=mdb.models['S2-10-250-8-41'].parts['plate'])
mdb.models['S2-10-250-8-41'].rootAssembly.Instance(dependent=ON, name=
    'T-beam-1', part=mdb.models['S2-10-250-8-41'].parts['T-beam'])
mdb.models['S2-10-250-8-41'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-10-250-8-41'].rootAssembly.translate(instanceList=('T-beam-1', )
    , vector=(-125.0, 125.0, 16.0))
mdb.models['S2-10-250-8-41'].rootAssembly.LinearInstancePattern(direction1=(
    1.0, 0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=125.0, spacing2=125.0)
del mdb.models['S2-10-250-8-41'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-10-250-8-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-10-250-8-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-10-250-8-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-10-250-8-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-10-250-8-41'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-10-250-8-41'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-10-250-8-41'].parts['T-beam'].generateMesh()
mdb.models['S2-10-250-8-41'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-10-250-8-41'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-10-250-8-41'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-10-250-8-41'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-10-250-8-41'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'])
mdb.models['S2-10-250-8-41'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'])
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -112.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 13.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 138.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -112.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 138.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -112.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 13.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 138.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(-275.0, 
    125.0), point2=(275.0, 125.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].Line(point1=(125.0, 
    -275.0), point2=(125.0, 275.0))
mdb.models['S2-10-250-8-41'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-10-250-8-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-10-250-8-41'].parts['plane'].edges[9])
mdb.models['S2-10-250-8-41'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-10-250-8-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-10-250-8-41'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=16.0)
mdb.models['S2-10-250-8-41'].parts['plane'].generateMesh()
mdb.models['S2-10-250-8-41'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-10-250-8-41'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-10-250-8-41'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-10-250-8-41'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-10-250-8-41'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'])
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -112.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 13.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 138.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -112.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 138.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -112.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 13.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 138.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].rectangle(point1=(-60.0, 
    -60.0), point2=(60.0, 60.0))
mdb.models['S2-10-250-8-41'].sketches['__profile__'].rectangle(point1=(-52.0, 
    -52.0), point2=(52.0, 52.0))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-10-250-8-41'].parts['plate'].faces.getSequenceFromMask(
    mask=('[#1000 ]', ), ), sketch=
    mdb.models['S2-10-250-8-41'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[7])
del mdb.models['S2-10-250-8-41'].sketches['__profile__']
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[14], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[31], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[18], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[33], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#4 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[10], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[35], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[24], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[37], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[17], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[21], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#40 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[27], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#80 ]', ), ), edges=(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[28], ), line=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[39], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[21], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[92], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[77], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[95], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[89], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[117], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[156], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[196], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[256], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[307], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[292], CENTER))
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[352], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[174])
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[98], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[73])
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[149], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[100])
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[446], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[207])
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[186], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[88])
mdb.models['S2-10-250-8-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-10-250-8-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-10-250-8-41'].parts['plate'].edges[96], point=
    mdb.models['S2-10-250-8-41'].parts['plate'].vertices[64])
mdb.models['S2-10-250-8-41'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-10-250-8-41'].parts['plate'].generateMesh()
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-10-250-8-41'].ContactProperty('IntProp-1')
mdb.models['S2-10-250-8-41'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-10-250-8-41'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-10-250-8-41'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-10-250-8-41'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-10-250-8-41'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-10-250-8-41'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-10-250-8-41'].rootAssembly.surfaces['CP-1-plate-1'], 
    sliding=FINITE, surfaceSmoothing=NONE)
mdb.models['S2-10-250-8-41'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-10-250-8-41'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-10-250-8-41'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-10-250-8-41'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-10-250-8-41'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-10-250-8-41'].ConcentratedForce(cf1=8492, cf2=9092, cf3=18872, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-10-250-8-41'].rootAssembly.referencePoints[58], )))
mdb.models['S2-10-250-8-41'].Moment(cm1=9851100, cm2=6446500, cm3=709300, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-10-250-8-41'].rootAssembly.referencePoints[58], )))
mdb.models['S2-10-250-8-41'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-10-250-8-41'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-10-250-8-41', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-10-250-8-41-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-10-250-8-41'].rootAssembly.regenerate()
mdb.jobs['S2-10-250-8-41-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-10-250-8-41-1'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-11-450-4-64')
mdb.models['S2-11-450-4-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-11-450-4-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-11-450-4-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-11-450-4-64'].parts['plate'].BaseSolidExtrude(depth=18.0, 
    sketch=mdb.models['S2-11-450-4-64'].sketches['__profile__'])
del mdb.models['S2-11-450-4-64'].sketches['__profile__']
mdb.models['S2-11-450-4-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-11-450-4-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(18.0, 0.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-11-450-4-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-11-450-4-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-11-450-4-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-11-450-4-64'].sketches['__profile__'])
del mdb.models['S2-11-450-4-64'].sketches['__profile__']
mdb.models['S2-11-450-4-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-11-450-4-64'].sketches['__profile__'].rectangle(point1=(-375.0, 
    -375.0), point2=(375.0, 375.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -214.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 236.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -214.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 236.0))
mdb.models['S2-11-450-4-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-11-450-4-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-11-450-4-64'].sketches['__profile__'])
del mdb.models['S2-11-450-4-64'].sketches['__profile__']
mdb.models['S2-11-450-4-64'].Material(name='Q355')
mdb.models['S2-11-450-4-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-11-450-4-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-11-450-4-64'].Material(name='CrMoA')
mdb.models['S2-11-450-4-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-11-450-4-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-11-450-4-64'].Material(name='Rigid')
mdb.models['S2-11-450-4-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-11-450-4-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-11-450-4-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-11-450-4-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-11-450-4-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-11-450-4-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-11-450-4-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-11-450-4-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-11-450-4-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-11-450-4-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-450-4-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-11-450-4-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-11-450-4-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-11-450-4-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-11-450-4-64'].rootAssembly.Instance(dependent=ON, name='plane-1'
    , part=mdb.models['S2-11-450-4-64'].parts['plane'])
mdb.models['S2-11-450-4-64'].rootAssembly.Instance(dependent=ON, name='plate-1'
    , part=mdb.models['S2-11-450-4-64'].parts['plate'])
mdb.models['S2-11-450-4-64'].rootAssembly.Instance(dependent=ON, name=
    'T-beam-1', part=mdb.models['S2-11-450-4-64'].parts['T-beam'])
mdb.models['S2-11-450-4-64'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-11-450-4-64'].rootAssembly.translate(instanceList=('T-beam-1', )
    , vector=(-225.0, 225.0, 18.0))
mdb.models['S2-11-450-4-64'].rootAssembly.LinearInstancePattern(direction1=(
    1.0, 0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=2, number2=2, spacing1=450.0, spacing2=450.0)
mdb.models['S2-11-450-4-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-11-450-4-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-11-450-4-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-11-450-4-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-11-450-4-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-11-450-4-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-11-450-4-64'].parts['T-beam'].generateMesh()
mdb.models['S2-11-450-4-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-11-450-4-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-11-450-4-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-11-450-4-64'].parts['plane'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-11-450-4-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-11-450-4-64'].sketches['__profile__'])
mdb.models['S2-11-450-4-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-11-450-4-64'].sketches['__profile__'])
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].Line(point1=(-375.0, 
    -225.0), point2=(375.0, -225.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].Line(point1=(-375.0, 0.0), 
    point2=(375.0, 0.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].Line(point1=(-375.0, 
    225.0), point2=(375.0, 225.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].Line(point1=(-225.0, 
    -375.0), point2=(-225.0, 375.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].Line(point1=(0.0, -375.0), 
    point2=(0.0, 375.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].Line(point1=(225.0, 
    -375.0), point2=(225.0, 375.0))
mdb.models['S2-11-450-4-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-11-450-4-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), sketch=
    mdb.models['S2-11-450-4-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-11-450-4-64'].parts['plane'].edges[7])
mdb.models['S2-11-450-4-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-11-450-4-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ))
mdb.models['S2-11-450-4-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=18.0)
mdb.models['S2-11-450-4-64'].parts['plane'].generateMesh()
mdb.models['S2-11-450-4-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.67, transform=
    mdb.models['S2-11-450-4-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-11-450-4-64'].parts['plate'].faces[8], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-11-450-4-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 19.0)))
mdb.models['S2-11-450-4-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-11-450-4-64'].sketches['__profile__'])
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, -225.0), point1=(-225.0, -209.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-225.0, 225.0), point1=(-225.0, 241.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, -225.0), point1=(225.0, -209.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(225.0, 225.0), point1=(225.0, 241.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].rectangle(point1=(-60.0, 
    -60.0), point2=(60.0, 60.0))
mdb.models['S2-11-450-4-64'].sketches['__profile__'].rectangle(point1=(-52.0, 
    -52.0), point2=(52.0, 52.0))
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-11-450-4-64'].parts['plate'].faces.getSequenceFromMask(
    mask=('[#100 ]', ), ), sketch=
    mdb.models['S2-11-450-4-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[7])
del mdb.models['S2-11-450-4-64'].sketches['__profile__']
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), edges=(
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[6], ), line=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[23], sense=REVERSE)
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), edges=(
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[7], ), line=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[25], sense=REVERSE)
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#4 ]', ), ), edges=(
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[14], ), line=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[27], sense=REVERSE)
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8 ]', ), ), edges=(
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[15], ), line=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[29], sense=REVERSE)
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#19 ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[23], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[9], CENTER))
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8f ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[63], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[53], CENTER))
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#100f ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[63], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[59], CENTER))
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#31078 ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[103], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[37], CENTER))
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#200480 ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[111], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].vertices[66])
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1c ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[28], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].vertices[21])
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#44800a ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[42], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].vertices[18])
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#40f ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[33], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].vertices[24])
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[281], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].vertices[128])
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[310], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].vertices[143])
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#b012088 ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[164], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[164], MIDDLE))
mdb.models['S2-11-450-4-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-450-4-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2e0208 ]', ), ), normal=
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[127], point=
    mdb.models['S2-11-450-4-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-450-4-64'].parts['plate'].edges[127], MIDDLE))
mdb.models['S2-11-450-4-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-11-450-4-64'].parts['plate'].generateMesh()
mdb.models['S2-11-450-4-64'].rootAssembly.Set(name='m_Set-1', vertices=
    mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['S2-11-450-4-64'].MultipointConstraint(controlPoint=
    mdb.models['S2-11-450-4-64'].rootAssembly.sets['m_Set-1'], csys=None, 
    mpcType=BEAM_MPC, name='Constraint-1', surface=Region(
    faces=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #80400 #100100 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-450-4-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #10100000 #4000 #80000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-11-450-4-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #10008000 #4000 #0 #400000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-11-450-4-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #200000 #1 #0 #200001 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-11-450-4-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40d ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-450-4-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#405020 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-450-4-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#5012000 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-450-4-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#400c2 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-450-4-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-11-450-4-64'].rootAssembly.instances['plate-1'].vertices[6])
mdb.models['S2-11-450-4-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-11-450-4-64'].rootAssembly.referencePoints[30], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-9', surface=Region(
    side1Faces=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#81000 #4100 #3000 #4 #0:5 #1 ]', ), )), u1=ON, u2=ON, u3=ON, ur1=
    ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-11-450-4-64'].ContactProperty('IntProp-1')
mdb.models['S2-11-450-4-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-11-450-4-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-11-450-4-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-11-450-4-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ))
mdb.models['S2-11-450-4-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-11-450-4-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#a48900 #20492490 #31500225 #4028c200 #40450231 #85124022 #9448002', 
    ' #248180 #2a8c2 #2 ]', ), ))
mdb.models['S2-11-450-4-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-11-450-4-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-11-450-4-64'].rootAssembly.surfaces['CP-1-plate-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['S2-11-450-4-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-450-4-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-450-4-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-450-4-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-450-4-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-450-4-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-450-4-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-450-4-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-450-4-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-450-4-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-11-450-4-64'].rootAssembly.instances['T-beam-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-450-4-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-450-4-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-450-4-64'].ConcentratedForce(cf1=14203, cf2=13140, cf3=13778, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-11-450-4-64'].rootAssembly.referencePoints[30], )))
mdb.models['S2-11-450-4-64'].Moment(cm1=18496700, cm2=17488600, cm3=565400, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-11-450-4-64'].rootAssembly.referencePoints[30], )))
mdb.models['S2-11-450-4-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ), 
    edges=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:2 #ffffff ]', ), ), 
    vertices=mdb.models['S2-11-450-4-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff #1fffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-11-450-4-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-11-450-4-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-11-450-4-64'].rootAssembly.regenerate()
mdb.jobs['S2-11-450-4-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-11-450-4-64-1'].waitForCompletion()
mdb.Model(name='S2-11-450-4-64-2', objectToCopy=mdb.models['S2-11-450-4-64'])
mdb.models['S2-11-450-4-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-11-450-4-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-11-450-4-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-11-450-4-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-11-450-4-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-11-450-4-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=20.0, vertex1=
    mdb.models['S2-11-450-4-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-11-450-4-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-11-450-4-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-11-450-4-64-2'].sketches['__edit__'])
del mdb.models['S2-11-450-4-64-2'].sketches['__edit__']
mdb.models['S2-11-450-4-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-11-450-4-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=20.0)
mdb.models['S2-11-450-4-64-2'].parts['plate'].regenerate()
mdb.models['S2-11-450-4-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-11-450-4-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['S2-11-450-4-64-2'].parts['plate'].generateMesh()
mdb.models['S2-11-450-4-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-11-450-4-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-11-450-4-64-2', objectToCopy=mdb.jobs['S2-11-450-4-64-1'])
mdb.jobs['S2-11-450-4-64-2'].setValues(model='S2-11-450-4-64-2')
mdb.jobs['S2-11-450-4-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-11-450-4-64-2'].waitForCompletion()
mdb.Model(name='S2-11-450-4-64-3', objectToCopy=mdb.models['S2-11-450-4-64'])
mdb.models['S2-11-450-4-64-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-11-450-4-64-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-11-450-4-64-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-11-450-4-64-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-11-450-4-64-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-11-450-4-64-3'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=22.0, vertex1=
    mdb.models['S2-11-450-4-64-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-11-450-4-64-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-11-450-4-64-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-11-450-4-64-3'].sketches['__edit__'])
del mdb.models['S2-11-450-4-64-3'].sketches['__edit__']
mdb.models['S2-11-450-4-64-3'].parts['T-beam'].regenerate()
mdb.models['S2-11-450-4-64-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=22.0)
mdb.models['S2-11-450-4-64-3'].parts['plate'].regenerate()
mdb.models['S2-11-450-4-64-3'].parts['plate'].deleteMesh()
mdb.models['S2-11-450-4-64-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.5)
mdb.models['S2-11-450-4-64-3'].parts['plate'].generateMesh()
mdb.models['S2-11-450-4-64-3'].parts['T-beam'].generateMesh()
mdb.models['S2-11-450-4-64-3'].rootAssembly.regenerate()
mdb.Job(name='S2-11-450-4-64-3', objectToCopy=mdb.jobs['S2-11-450-4-64-2'])
mdb.jobs['S2-11-450-4-64-3'].setValues(model='S2-11-450-4-64-3')
mdb.jobs['S2-11-450-4-64-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-11-450-4-64-3'].waitForCompletion()
mdb.Model(name='S2-11-450-4-64-4', objectToCopy=mdb.models['S2-11-450-4-64'])
mdb.models['S2-11-450-4-64-4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-11-450-4-64-4'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-11-450-4-64-4'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-11-450-4-64-4'].sketches['__edit__'], upToFeature=
    mdb.models['S2-11-450-4-64-4'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-11-450-4-64-4'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=24.0, vertex1=
    mdb.models['S2-11-450-4-64-4'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-11-450-4-64-4'].sketches['__edit__'].vertices[1])
mdb.models['S2-11-450-4-64-4'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-11-450-4-64-4'].sketches['__edit__'])
del mdb.models['S2-11-450-4-64-4'].sketches['__edit__']
mdb.models['S2-11-450-4-64-4'].parts['T-beam'].regenerate()
mdb.models['S2-11-450-4-64-4'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=24.0)
mdb.models['S2-11-450-4-64-4'].parts['plate'].regenerate()
mdb.models['S2-11-450-4-64-4'].parts['plate'].deleteMesh()
mdb.models['S2-11-450-4-64-4'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['S2-11-450-4-64-4'].parts['plate'].generateMesh()
mdb.models['S2-11-450-4-64-4'].parts['T-beam'].generateMesh()
mdb.models['S2-11-450-4-64-4'].rootAssembly.regenerate()
mdb.Job(name='S2-11-450-4-64-4', objectToCopy=mdb.jobs['S2-11-450-4-64-3'])
mdb.jobs['S2-11-450-4-64-4'].setValues(model='S2-11-450-4-64-4')
mdb.jobs['S2-11-450-4-64-4'].submit(consistencyChecking=OFF)
mdb.jobs['S2-11-450-4-64-4'].waitForCompletion()
mdb.Model(name='S2-11-450-4-64-5', objectToCopy=mdb.models['S2-11-450-4-64'])
mdb.models['S2-11-450-4-64-5'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-11-450-4-64-5'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-11-450-4-64-5'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-11-450-4-64-5'].sketches['__edit__'], upToFeature=
    mdb.models['S2-11-450-4-64-5'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-11-450-4-64-5'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=26.0, vertex1=
    mdb.models['S2-11-450-4-64-5'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-11-450-4-64-5'].sketches['__edit__'].vertices[1])
mdb.models['S2-11-450-4-64-5'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-11-450-4-64-5'].sketches['__edit__'])
del mdb.models['S2-11-450-4-64-5'].sketches['__edit__']
mdb.models['S2-11-450-4-64-5'].parts['T-beam'].regenerate()
mdb.models['S2-11-450-4-64-5'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=26.0)
mdb.models['S2-11-450-4-64-5'].parts['plate'].regenerate()
mdb.models['S2-11-450-4-64-5'].parts['plate'].deleteMesh()
mdb.models['S2-11-450-4-64-5'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-11-450-4-64-5'].parts['plate'].generateMesh()
mdb.models['S2-11-450-4-64-5'].parts['T-beam'].generateMesh()
mdb.models['S2-11-450-4-64-5'].rootAssembly.regenerate()
mdb.Job(name='S2-11-450-4-64-5', objectToCopy=mdb.jobs['S2-11-450-4-64-4'])
mdb.jobs['S2-11-450-4-64-5'].setValues(model='S2-11-450-4-64-5')
mdb.jobs['S2-11-450-4-64-5'].submit(consistencyChecking=OFF)
mdb.jobs['S2-11-450-4-64-5'].waitForCompletion()
mdb.Model(name='S2-11-450-4-64-6', objectToCopy=mdb.models['S2-11-450-4-64'])
mdb.models['S2-11-450-4-64-6'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-11-450-4-64-6'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-11-450-4-64-6'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-11-450-4-64-6'].sketches['__edit__'], upToFeature=
    mdb.models['S2-11-450-4-64-6'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-11-450-4-64-6'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=28.0, vertex1=
    mdb.models['S2-11-450-4-64-6'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-11-450-4-64-6'].sketches['__edit__'].vertices[1])
mdb.models['S2-11-450-4-64-6'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-11-450-4-64-6'].sketches['__edit__'])
del mdb.models['S2-11-450-4-64-6'].sketches['__edit__']
mdb.models['S2-11-450-4-64-6'].parts['T-beam'].regenerate()
mdb.models['S2-11-450-4-64-6'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=28.0)
mdb.models['S2-11-450-4-64-6'].parts['plate'].regenerate()
mdb.models['S2-11-450-4-64-6'].parts['plate'].deleteMesh()
mdb.models['S2-11-450-4-64-6'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['S2-11-450-4-64-6'].parts['plate'].generateMesh()
mdb.models['S2-11-450-4-64-6'].parts['T-beam'].generateMesh()
mdb.models['S2-11-450-4-64-6'].rootAssembly.regenerate()
mdb.Job(name='S2-11-450-4-64-6', objectToCopy=mdb.jobs['S2-11-450-4-64-5'])
mdb.jobs['S2-11-450-4-64-6'].setValues(model='S2-11-450-4-64-6')
mdb.jobs['S2-11-450-4-64-6'].submit(consistencyChecking=OFF)
mdb.jobs['S2-11-450-4-64-6'].waitForCompletion()
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-11-250-8-64')
mdb.models['S2-11-250-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-11-250-8-64'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -114.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 11.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 136.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -114.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 136.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -114.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 11.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 136.0))
mdb.models['S2-11-250-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-11-250-8-64'].parts['plate'].BaseSolidExtrude(depth=16.0, 
    sketch=mdb.models['S2-11-250-8-64'].sketches['__profile__'])
del mdb.models['S2-11-250-8-64'].sketches['__profile__']
mdb.models['S2-11-250-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-11-250-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(16.0, 0.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-11-250-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-11-250-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-11-250-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-11-250-8-64'].sketches['__profile__'])
del mdb.models['S2-11-250-8-64'].sketches['__profile__']
mdb.models['S2-11-250-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-11-250-8-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -114.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 11.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 136.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -114.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 136.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -114.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 11.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 136.0))
mdb.models['S2-11-250-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-11-250-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-11-250-8-64'].sketches['__profile__'])
del mdb.models['S2-11-250-8-64'].sketches['__profile__']
mdb.models['S2-11-250-8-64'].Material(name='Q355')
mdb.models['S2-11-250-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-11-250-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-11-250-8-64'].Material(name='CrMoA')
mdb.models['S2-11-250-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-11-250-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-11-250-8-64'].Material(name='Rigid')
mdb.models['S2-11-250-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-11-250-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-11-250-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-11-250-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-11-250-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-11-250-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-11-250-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-11-250-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-11-250-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-11-250-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-250-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-11-250-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-11-250-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-11-250-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-11-250-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1'
    , part=mdb.models['S2-11-250-8-64'].parts['plane'])
mdb.models['S2-11-250-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1'
    , part=mdb.models['S2-11-250-8-64'].parts['plate'])
mdb.models['S2-11-250-8-64'].rootAssembly.Instance(dependent=ON, name=
    'T-beam-1', part=mdb.models['S2-11-250-8-64'].parts['T-beam'])
mdb.models['S2-11-250-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-11-250-8-64'].rootAssembly.translate(instanceList=('T-beam-1', )
    , vector=(-125.0, 125.0, 16.0))
mdb.models['S2-11-250-8-64'].rootAssembly.LinearInstancePattern(direction1=(
    1.0, 0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=125.0, spacing2=125.0)
del mdb.models['S2-11-250-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-11-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-11-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-11-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-11-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-11-250-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-11-250-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-11-250-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-11-250-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-11-250-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-11-250-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-11-250-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-11-250-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-11-250-8-64'].sketches['__profile__'])
mdb.models['S2-11-250-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-11-250-8-64'].sketches['__profile__'])
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -109.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 16.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 141.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -109.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 141.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -109.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 16.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 141.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].Line(point1=(-275.0, 
    125.0), point2=(275.0, 125.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].Line(point1=(125.0, 
    -275.0), point2=(125.0, 275.0))
mdb.models['S2-11-250-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-11-250-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), sketch=
    mdb.models['S2-11-250-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-11-250-8-64'].parts['plane'].edges[9])
mdb.models['S2-11-250-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-11-250-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-11-250-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=16.0)
mdb.models['S2-11-250-8-64'].parts['plane'].generateMesh()
mdb.models['S2-11-250-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-11-250-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-11-250-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-11-250-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-11-250-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-11-250-8-64'].sketches['__profile__'])
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -109.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 16.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 141.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -109.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 141.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -109.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 16.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 141.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].rectangle(point1=(-60.0, 
    -60.0), point2=(60.0, 60.0))
mdb.models['S2-11-250-8-64'].sketches['__profile__'].rectangle(point1=(-52.0, 
    -52.0), point2=(52.0, 52.0))
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-11-250-8-64'].parts['plate'].faces.getSequenceFromMask(
    mask=('[#1000 ]', ), ), sketch=
    mdb.models['S2-11-250-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[7])
del mdb.models['S2-11-250-8-64'].sketches['__profile__']
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), edges=(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[14], ), line=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[31], sense=REVERSE)
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), edges=(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[18], ), line=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[33], sense=REVERSE)
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#4 ]', ), ), edges=(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[10], ), line=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[35], sense=REVERSE)
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8 ]', ), ), edges=(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[24], ), line=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[37], sense=REVERSE)
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10 ]', ), ), edges=(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20 ]', ), ), edges=(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#40 ]', ), ), edges=(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#80 ]', ), ), edges=(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].vertices[174])
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].vertices[73])
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].vertices[100])
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].vertices[207])
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].vertices[88])
mdb.models['S2-11-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-11-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-11-250-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-11-250-8-64'].parts['plate'].vertices[64])
mdb.models['S2-11-250-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-11-250-8-64'].parts['plate'].generateMesh()
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-11-250-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-11-250-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-11-250-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-11-250-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-11-250-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-11-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-11-250-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-11-250-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-11-250-8-64'].rootAssembly.surfaces['CP-1-plate-1'], 
    sliding=FINITE, surfaceSmoothing=NONE)
mdb.models['S2-11-250-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-11-250-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-11-250-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-11-250-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-11-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-250-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-250-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-250-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-250-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-250-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-250-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-250-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-250-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-250-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-250-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-250-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-250-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-250-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-250-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-11-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-11-250-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-11-250-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-11-250-8-64'].ConcentratedForce(cf1=14203, cf2=13140, cf3=13778, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-11-250-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-11-250-8-64'].Moment(cm1=18496700, cm2=17488600, cm3=565400, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-11-250-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-11-250-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-11-250-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-11-250-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-11-250-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-11-250-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-11-250-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-11-250-8-64-1'].waitForCompletion()
mdb.Model(name='S2-11-250-8-64-2', objectToCopy=mdb.models['S2-11-250-8-64'])
mdb.models['S2-11-250-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-11-250-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-11-250-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-11-250-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-11-250-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-11-250-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=18.0, vertex1=
    mdb.models['S2-11-250-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-11-250-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-11-250-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-11-250-8-64-2'].sketches['__edit__'])
del mdb.models['S2-11-250-8-64-2'].sketches['__edit__']
mdb.models['S2-11-250-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-11-250-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=18.0)
mdb.models['S2-11-250-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-11-250-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-11-250-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-11-250-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-11-250-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-11-250-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-11-250-8-64-2', objectToCopy=mdb.jobs['S2-11-250-8-64-1'])
mdb.jobs['S2-11-250-8-64-2'].setValues(model='S2-11-250-8-64-2')
mdb.jobs['S2-11-250-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-11-250-8-64-2'].waitForCompletion()
mdb.Model(name='S2-11-250-8-64-3', objectToCopy=mdb.models['S2-11-250-8-64'])
mdb.models['S2-11-250-8-64-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-11-250-8-64-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-11-250-8-64-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-11-250-8-64-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-11-250-8-64-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-11-250-8-64-3'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=20.0, vertex1=
    mdb.models['S2-11-250-8-64-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-11-250-8-64-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-11-250-8-64-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-11-250-8-64-3'].sketches['__edit__'])
del mdb.models['S2-11-250-8-64-3'].sketches['__edit__']
mdb.models['S2-11-250-8-64-3'].parts['T-beam'].regenerate()
mdb.models['S2-11-250-8-64-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=20.0)
mdb.models['S2-11-250-8-64-3'].parts['plate'].regenerate()
mdb.models['S2-11-250-8-64-3'].parts['plate'].deleteMesh()
mdb.models['S2-11-250-8-64-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['S2-11-250-8-64-3'].parts['plate'].generateMesh()
mdb.models['S2-11-250-8-64-3'].parts['T-beam'].generateMesh()
mdb.models['S2-11-250-8-64-3'].rootAssembly.regenerate()
mdb.Job(name='S2-11-250-8-64-3', objectToCopy=mdb.jobs['S2-11-250-8-64-2'])
mdb.jobs['S2-11-250-8-64-3'].setValues(model='S2-11-250-8-64-3')
mdb.jobs['S2-11-250-8-64-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-11-250-8-64-3'].waitForCompletion()
mdb.Model(name='S2-11-250-8-64-4', objectToCopy=mdb.models['S2-11-250-8-64'])
mdb.models['S2-11-250-8-64-4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-11-250-8-64-4'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-11-250-8-64-4'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-11-250-8-64-4'].sketches['__edit__'], upToFeature=
    mdb.models['S2-11-250-8-64-4'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-11-250-8-64-4'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=22.0, vertex1=
    mdb.models['S2-11-250-8-64-4'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-11-250-8-64-4'].sketches['__edit__'].vertices[1])
mdb.models['S2-11-250-8-64-4'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-11-250-8-64-4'].sketches['__edit__'])
del mdb.models['S2-11-250-8-64-4'].sketches['__edit__']
mdb.models['S2-11-250-8-64-4'].parts['T-beam'].regenerate()
mdb.models['S2-11-250-8-64-4'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=22.0)
mdb.models['S2-11-250-8-64-4'].parts['plate'].regenerate()
mdb.models['S2-11-250-8-64-4'].parts['plate'].deleteMesh()
mdb.models['S2-11-250-8-64-4'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.5)
mdb.models['S2-11-250-8-64-4'].parts['plate'].generateMesh()
mdb.models['S2-11-250-8-64-4'].parts['T-beam'].generateMesh()
mdb.models['S2-11-250-8-64-4'].rootAssembly.regenerate()
mdb.Job(name='S2-11-250-8-64-4', objectToCopy=mdb.jobs['S2-11-250-8-64-3'])
mdb.jobs['S2-11-250-8-64-4'].setValues(model='S2-11-250-8-64-4')
mdb.jobs['S2-11-250-8-64-4'].submit(consistencyChecking=OFF)
mdb.jobs['S2-11-250-8-64-4'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-12-550-8-64')
mdb.models['S2-12-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-12-550-8-64'].sketches['__profile__'].rectangle(point1=(-325.0, 
    -325.0), point2=(325.0, 325.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-12-550-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-12-550-8-64'].parts['plate'].BaseSolidExtrude(depth=24.0, 
    sketch=mdb.models['S2-12-550-8-64'].sketches['__profile__'])
del mdb.models['S2-12-550-8-64'].sketches['__profile__']
mdb.models['S2-12-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-12-550-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(24.0, 0.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-12-550-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-12-550-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-12-550-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-12-550-8-64'].sketches['__profile__'])
del mdb.models['S2-12-550-8-64'].sketches['__profile__']
mdb.models['S2-12-550-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-12-550-8-64'].sketches['__profile__'].rectangle(point1=(-425.0, 
    -425.0), point2=(425.0, 425.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -264.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 11.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 286.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -264.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 286.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -264.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 11.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 286.0))
mdb.models['S2-12-550-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-12-550-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-12-550-8-64'].sketches['__profile__'])
del mdb.models['S2-12-550-8-64'].sketches['__profile__']
mdb.models['S2-12-550-8-64'].Material(name='Q355')
mdb.models['S2-12-550-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-12-550-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-12-550-8-64'].Material(name='CrMoA')
mdb.models['S2-12-550-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-12-550-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-12-550-8-64'].Material(name='Rigid')
mdb.models['S2-12-550-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-12-550-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-12-550-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-12-550-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-12-550-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-12-550-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-12-550-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-12-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-12-550-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-12-550-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-12-550-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-12-550-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-12-550-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-12-550-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-12-550-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1'
    , part=mdb.models['S2-12-550-8-64'].parts['plane'])
mdb.models['S2-12-550-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1'
    , part=mdb.models['S2-12-550-8-64'].parts['plate'])
mdb.models['S2-12-550-8-64'].rootAssembly.Instance(dependent=ON, name=
    'T-beam-1', part=mdb.models['S2-12-550-8-64'].parts['T-beam'])
mdb.models['S2-12-550-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-12-550-8-64'].rootAssembly.translate(instanceList=('T-beam-1', )
    , vector=(-275.0, 275.0, 24.0))
mdb.models['S2-12-550-8-64'].rootAssembly.LinearInstancePattern(direction1=(
    1.0, 0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=275.0, spacing2=275.0)
del mdb.models['S2-12-550-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-12-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-12-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-12-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-12-550-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-12-550-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-12-550-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['S2-12-550-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-12-550-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-12-550-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-12-550-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-12-550-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-12-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-12-550-8-64'].sketches['__profile__'])
mdb.models['S2-12-550-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-12-550-8-64'].sketches['__profile__'])
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 
    -275.0), point2=(425.0, -275.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 0.0), 
    point2=(425.0, 0.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].Line(point1=(-425.0, 
    275.0), point2=(425.0, 275.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].Line(point1=(-275.0, 
    -425.0), point2=(-275.0, 425.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].Line(point1=(0.0, -425.0), 
    point2=(0.0, 425.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].Line(point1=(275.0, 
    -425.0), point2=(275.0, 425.0))
mdb.models['S2-12-550-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-12-550-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), sketch=
    mdb.models['S2-12-550-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-12-550-8-64'].parts['plane'].edges[9])
mdb.models['S2-12-550-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-12-550-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-12-550-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=24.0)
mdb.models['S2-12-550-8-64'].parts['plane'].generateMesh()
mdb.models['S2-12-550-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-12-550-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-12-550-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-12-550-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-12-550-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-12-550-8-64'].sketches['__profile__'])
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, -275.0), point1=(-275.0, -259.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 0.0), point1=(-275.0, 16.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-275.0, 275.0), point1=(-275.0, 291.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -275.0), point1=(0.0, -259.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 275.0), point1=(0.0, 291.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, -275.0), point1=(275.0, -259.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 0.0), point1=(275.0, 16.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(275.0, 275.0), point1=(275.0, 291.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].rectangle(point1=(-75.0, 
    -75.0), point2=(75.0, 75.0))
mdb.models['S2-12-550-8-64'].sketches['__profile__'].rectangle(point1=(-65.0, 
    -65.0), point2=(65.0, 65.0))
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-12-550-8-64'].parts['plate'].faces.getSequenceFromMask(
    mask=('[#1000 ]', ), ), sketch=
    mdb.models['S2-12-550-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[7])
del mdb.models['S2-12-550-8-64'].sketches['__profile__']
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), edges=(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[14], ), line=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[31], sense=REVERSE)
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), edges=(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[18], ), line=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[33], sense=REVERSE)
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#4 ]', ), ), edges=(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[10], ), line=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[35], sense=REVERSE)
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8 ]', ), ), edges=(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[24], ), line=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[37], sense=REVERSE)
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10 ]', ), ), edges=(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20 ]', ), ), edges=(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#40 ]', ), ), edges=(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#80 ]', ), ), edges=(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].vertices[174])
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].vertices[73])
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].vertices[100])
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].vertices[207])
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].vertices[88])
mdb.models['S2-12-550-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-12-550-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-12-550-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-12-550-8-64'].parts['plate'].vertices[64])
mdb.models['S2-12-550-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['S2-12-550-8-64'].parts['plate'].generateMesh()
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-12-550-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-12-550-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-12-550-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-12-550-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-12-550-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-12-550-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-12-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-12-550-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-12-550-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-12-550-8-64'].rootAssembly.surfaces['CP-1-plate-1'], 
    sliding=FINITE, surfaceSmoothing=NONE)
mdb.models['S2-12-550-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-12-550-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-12-550-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-12-550-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-12-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-12-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-12-550-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-12-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-12-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-12-550-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-12-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-12-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-12-550-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-12-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-12-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-12-550-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-12-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-12-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-12-550-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-12-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-12-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-12-550-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-12-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-12-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-12-550-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-12-550-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-12-550-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-12-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-12-550-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-12-550-8-64'].ConcentratedForce(cf1=21012, cf2=19068, cf3=23717, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-12-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-12-550-8-64'].Moment(cm1=32807000, cm2=34204500, cm3=6700, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-12-550-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-12-550-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-12-550-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-12-550-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-12-550-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-12-550-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-12-550-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-12-550-8-64-1'].waitForCompletion()
mdb.Model(name='S2-12-550-8-64-2', objectToCopy=mdb.models['S2-12-550-8-64'])
mdb.models['S2-12-550-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-12-550-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-12-550-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-12-550-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-12-550-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-12-550-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=26.0, vertex1=
    mdb.models['S2-12-550-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-12-550-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-12-550-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-12-550-8-64-2'].sketches['__edit__'])
del mdb.models['S2-12-550-8-64-2'].sketches['__edit__']
mdb.models['S2-12-550-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-12-550-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=26.0)
mdb.models['S2-12-550-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-12-550-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-12-550-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.5)
mdb.models['S2-12-550-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-12-550-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-12-550-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-12-550-8-64-2', objectToCopy=mdb.jobs['S2-12-550-8-64-1'])
mdb.jobs['S2-12-550-8-64-2'].setValues(model='S2-12-550-8-64-2')
mdb.jobs['S2-12-550-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-12-550-8-64-2'].waitForCompletion()
mdb.Model(name='S2-12-550-8-64-3', objectToCopy=mdb.models['S2-12-550-8-64'])
mdb.models['S2-12-550-8-64-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-12-550-8-64-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-12-550-8-64-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-12-550-8-64-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-12-550-8-64-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-12-550-8-64-3'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=28.0, vertex1=
    mdb.models['S2-12-550-8-64-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-12-550-8-64-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-12-550-8-64-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-12-550-8-64-3'].sketches['__edit__'])
del mdb.models['S2-12-550-8-64-3'].sketches['__edit__']
mdb.models['S2-12-550-8-64-3'].parts['T-beam'].regenerate()
mdb.models['S2-12-550-8-64-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=28.0)
mdb.models['S2-12-550-8-64-3'].parts['plate'].regenerate()
mdb.models['S2-12-550-8-64-3'].parts['plate'].deleteMesh()
mdb.models['S2-12-550-8-64-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.0)
mdb.models['S2-12-550-8-64-3'].parts['plate'].generateMesh()
mdb.models['S2-12-550-8-64-3'].parts['T-beam'].generateMesh()
mdb.models['S2-12-550-8-64-3'].rootAssembly.regenerate()
mdb.Job(name='S2-12-550-8-64-3', objectToCopy=mdb.jobs['S2-12-550-8-64-2'])
mdb.jobs['S2-12-550-8-64-3'].setValues(model='S2-12-550-8-64-3')
mdb.jobs['S2-12-550-8-64-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-12-550-8-64-3'].waitForCompletion()
mdb.Model(name='S2-12-550-8-64-4', objectToCopy=mdb.models['S2-12-550-8-64'])
mdb.models['S2-12-550-8-64-4'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-12-550-8-64-4'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-12-550-8-64-4'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-12-550-8-64-4'].sketches['__edit__'], upToFeature=
    mdb.models['S2-12-550-8-64-4'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-12-550-8-64-4'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=30.0, vertex1=
    mdb.models['S2-12-550-8-64-4'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-12-550-8-64-4'].sketches['__edit__'].vertices[1])
mdb.models['S2-12-550-8-64-4'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-12-550-8-64-4'].sketches['__edit__'])
del mdb.models['S2-12-550-8-64-4'].sketches['__edit__']
mdb.models['S2-12-550-8-64-4'].parts['T-beam'].regenerate()
mdb.models['S2-12-550-8-64-4'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=30.0)
mdb.models['S2-12-550-8-64-4'].parts['plate'].regenerate()
mdb.models['S2-12-550-8-64-4'].parts['plate'].deleteMesh()
mdb.models['S2-12-550-8-64-4'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=7.5)
mdb.models['S2-12-550-8-64-4'].parts['plate'].generateMesh()
mdb.models['S2-12-550-8-64-4'].parts['T-beam'].generateMesh()
mdb.models['S2-12-550-8-64-4'].rootAssembly.regenerate()
mdb.Job(name='S2-12-550-8-64-4', objectToCopy=mdb.jobs['S2-12-550-8-64-3'])
mdb.jobs['S2-12-550-8-64-4'].setValues(model='S2-12-550-8-64-4')
mdb.jobs['S2-12-550-8-64-4'].submit(consistencyChecking=OFF)
mdb.jobs['S2-12-550-8-64-4'].waitForCompletion()
mdb.Model(name='S2-12-550-8-64-5', objectToCopy=mdb.models['S2-12-550-8-64'])
mdb.models['S2-12-550-8-64-5'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-12-550-8-64-5'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-12-550-8-64-5'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-12-550-8-64-5'].sketches['__edit__'], upToFeature=
    mdb.models['S2-12-550-8-64-5'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-12-550-8-64-5'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=32.0, vertex1=
    mdb.models['S2-12-550-8-64-5'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-12-550-8-64-5'].sketches['__edit__'].vertices[1])
mdb.models['S2-12-550-8-64-5'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-12-550-8-64-5'].sketches['__edit__'])
del mdb.models['S2-12-550-8-64-5'].sketches['__edit__']
mdb.models['S2-12-550-8-64-5'].parts['T-beam'].regenerate()
mdb.models['S2-12-550-8-64-5'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=32.0)
mdb.models['S2-12-550-8-64-5'].parts['plate'].regenerate()
mdb.models['S2-12-550-8-64-5'].parts['plate'].deleteMesh()
mdb.models['S2-12-550-8-64-5'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=8.0)
mdb.models['S2-12-550-8-64-5'].parts['plate'].generateMesh()
mdb.models['S2-12-550-8-64-5'].parts['T-beam'].generateMesh()
mdb.models['S2-12-550-8-64-5'].rootAssembly.regenerate()
mdb.Job(name='S2-12-550-8-64-5', objectToCopy=mdb.jobs['S2-12-550-8-64-4'])
mdb.jobs['S2-12-550-8-64-5'].setValues(model='S2-12-550-8-64-5')
mdb.jobs['S2-12-550-8-64-5'].submit(consistencyChecking=OFF)
mdb.jobs['S2-12-550-8-64-5'].waitForCompletion()
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-13-250-8-64')
mdb.models['S2-13-250-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-13-250-8-64'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -114.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 11.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 136.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -114.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 136.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -114.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 11.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 136.0))
mdb.models['S2-13-250-8-64'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-13-250-8-64'].parts['plate'].BaseSolidExtrude(depth=18.0, 
    sketch=mdb.models['S2-13-250-8-64'].sketches['__profile__'])
del mdb.models['S2-13-250-8-64'].sketches['__profile__']
mdb.models['S2-13-250-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-13-250-8-64'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(18.0, 0.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-13-250-8-64'].sketches['__profile__'].geometry[2])
mdb.models['S2-13-250-8-64'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-13-250-8-64'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-13-250-8-64'].sketches['__profile__'])
del mdb.models['S2-13-250-8-64'].sketches['__profile__']
mdb.models['S2-13-250-8-64'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-13-250-8-64'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -114.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 11.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 136.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -114.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 136.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -114.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 11.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 136.0))
mdb.models['S2-13-250-8-64'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-13-250-8-64'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-13-250-8-64'].sketches['__profile__'])
del mdb.models['S2-13-250-8-64'].sketches['__profile__']
mdb.models['S2-13-250-8-64'].Material(name='Q355')
mdb.models['S2-13-250-8-64'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-13-250-8-64'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-13-250-8-64'].Material(name='CrMoA')
mdb.models['S2-13-250-8-64'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-13-250-8-64'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-13-250-8-64'].Material(name='Rigid')
mdb.models['S2-13-250-8-64'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-13-250-8-64'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-13-250-8-64'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-13-250-8-64'].CircularProfile(name='M20', r=11.0)
mdb.models['S2-13-250-8-64'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-13-250-8-64'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-13-250-8-64'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-13-250-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-13-250-8-64'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-13-250-8-64'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-13-250-8-64'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-13-250-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-13-250-8-64'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-13-250-8-64'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-13-250-8-64'].rootAssembly.Instance(dependent=ON, name='plane-1'
    , part=mdb.models['S2-13-250-8-64'].parts['plane'])
mdb.models['S2-13-250-8-64'].rootAssembly.Instance(dependent=ON, name='plate-1'
    , part=mdb.models['S2-13-250-8-64'].parts['plate'])
mdb.models['S2-13-250-8-64'].rootAssembly.Instance(dependent=ON, name=
    'T-beam-1', part=mdb.models['S2-13-250-8-64'].parts['T-beam'])
mdb.models['S2-13-250-8-64'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-13-250-8-64'].rootAssembly.translate(instanceList=('T-beam-1', )
    , vector=(-125.0, 125.0, 18.0))
mdb.models['S2-13-250-8-64'].rootAssembly.LinearInstancePattern(direction1=(
    1.0, 0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=125.0, spacing2=125.0)
del mdb.models['S2-13-250-8-64'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-13-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-13-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-13-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-13-250-8-64'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-13-250-8-64'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-13-250-8-64'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-13-250-8-64'].parts['T-beam'].generateMesh()
mdb.models['S2-13-250-8-64'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-13-250-8-64'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-13-250-8-64'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-13-250-8-64'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-13-250-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-13-250-8-64'].sketches['__profile__'])
mdb.models['S2-13-250-8-64'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-13-250-8-64'].sketches['__profile__'])
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -109.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 16.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 141.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -109.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 141.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -109.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 16.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 141.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].Line(point1=(-275.0, 
    125.0), point2=(275.0, 125.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].Line(point1=(125.0, 
    -275.0), point2=(125.0, 275.0))
mdb.models['S2-13-250-8-64'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-13-250-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), sketch=
    mdb.models['S2-13-250-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-13-250-8-64'].parts['plane'].edges[9])
mdb.models['S2-13-250-8-64'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-13-250-8-64'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-13-250-8-64'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=18.0)
mdb.models['S2-13-250-8-64'].parts['plane'].generateMesh()
mdb.models['S2-13-250-8-64'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-13-250-8-64'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-13-250-8-64'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-13-250-8-64'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-13-250-8-64'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-13-250-8-64'].sketches['__profile__'])
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -109.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 16.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 141.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -109.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 141.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -109.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 16.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 141.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].rectangle(point1=(-60.0, 
    -60.0), point2=(60.0, 60.0))
mdb.models['S2-13-250-8-64'].sketches['__profile__'].rectangle(point1=(-52.0, 
    -52.0), point2=(52.0, 52.0))
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-13-250-8-64'].parts['plate'].faces.getSequenceFromMask(
    mask=('[#1000 ]', ), ), sketch=
    mdb.models['S2-13-250-8-64'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[7])
del mdb.models['S2-13-250-8-64'].sketches['__profile__']
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), edges=(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[14], ), line=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[31], sense=REVERSE)
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), edges=(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[18], ), line=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[33], sense=REVERSE)
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#4 ]', ), ), edges=(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[10], ), line=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[35], sense=REVERSE)
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8 ]', ), ), edges=(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[24], ), line=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[37], sense=REVERSE)
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10 ]', ), ), edges=(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[17], ), line=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20 ]', ), ), edges=(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[21], ), line=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#40 ]', ), ), edges=(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[27], ), line=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#80 ]', ), ), edges=(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[28], ), line=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[39], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[21], CENTER))
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[92], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[77], CENTER))
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[95], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[89], CENTER))
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[117], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[156], CENTER))
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[196], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[256], CENTER))
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[307], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].InterestingPoint(
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[292], CENTER))
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[352], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].vertices[174])
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[98], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].vertices[73])
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[149], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].vertices[100])
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[446], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].vertices[207])
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[186], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].vertices[88])
mdb.models['S2-13-250-8-64'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-13-250-8-64'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-13-250-8-64'].parts['plate'].edges[96], point=
    mdb.models['S2-13-250-8-64'].parts['plate'].vertices[64])
mdb.models['S2-13-250-8-64'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-13-250-8-64'].parts['plate'].generateMesh()
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-13-250-8-64'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-13-250-8-64'].ContactProperty('IntProp-1')
mdb.models['S2-13-250-8-64'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-13-250-8-64'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-13-250-8-64'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-13-250-8-64'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-13-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-13-250-8-64'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-13-250-8-64'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-13-250-8-64'].rootAssembly.surfaces['CP-1-plate-1'], 
    sliding=FINITE, surfaceSmoothing=NONE)
mdb.models['S2-13-250-8-64'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-13-250-8-64'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-13-250-8-64'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-13-250-8-64'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-13-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-13-250-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-13-250-8-64'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-13-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-13-250-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-13-250-8-64'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-13-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-13-250-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-13-250-8-64'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-13-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-13-250-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-13-250-8-64'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-13-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-13-250-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-13-250-8-64'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-13-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-13-250-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-13-250-8-64'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-13-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-13-250-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-13-250-8-64'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-13-250-8-64'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-13-250-8-64'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-13-250-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=104550.0, stepName='boltload')
mdb.models['S2-13-250-8-64'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-13-250-8-64'].ConcentratedForce(cf1=7309, cf2=10730, cf3=9507, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-13-250-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-13-250-8-64'].Moment(cm1=17449200, cm2=10518000, cm3=1255900, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-13-250-8-64'].rootAssembly.referencePoints[58], )))
mdb.models['S2-13-250-8-64'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-13-250-8-64'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-13-250-8-64', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-13-250-8-64-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-13-250-8-64'].rootAssembly.regenerate()
mdb.jobs['S2-13-250-8-64-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-13-250-8-64-1'].waitForCompletion()
mdb.Model(name='S2-13-250-8-64-2', objectToCopy=mdb.models['S2-13-250-8-64'])
mdb.models['S2-13-250-8-64-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-13-250-8-64-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-13-250-8-64-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-13-250-8-64-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-13-250-8-64-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-13-250-8-64-2'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=20.0, vertex1=
    mdb.models['S2-13-250-8-64-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-13-250-8-64-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-13-250-8-64-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-13-250-8-64-2'].sketches['__edit__'])
del mdb.models['S2-13-250-8-64-2'].sketches['__edit__']
mdb.models['S2-13-250-8-64-2'].parts['T-beam'].regenerate()
mdb.models['S2-13-250-8-64-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=20.0)
mdb.models['S2-13-250-8-64-2'].parts['plate'].regenerate()
mdb.models['S2-13-250-8-64-2'].parts['plate'].deleteMesh()
mdb.models['S2-13-250-8-64-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['S2-13-250-8-64-2'].parts['plate'].generateMesh()
mdb.models['S2-13-250-8-64-2'].parts['T-beam'].generateMesh()
mdb.models['S2-13-250-8-64-2'].rootAssembly.regenerate()
mdb.Job(name='S2-13-250-8-64-2', objectToCopy=mdb.jobs['S2-13-250-8-64-1'])
mdb.jobs['S2-13-250-8-64-2'].setValues(model='S2-13-250-8-64-2')
mdb.jobs['S2-13-250-8-64-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-13-250-8-64-2'].waitForCompletion()
mdb.Model(name='S2-13-250-8-64-3', objectToCopy=mdb.models['S2-13-250-8-64'])
mdb.models['S2-13-250-8-64-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-13-250-8-64-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-13-250-8-64-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-13-250-8-64-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-13-250-8-64-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-13-250-8-64-3'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=22.0, vertex1=
    mdb.models['S2-13-250-8-64-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-13-250-8-64-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-13-250-8-64-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-13-250-8-64-3'].sketches['__edit__'])
del mdb.models['S2-13-250-8-64-3'].sketches['__edit__']
mdb.models['S2-13-250-8-64-3'].parts['T-beam'].regenerate()
mdb.models['S2-13-250-8-64-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=22.0)
mdb.models['S2-13-250-8-64-3'].parts['plate'].regenerate()
mdb.models['S2-13-250-8-64-3'].parts['plate'].deleteMesh()
mdb.models['S2-13-250-8-64-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.5)
mdb.models['S2-13-250-8-64-3'].parts['plate'].generateMesh()
mdb.models['S2-13-250-8-64-3'].parts['T-beam'].generateMesh()
mdb.models['S2-13-250-8-64-3'].rootAssembly.regenerate()
mdb.Job(name='S2-13-250-8-64-3', objectToCopy=mdb.jobs['S2-13-250-8-64-2'])
mdb.jobs['S2-13-250-8-64-3'].setValues(model='S2-13-250-8-64-3')
mdb.jobs['S2-13-250-8-64-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-13-250-8-64-3'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-14-250-8-38')
mdb.models['S2-14-250-8-38'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-14-250-8-38'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -117.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 8.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 133.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -117.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 133.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -117.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 8.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 133.0))
mdb.models['S2-14-250-8-38'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-14-250-8-38'].parts['plate'].BaseSolidExtrude(depth=12.0, 
    sketch=mdb.models['S2-14-250-8-38'].sketches['__profile__'])
del mdb.models['S2-14-250-8-38'].sketches['__profile__']
mdb.models['S2-14-250-8-38'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-14-250-8-38'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(12.0, 0.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-14-250-8-38'].sketches['__profile__'].geometry[2])
mdb.models['S2-14-250-8-38'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-14-250-8-38'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-14-250-8-38'].sketches['__profile__'])
del mdb.models['S2-14-250-8-38'].sketches['__profile__']
mdb.models['S2-14-250-8-38'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-14-250-8-38'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -117.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 8.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 133.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -117.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 133.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -117.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 8.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 133.0))
mdb.models['S2-14-250-8-38'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-14-250-8-38'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-14-250-8-38'].sketches['__profile__'])
del mdb.models['S2-14-250-8-38'].sketches['__profile__']
mdb.models['S2-14-250-8-38'].Material(name='Q355')
mdb.models['S2-14-250-8-38'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-14-250-8-38'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-14-250-8-38'].Material(name='CrMoA')
mdb.models['S2-14-250-8-38'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-14-250-8-38'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-14-250-8-38'].Material(name='Rigid')
mdb.models['S2-14-250-8-38'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-14-250-8-38'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-14-250-8-38'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-14-250-8-38'].CircularProfile(name='M20', r=8.0)
mdb.models['S2-14-250-8-38'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-14-250-8-38'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-14-250-8-38'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-14-250-8-38'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-14-250-8-38'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-14-250-8-38'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-8-38'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-14-250-8-38'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-14-250-8-38'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-14-250-8-38'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-14-250-8-38'].rootAssembly.Instance(dependent=ON, name='plane-1'
    , part=mdb.models['S2-14-250-8-38'].parts['plane'])
mdb.models['S2-14-250-8-38'].rootAssembly.Instance(dependent=ON, name='plate-1'
    , part=mdb.models['S2-14-250-8-38'].parts['plate'])
mdb.models['S2-14-250-8-38'].rootAssembly.Instance(dependent=ON, name=
    'T-beam-1', part=mdb.models['S2-14-250-8-38'].parts['T-beam'])
mdb.models['S2-14-250-8-38'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-14-250-8-38'].rootAssembly.translate(instanceList=('T-beam-1', )
    , vector=(-125.0, 125.0, 12.0))
mdb.models['S2-14-250-8-38'].rootAssembly.LinearInstancePattern(direction1=(
    1.0, 0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=3, number2=3, spacing1=125.0, spacing2=125.0)
del mdb.models['S2-14-250-8-38'].rootAssembly.features['T-beam-1-lin-2-2']
mdb.models['S2-14-250-8-38'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-14-250-8-38'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-14-250-8-38'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-14-250-8-38'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-14-250-8-38'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-14-250-8-38'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['S2-14-250-8-38'].parts['T-beam'].generateMesh()
mdb.models['S2-14-250-8-38'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-14-250-8-38'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-14-250-8-38'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-14-250-8-38'].parts['plane'].edges[9], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-14-250-8-38'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-8-38'].sketches['__profile__'])
mdb.models['S2-14-250-8-38'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-8-38'].sketches['__profile__'])
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -112.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 13.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 138.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -112.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 138.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -112.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 13.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 138.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].Line(point1=(-275.0, 
    125.0), point2=(275.0, 125.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].Line(point1=(125.0, 
    -275.0), point2=(125.0, 275.0))
mdb.models['S2-14-250-8-38'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-14-250-8-38'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), sketch=
    mdb.models['S2-14-250-8-38'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-14-250-8-38'].parts['plane'].edges[9])
mdb.models['S2-14-250-8-38'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-14-250-8-38'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-14-250-8-38'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=12.0)
mdb.models['S2-14-250-8-38'].parts['plane'].generateMesh()
mdb.models['S2-14-250-8-38'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.75, transform=
    mdb.models['S2-14-250-8-38'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-14-250-8-38'].parts['plate'].faces[12], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-14-250-8-38'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 20.0)))
mdb.models['S2-14-250-8-38'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-8-38'].sketches['__profile__'])
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -112.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 0.0), point1=(-125.0, 13.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 138.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, -125.0), point1=(0.0, -112.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 125.0), point1=(0.0, 138.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -112.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 0.0), point1=(125.0, 13.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 138.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].rectangle(point1=(-70.0, 
    -70.0), point2=(70.0, 70.0))
mdb.models['S2-14-250-8-38'].sketches['__profile__'].rectangle(point1=(-62.0, 
    -62.0), point2=(62.0, 62.0))
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-14-250-8-38'].parts['plate'].faces.getSequenceFromMask(
    mask=('[#1000 ]', ), ), sketch=
    mdb.models['S2-14-250-8-38'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[7])
del mdb.models['S2-14-250-8-38'].sketches['__profile__']
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), edges=(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[14], ), line=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[31], sense=REVERSE)
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), edges=(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[18], ), line=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[33], sense=REVERSE)
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#4 ]', ), ), edges=(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[10], ), line=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[35], sense=REVERSE)
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8 ]', ), ), edges=(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[24], ), line=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[37], sense=REVERSE)
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10 ]', ), ), edges=(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[17], ), line=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[39], sense=REVERSE)
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20 ]', ), ), edges=(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[21], ), line=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[41], sense=REVERSE)
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#40 ]', ), ), edges=(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[27], ), line=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[43], sense=REVERSE)
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#80 ]', ), ), edges=(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[28], ), line=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[45], sense=REVERSE)
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#183 ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[39], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[21], CENTER))
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#182b ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[92], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[77], CENTER))
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#60017 ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[95], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[89], CENTER))
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1310158 ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[117], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[156], CENTER))
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#880c0820 #1 ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[196], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[256], CENTER))
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f0400 #3 ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[307], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[292], CENTER))
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#849000 ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[352], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].vertices[174])
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#24000 #10010 ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[98], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].vertices[73])
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#10912 #80 ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[149], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].vertices[100])
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#14210000 #40001 ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[446], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].vertices[207])
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#9f0000 ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[186], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].vertices[88])
mdb.models['S2-14-250-8-38'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-8-38'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#f800 #2 ]', ), ), normal=
    mdb.models['S2-14-250-8-38'].parts['plate'].edges[96], point=
    mdb.models['S2-14-250-8-38'].parts['plate'].vertices[64])
mdb.models['S2-14-250-8-38'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.0)
mdb.models['S2-14-250-8-38'].parts['plate'].generateMesh()
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #10000000 #10000004 #0 #1 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #800000 #80 #0:3 #80 #0 #2 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:8 #410 #200 #8000000 ]', ), )), userMode=DOF_MODE_MPC, userType=
    0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #400000 #1 #0 #2000 #0:2 #4 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #10002002 #0:2 #10000000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:4 #10000400 #0 #4000000 #0:3 #20000000 ]', ), )), userMode=
    DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #200000 #8 #0:2 #80000010 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #800000 #200 #0:3 #40000004 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-8-38'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-8-38'].ContactProperty('IntProp-1')
mdb.models['S2-14-250-8-38'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-14-250-8-38'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-14-250-8-38'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ))
mdb.models['S2-14-250-8-38'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-14-250-8-38'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#8022a900 #244014a2 #4a520025 #26001640 #a0628001 #40260048 #92400092', 
    ' #8004890 #40001285 #4000a409 #2aaa8a2 #20000 ]', ), ))
mdb.models['S2-14-250-8-38'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-14-250-8-38'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-14-250-8-38'].rootAssembly.surfaces['CP-1-plate-1'], 
    sliding=FINITE, surfaceSmoothing=NONE)
mdb.models['S2-14-250-8-38'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-14-250-8-38'].rootAssembly.instances['plate-1'].vertices[97])
mdb.models['S2-14-250-8-38'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-14-250-8-38'].rootAssembly.referencePoints[58], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #2000000 #10040008 #0 #1001000 #4000000 #0:5', ' #10000 ]', ), 
    )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-14-250-8-38'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-8-38'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=37500.0, stepName='boltload')
mdb.models['S2-14-250-8-38'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-8-38'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-8-38'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=37500.0, stepName='boltload')
mdb.models['S2-14-250-8-38'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-8-38'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-3-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-8-38'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=37500.0, stepName='boltload')
mdb.models['S2-14-250-8-38'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-8-38'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-8-38'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=37500.0, stepName='boltload')
mdb.models['S2-14-250-8-38'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-8-38'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload5', region=Region(
    end1Edges=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-3-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-8-38'].loads['boltload5'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=37500.0, stepName='boltload')
mdb.models['S2-14-250-8-38'].loads['boltload5'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-8-38'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload6', region=Region(
    end1Edges=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-1-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-8-38'].loads['boltload6'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=37500.0, stepName='boltload')
mdb.models['S2-14-250-8-38'].loads['boltload6'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-8-38'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload7', region=Region(
    end1Edges=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-2-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-8-38'].loads['boltload7'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=37500.0, stepName='boltload')
mdb.models['S2-14-250-8-38'].loads['boltload7'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-8-38'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload8', region=Region(
    end1Edges=mdb.models['S2-14-250-8-38'].rootAssembly.instances['T-beam-1-lin-3-3'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-8-38'].loads['boltload8'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=37500.0, stepName='boltload')
mdb.models['S2-14-250-8-38'].loads['boltload8'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-8-38'].ConcentratedForce(cf1=22199, cf2=21961, cf3=28661, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-14-250-8-38'].rootAssembly.referencePoints[58], )))
mdb.models['S2-14-250-8-38'].Moment(cm1=5762000, cm2=3120000, cm3=30000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-14-250-8-38'].rootAssembly.referencePoints[58], )))
mdb.models['S2-14-250-8-38'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-14-250-8-38'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-14-250-8-38', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-14-250-8-38-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-14-250-8-38'].rootAssembly.regenerate()
mdb.jobs['S2-14-250-8-38-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-14-250-8-38-1'].waitForCompletion()
mdb.Model(name='S2-14-250-8-38-2', objectToCopy=mdb.models['S2-14-250-8-38'])
mdb.models['S2-14-250-8-38-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-14-250-8-38-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-14-250-8-38-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-8-38-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-14-250-8-38-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-14-250-8-38-2'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=14.0, vertex1=
    mdb.models['S2-14-250-8-38-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-14-250-8-38-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-14-250-8-38-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-14-250-8-38-2'].sketches['__edit__'])
del mdb.models['S2-14-250-8-38-2'].sketches['__edit__']
mdb.models['S2-14-250-8-38-2'].parts['T-beam'].regenerate()
mdb.models['S2-14-250-8-38-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=14.0)
mdb.models['S2-14-250-8-38-2'].parts['plate'].regenerate()
mdb.models['S2-14-250-8-38-2'].parts['plate'].deleteMesh()
mdb.models['S2-14-250-8-38-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.5)
mdb.models['S2-14-250-8-38-2'].parts['plate'].generateMesh()
mdb.models['S2-14-250-8-38-2'].parts['T-beam'].generateMesh()
mdb.models['S2-14-250-8-38-2'].rootAssembly.regenerate()
mdb.Job(name='S2-14-250-8-38-2', objectToCopy=mdb.jobs['S2-14-250-8-38-1'])
mdb.jobs['S2-14-250-8-38-2'].setValues(model='S2-14-250-8-38-2')
mdb.jobs['S2-14-250-8-38-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-14-250-8-38-2'].waitForCompletion()
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-14-250-4-41')
mdb.models['S2-14-250-4-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-14-250-4-41'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -117.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 133.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -117.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 133.0))
mdb.models['S2-14-250-4-41'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-14-250-4-41'].parts['plate'].BaseSolidExtrude(depth=18.0, 
    sketch=mdb.models['S2-14-250-4-41'].sketches['__profile__'])
del mdb.models['S2-14-250-4-41'].sketches['__profile__']
mdb.models['S2-14-250-4-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(18.0, 0.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'].geometry[2])
mdb.models['S2-14-250-4-41'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-14-250-4-41'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'])
del mdb.models['S2-14-250-4-41'].sketches['__profile__']
mdb.models['S2-14-250-4-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-14-250-4-41'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -117.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 133.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -117.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 133.0))
mdb.models['S2-14-250-4-41'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-14-250-4-41'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'])
del mdb.models['S2-14-250-4-41'].sketches['__profile__']
mdb.models['S2-14-250-4-41'].Material(name='Q355')
mdb.models['S2-14-250-4-41'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-14-250-4-41'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-14-250-4-41'].Material(name='CrMoA')
mdb.models['S2-14-250-4-41'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-14-250-4-41'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-14-250-4-41'].Material(name='Rigid')
mdb.models['S2-14-250-4-41'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-14-250-4-41'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-14-250-4-41'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-14-250-4-41'].CircularProfile(name='M20', r=8.0)
mdb.models['S2-14-250-4-41'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-14-250-4-41'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-14-250-4-41'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-14-250-4-41'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-14-250-4-41'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-14-250-4-41'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-4-41'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-14-250-4-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-14-250-4-41'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-14-250-4-41'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-14-250-4-41'].rootAssembly.Instance(dependent=ON, name='plane-1'
    , part=mdb.models['S2-14-250-4-41'].parts['plane'])
mdb.models['S2-14-250-4-41'].rootAssembly.Instance(dependent=ON, name='plate-1'
    , part=mdb.models['S2-14-250-4-41'].parts['plate'])
mdb.models['S2-14-250-4-41'].rootAssembly.Instance(dependent=ON, name=
    'T-beam-1', part=mdb.models['S2-14-250-4-41'].parts['T-beam'])
mdb.models['S2-14-250-4-41'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-14-250-4-41'].rootAssembly.translate(instanceList=('T-beam-1', )
    , vector=(-125.0, 125.0, 18.0))
mdb.models['S2-14-250-4-41'].rootAssembly.LinearInstancePattern(direction1=(
    1.0, 0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=2, number2=2, spacing1=250.0, spacing2=250.0)
mdb.models['S2-14-250-4-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-14-250-4-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-14-250-4-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-14-250-4-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-14-250-4-41'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-14-250-4-41'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-14-250-4-41'].parts['T-beam'].generateMesh()
mdb.models['S2-14-250-4-41'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-14-250-4-41'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-14-250-4-41'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-14-250-4-41'].parts['plane'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-14-250-4-41'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'])
mdb.models['S2-14-250-4-41'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'])
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -112.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 138.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -112.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 138.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(-275.0, 
    125.0), point2=(275.0, 125.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(125.0, 
    -275.0), point2=(125.0, 275.0))
mdb.models['S2-14-250-4-41'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-14-250-4-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-14-250-4-41'].parts['plane'].edges[7])
mdb.models['S2-14-250-4-41'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-14-250-4-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ))
mdb.models['S2-14-250-4-41'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=18.0)
mdb.models['S2-14-250-4-41'].parts['plane'].generateMesh()
mdb.models['S2-14-250-4-41'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.67, transform=
    mdb.models['S2-14-250-4-41'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-14-250-4-41'].parts['plate'].faces[8], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-14-250-4-41'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 19.0)))
mdb.models['S2-14-250-4-41'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'])
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -112.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 138.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -112.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 138.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].rectangle(point1=(-70.0, 
    -70.0), point2=(70.0, 70.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].rectangle(point1=(-62.0, 
    -62.0), point2=(62.0, 62.0))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-14-250-4-41'].parts['plate'].faces.getSequenceFromMask(
    mask=('[#100 ]', ), ), sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[7])
del mdb.models['S2-14-250-4-41'].sketches['__profile__']
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), edges=(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[6], ), line=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[23], sense=REVERSE)
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), edges=(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[7], ), line=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[25], sense=REVERSE)
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#4 ]', ), ), edges=(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[14], ), line=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[27], sense=REVERSE)
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8 ]', ), ), edges=(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[15], ), line=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[29], sense=REVERSE)
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#19 ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[23], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[9], CENTER))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8f ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[63], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[53], CENTER))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#100f ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[63], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[59], CENTER))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#31078 ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[103], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[37], CENTER))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#200480 ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[111], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[66])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1c ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[28], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[21])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#44800a ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[42], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[18])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#40f ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[33], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[24])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[281], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[128])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[310], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[143])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#b012088 ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[164], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[164], MIDDLE))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2e0208 ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[127], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[127], MIDDLE))
mdb.models['S2-14-250-4-41'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-14-250-4-41'].parts['plate'].generateMesh()
mdb.models['S2-14-250-4-41'].rootAssembly.Set(name='m_Set-1', vertices=
    mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=
    mdb.models['S2-14-250-4-41'].rootAssembly.sets['m_Set-1'], csys=None, 
    mpcType=BEAM_MPC, name='Constraint-1', surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #80400 #100100 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #10100000 #4000 #80000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #10008000 #4000 #0 #400000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #200000 #1 #0 #200001 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40d ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#405020 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#5012000 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#400c2 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-4-41'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].vertices[6])
mdb.models['S2-14-250-4-41'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-14-250-4-41'].rootAssembly.referencePoints[30], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-9', surface=Region(
    side1Faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#81000 #4100 #3000 #4 #0:5 #1 ]', ), )), u1=ON, u2=ON, u3=ON, ur1=
    ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-14-250-4-41'].ContactProperty('IntProp-1')
mdb.models['S2-14-250-4-41'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-14-250-4-41'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-14-250-4-41'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ))
mdb.models['S2-14-250-4-41'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#a48900 #20492490 #31500225 #4028c200 #40450231 #85124022 #9448002', 
    ' #248180 #2a8c2 #2 ]', ), ))
mdb.models['S2-14-250-4-41'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-14-250-4-41'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-14-250-4-41'].rootAssembly.surfaces['CP-1-plate-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['S2-14-250-4-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-4-41'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-14-250-4-41'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-4-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-4-41'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-14-250-4-41'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-4-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-4-41'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-14-250-4-41'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-4-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-4-41'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-14-250-4-41'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-4-41'].ConcentratedForce(cf1=22199, cf2=21961, cf3=28661, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-14-250-4-41'].rootAssembly.referencePoints[30], )))
mdb.models['S2-14-250-4-41'].Moment(cm1=5762000, cm2=3120000, cm3=30000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-14-250-4-41'].rootAssembly.referencePoints[30], )))
mdb.models['S2-14-250-4-41'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ), 
    edges=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:2 #ffffff ]', ), ), 
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff #1fffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-14-250-4-41', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-14-250-4-41-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-14-250-4-41'].rootAssembly.regenerate()
mdb.jobs['S2-14-250-4-41-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-14-250-4-41-1'].waitForCompletion()
del mdb.models['S2-14-250-4-41']
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-1')
mdb.models.changeKey(fromName='Model-1', toName='S2-14-250-4-41')
mdb.models['S2-14-250-4-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-14-250-4-41'].sketches['__profile__'].rectangle(point1=(-175.0, 
    -175.0), point2=(175.0, 175.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -117.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 133.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -117.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 133.0))
mdb.models['S2-14-250-4-41'].Part(dimensionality=THREE_D, name='plate', type=
    DEFORMABLE_BODY)
mdb.models['S2-14-250-4-41'].parts['plate'].BaseSolidExtrude(depth=14.0, 
    sketch=mdb.models['S2-14-250-4-41'].sketches['__profile__'])
del mdb.models['S2-14-250-4-41'].sketches['__profile__']
mdb.models['S2-14-250-4-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(0.0, 0.0), 
    point2=(14.0, 0.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'].geometry[2])
mdb.models['S2-14-250-4-41'].Part(dimensionality=THREE_D, name='T-beam', type=
    DEFORMABLE_BODY)
mdb.models['S2-14-250-4-41'].parts['T-beam'].BaseWire(sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'])
del mdb.models['S2-14-250-4-41'].sketches['__profile__']
mdb.models['S2-14-250-4-41'].ConstrainedSketch(name='__profile__', sheetSize=
    2000.0)
mdb.models['S2-14-250-4-41'].sketches['__profile__'].rectangle(point1=(-275.0, 
    -275.0), point2=(275.0, 275.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -117.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 133.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -117.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 133.0))
mdb.models['S2-14-250-4-41'].Part(dimensionality=THREE_D, name='plane', type=
    DEFORMABLE_BODY)
mdb.models['S2-14-250-4-41'].parts['plane'].BaseShell(sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'])
del mdb.models['S2-14-250-4-41'].sketches['__profile__']
mdb.models['S2-14-250-4-41'].Material(name='Q355')
mdb.models['S2-14-250-4-41'].materials['Q355'].Density(table=((7.8e-09, ), ))
mdb.models['S2-14-250-4-41'].materials['Q355'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-14-250-4-41'].Material(name='CrMoA')
mdb.models['S2-14-250-4-41'].materials['CrMoA'].Density(table=((7.8e-09, ), ))
mdb.models['S2-14-250-4-41'].materials['CrMoA'].Elastic(table=((206000.0, 0.3), 
    ))
mdb.models['S2-14-250-4-41'].Material(name='Rigid')
mdb.models['S2-14-250-4-41'].materials['Rigid'].Density(table=((7.8e-09, ), ))
mdb.models['S2-14-250-4-41'].materials['Rigid'].Elastic(table=((206000000.0, 
    0.3), ))
mdb.models['S2-14-250-4-41'].HomogeneousSolidSection(material='Q355', name=
    'Q355', thickness=None)
mdb.models['S2-14-250-4-41'].CircularProfile(name='M20', r=8.0)
mdb.models['S2-14-250-4-41'].BeamSection(consistentMassMatrix=False, 
    integration=DURING_ANALYSIS, material='CrMoA', name='CrMoA', poissonRatio=
    0.3, profile='M20', temperatureVar=LINEAR)
mdb.models['S2-14-250-4-41'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Rigid', name='Rigid', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=250.0, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['S2-14-250-4-41'].parts['T-beam'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    edges=mdb.models['S2-14-250-4-41'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='CrMoA', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-14-250-4-41'].parts['T-beam'].assignBeamSectionOrientation(
    method=N1_COSINES, n1=(0.0, 0.0, -1.0), region=Region(
    edges=mdb.models['S2-14-250-4-41'].parts['T-beam'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-4-41'].parts['plane'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['S2-14-250-4-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Rigid', thicknessAssignment=
    FROM_SECTION)
mdb.models['S2-14-250-4-41'].parts['plate'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Q355', thicknessAssignment=FROM_SECTION)
mdb.models['S2-14-250-4-41'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['S2-14-250-4-41'].rootAssembly.Instance(dependent=ON, name='plane-1'
    , part=mdb.models['S2-14-250-4-41'].parts['plane'])
mdb.models['S2-14-250-4-41'].rootAssembly.Instance(dependent=ON, name='plate-1'
    , part=mdb.models['S2-14-250-4-41'].parts['plate'])
mdb.models['S2-14-250-4-41'].rootAssembly.Instance(dependent=ON, name=
    'T-beam-1', part=mdb.models['S2-14-250-4-41'].parts['T-beam'])
mdb.models['S2-14-250-4-41'].rootAssembly.rotate(angle=90.0, axisDirection=(
    0.0, 10.0, 0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('T-beam-1', ))
mdb.models['S2-14-250-4-41'].rootAssembly.translate(instanceList=('T-beam-1', )
    , vector=(-125.0, 125.0, 14.0))
mdb.models['S2-14-250-4-41'].rootAssembly.LinearInstancePattern(direction1=(
    1.0, 0.0, 0.0), direction2=(0.0, -1.0, 0.0), instanceList=('T-beam-1', ), 
    number1=2, number2=2, spacing1=250.0, spacing2=250.0)
mdb.models['S2-14-250-4-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'contact', previous='Initial')
mdb.models['S2-14-250-4-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'boltload', previous='contact')
mdb.models['S2-14-250-4-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'fix', previous='boltload')
mdb.models['S2-14-250-4-41'].StaticStep(initialInc=0.1, maxNumInc=10000, name=
    'load', previous='fix')
mdb.models['S2-14-250-4-41'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'E', 'PE', 'PEEQ', 'U', 'STATUS'))
mdb.models['S2-14-250-4-41'].parts['T-beam'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.5)
mdb.models['S2-14-250-4-41'].parts['T-beam'].generateMesh()
mdb.models['S2-14-250-4-41'].ConstrainedSketch(gridSpacing=38.89, name=
    '__profile__', sheetSize=1555.63, transform=
    mdb.models['S2-14-250-4-41'].parts['plane'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-14-250-4-41'].parts['plane'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-14-250-4-41'].parts['plane'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 0.0)))
mdb.models['S2-14-250-4-41'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'])
mdb.models['S2-14-250-4-41'].parts['plane'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'])
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -112.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 138.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -112.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 138.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(-275.0, 
    -125.0), point2=(275.0, -125.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(-275.0, 0.0), 
    point2=(275.0, 0.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(-275.0, 
    125.0), point2=(275.0, 125.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(-125.0, 
    -275.0), point2=(-125.0, 275.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(0.0, -275.0), 
    point2=(0.0, 275.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].Line(point1=(125.0, 
    -275.0), point2=(125.0, 275.0))
mdb.models['S2-14-250-4-41'].parts['plane'].PartitionFaceBySketch(faces=
    mdb.models['S2-14-250-4-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-14-250-4-41'].parts['plane'].edges[7])
mdb.models['S2-14-250-4-41'].parts['plane'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['S2-14-250-4-41'].parts['plane'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ))
mdb.models['S2-14-250-4-41'].parts['plane'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=14.0)
mdb.models['S2-14-250-4-41'].parts['plane'].generateMesh()
mdb.models['S2-14-250-4-41'].ConstrainedSketch(gridSpacing=24.76, name=
    '__profile__', sheetSize=990.67, transform=
    mdb.models['S2-14-250-4-41'].parts['plate'].MakeSketchTransform(
    sketchPlane=mdb.models['S2-14-250-4-41'].parts['plate'].faces[8], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['S2-14-250-4-41'].parts['plate'].edges[7], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 19.0)))
mdb.models['S2-14-250-4-41'].parts['plate'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'])
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, -125.0), point1=(-125.0, -112.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(-125.0, 125.0), point1=(-125.0, 138.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, -125.0), point1=(125.0, -112.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(125.0, 125.0), point1=(125.0, 138.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].rectangle(point1=(-70.0, 
    -70.0), point2=(70.0, 70.0))
mdb.models['S2-14-250-4-41'].sketches['__profile__'].rectangle(point1=(-62.0, 
    -62.0), point2=(62.0, 62.0))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionFaceBySketch(faces=
    mdb.models['S2-14-250-4-41'].parts['plate'].faces.getSequenceFromMask(
    mask=('[#100 ]', ), ), sketch=
    mdb.models['S2-14-250-4-41'].sketches['__profile__'], sketchUpEdge=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[7])
del mdb.models['S2-14-250-4-41'].sketches['__profile__']
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), edges=(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[6], ), line=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[23], sense=REVERSE)
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), edges=(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[7], ), line=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[25], sense=REVERSE)
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#4 ]', ), ), edges=(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[14], ), line=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[27], sense=REVERSE)
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByExtrudeEdge(cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8 ]', ), ), edges=(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[15], ), line=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[29], sense=REVERSE)
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#19 ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[23], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[9], CENTER))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#8f ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[63], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[53], CENTER))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#100f ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[63], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[59], CENTER))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#31078 ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[103], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[37], CENTER))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#200480 ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[111], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[66])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#1c ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[28], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[21])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#44800a ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[42], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[18])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#40f ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[33], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[24])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[281], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[128])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#20f ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[310], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].vertices[143])
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#b012088 ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[164], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[164], MIDDLE))
mdb.models['S2-14-250-4-41'].parts['plate'].PartitionCellByPlanePointNormal(
    cells=
    mdb.models['S2-14-250-4-41'].parts['plate'].cells.getSequenceFromMask(
    mask=('[#2e0208 ]', ), ), normal=
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[127], point=
    mdb.models['S2-14-250-4-41'].parts['plate'].InterestingPoint(
    mdb.models['S2-14-250-4-41'].parts['plate'].edges[127], MIDDLE))
mdb.models['S2-14-250-4-41'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=3.5)
mdb.models['S2-14-250-4-41'].parts['plate'].generateMesh()
mdb.models['S2-14-250-4-41'].rootAssembly.Set(name='m_Set-1', vertices=
    mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=
    mdb.models['S2-14-250-4-41'].rootAssembly.sets['m_Set-1'], csys=None, 
    mpcType=BEAM_MPC, name='Constraint-1', surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:7 #80400 #100100 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:6 #10100000 #4000 #80000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #10008000 #4000 #0 #400000 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0:5 #200000 #1 #0 #200001 ]', ), )), userMode=DOF_MODE_MPC, 
    userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40d ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#405020 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#5012000 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-4-41'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#400c2 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-14-250-4-41'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].vertices[6])
mdb.models['S2-14-250-4-41'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-14-250-4-41'].rootAssembly.referencePoints[30], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-9', surface=Region(
    side1Faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#81000 #4100 #3000 #4 #0:5 #1 ]', ), )), u1=ON, u2=ON, u3=ON, ur1=
    ON, ur2=ON, ur3=ON, weightingMethod=UNIFORM)
mdb.models['S2-14-250-4-41'].ContactProperty('IntProp-1')
mdb.models['S2-14-250-4-41'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['S2-14-250-4-41'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['S2-14-250-4-41'].rootAssembly.Surface(name='CP-1-plane-1', 
    side1Faces=
    mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ))
mdb.models['S2-14-250-4-41'].rootAssembly.Surface(name='CP-1-plate-1', 
    side1Faces=
    mdb.models['S2-14-250-4-41'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=(
    '[#a48900 #20492490 #31500225 #4028c200 #40450231 #85124022 #9448002', 
    ' #248180 #2a8c2 #2 ]', ), ))
mdb.models['S2-14-250-4-41'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-14-250-4-41'].rootAssembly.surfaces['CP-1-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-14-250-4-41'].rootAssembly.surfaces['CP-1-plate-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['S2-14-250-4-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload1', region=Region(
    end1Edges=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-4-41'].loads['boltload1'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-14-250-4-41'].loads['boltload1'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-4-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload2', region=Region(
    end1Edges=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-1-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-4-41'].loads['boltload2'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-14-250-4-41'].loads['boltload2'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-4-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload3', region=Region(
    end1Edges=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-4-41'].loads['boltload3'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-14-250-4-41'].loads['boltload3'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-4-41'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'contact', magnitude=80.0, name='boltload4', region=Region(
    end1Edges=mdb.models['S2-14-250-4-41'].rootAssembly.instances['T-beam-1-lin-2-2'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.models['S2-14-250-4-41'].loads['boltload4'].setValuesInStep(boltMethod=
    APPLY_FORCE, magnitude=56250.0, stepName='boltload')
mdb.models['S2-14-250-4-41'].loads['boltload4'].setValuesInStep(boltMethod=
    FIX_LENGTH, stepName='fix')
mdb.models['S2-14-250-4-41'].ConcentratedForce(cf1=22199, cf2=21961, cf3=28661, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-1', region=Region(referencePoints=(
    mdb.models['S2-14-250-4-41'].rootAssembly.referencePoints[30], )))
mdb.models['S2-14-250-4-41'].Moment(cm1=5762000, cm2=3120000, cm3=30000, 
    createStepName='load', distributionType=UNIFORM, field='', localCsys=None, 
    name='Load-2', region=Region(referencePoints=(
    mdb.models['S2-14-250-4-41'].rootAssembly.referencePoints[30], )))
mdb.models['S2-14-250-4-41'].DisplacementBC(amplitude=UNSET, createStepName=
    'Initial', distributionType=UNIFORM, fieldName='', localCsys=None, name=
    'BC-1', region=Region(
    faces=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff ]', ), ), 
    edges=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:2 #ffffff ]', ), ), 
    vertices=mdb.models['S2-14-250-4-41'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff #1fffff ]', ), )), u1=SET, u2=SET, u3=SET, ur1=SET, ur2=
    SET, ur3=SET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='S2-14-250-4-41', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='S2-14-250-4-41-1', nodalOutputPrecision=
    SINGLE, numCpus=8, numDomains=8, numGPUs=0, numThreadsPerMpiProcess=1, 
    queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine=''
    , waitHours=0, waitMinutes=0)
mdb.models['S2-14-250-4-41'].rootAssembly.regenerate()
mdb.jobs['S2-14-250-4-41-1'].submit(consistencyChecking=OFF)
mdb.jobs['S2-14-250-4-41-1'].waitForCompletion()
mdb.Model(name='S2-14-250-4-41-2', objectToCopy=mdb.models['S2-14-250-4-41'])
mdb.models['S2-14-250-4-41-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-14-250-4-41-2'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-14-250-4-41-2'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-4-41-2'].sketches['__edit__'], upToFeature=
    mdb.models['S2-14-250-4-41-2'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-14-250-4-41-2'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=16.0, vertex1=
    mdb.models['S2-14-250-4-41-2'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-14-250-4-41-2'].sketches['__edit__'].vertices[1])
mdb.models['S2-14-250-4-41-2'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-14-250-4-41-2'].sketches['__edit__'])
del mdb.models['S2-14-250-4-41-2'].sketches['__edit__']
mdb.models['S2-14-250-4-41-2'].parts['T-beam'].regenerate()
mdb.models['S2-14-250-4-41-2'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=16.0)
mdb.models['S2-14-250-4-41-2'].parts['plate'].regenerate()
mdb.models['S2-14-250-4-41-2'].parts['plate'].deleteMesh()
mdb.models['S2-14-250-4-41-2'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.0)
mdb.models['S2-14-250-4-41-2'].parts['plate'].generateMesh()
mdb.models['S2-14-250-4-41-2'].parts['T-beam'].generateMesh()
mdb.models['S2-14-250-4-41-2'].rootAssembly.regenerate()
mdb.Job(name='S2-14-250-4-41-2', objectToCopy=mdb.jobs['S2-14-250-4-41-1'])
mdb.jobs['S2-14-250-4-41-2'].setValues(model='S2-14-250-4-41-2')
mdb.jobs['S2-14-250-4-41-2'].submit(consistencyChecking=OFF)
mdb.jobs['S2-14-250-4-41-2'].waitForCompletion()
mdb.Model(name='S2-14-250-4-41-3', objectToCopy=mdb.models['S2-14-250-4-41'])
mdb.models['S2-14-250-4-41-3'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-14-250-4-41-3'].parts['T-beam'].features['Wire-1'].sketch)
mdb.models['S2-14-250-4-41-3'].parts['T-beam'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-14-250-4-41-3'].sketches['__edit__'], upToFeature=
    mdb.models['S2-14-250-4-41-3'].parts['T-beam'].features['Wire-1'])
mdb.models['S2-14-250-4-41-3'].sketches['__edit__'].ObliqueDimension(textPoint=
    (10.7996292114258, -2.39205169677734), value=18.0, vertex1=
    mdb.models['S2-14-250-4-41-3'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['S2-14-250-4-41-3'].sketches['__edit__'].vertices[1])
mdb.models['S2-14-250-4-41-3'].parts['T-beam'].features['Wire-1'].setValues(
    sketch=mdb.models['S2-14-250-4-41-3'].sketches['__edit__'])
del mdb.models['S2-14-250-4-41-3'].sketches['__edit__']
mdb.models['S2-14-250-4-41-3'].parts['T-beam'].regenerate()
mdb.models['S2-14-250-4-41-3'].parts['plate'].features['Solid extrude-1'].setValues(
    depth=18.0)
mdb.models['S2-14-250-4-41-3'].parts['plate'].regenerate()
mdb.models['S2-14-250-4-41-3'].parts['plate'].deleteMesh()
mdb.models['S2-14-250-4-41-3'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=4.5)
mdb.models['S2-14-250-4-41-3'].parts['plate'].generateMesh()
mdb.models['S2-14-250-4-41-3'].parts['T-beam'].generateMesh()
mdb.models['S2-14-250-4-41-3'].rootAssembly.regenerate()
mdb.Job(name='S2-14-250-4-41-3', objectToCopy=mdb.jobs['S2-14-250-4-41-2'])
mdb.jobs['S2-14-250-4-41-3'].setValues(model='S2-14-250-4-41-3')
mdb.jobs['S2-14-250-4-41-3'].submit(consistencyChecking=OFF)
mdb.jobs['S2-14-250-4-41-3'].waitForCompletion()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['S2-1-250-8-64'].parts['plate'].deleteMesh(regions=
    mdb.models['S2-1-250-8-64'].parts['plate'].cells.getSequenceFromMask((
    '[#ffffffff:2 #ffff ]', ), ))
mdb.models['S2-1-250-8-64'].parts['plate'].setMeshControls(algorithm=
    MEDIAL_AXIS, regions=
    mdb.models['S2-1-250-8-64'].parts['plate'].cells.getSequenceFromMask((
    '[#ffffffff:2 #ffff ]', ), ), technique=SWEEP)
mdb.models['S2-1-250-8-64'].parts['plate'].generateMesh()
mdb.models['S2-1-250-8-64'].rootAssembly.regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['S2-2-450-8-64']
del mdb.models['S2-2-450-8-64-2']
del mdb.models['S2-2-450-8-64-3']
del mdb.models['S2-2-450-8-64-4']
del mdb.models['S2-2-450-8-64-5']
del mdb.models['S2-2-450-8-64-6']
del mdb.models['S2-2-450-8-64-7']
del mdb.models['S2-2-450-8-64-8']
del mdb.models['S2-3-450-8-64']
del mdb.models['S2-3-450-8-64-2']
del mdb.models['S2-3-450-8-64-3']
del mdb.models['S2-3-550-8-64']
del mdb.models['S2-3-550-8-64-2']
del mdb.models['S2-3-550-8-64-3']
del mdb.models['S2-3-550-8-64-4']
del mdb.models['S2-4-550-8-64']
del mdb.models['S2-4-550-8-64-2']
del mdb.models['S2-4-550-8-64-3']
del mdb.models['S2-5-550-8-64']
del mdb.models['S2-5-550-8-64-2']
del mdb.models['S2-6-450-8-64']
del mdb.models['S2-6-450-8-64-2']
del mdb.models['S2-7-450-8-64']
del mdb.models['S2-7-550-8-64']
del mdb.models['S2-7-550-8-64-2']
del mdb.models['S2-14-250-4-41']
del mdb.models['S2-14-250-4-41-2']
del mdb.models['S2-14-250-4-41-3']
del mdb.models['S2-14-250-8-38']
del mdb.models['S2-14-250-8-38-2']
del mdb.models['S2-7-550-8-64-3']
del mdb.models['S2-8-550-8-64']
del mdb.models['S2-8-550-8-64-2']
del mdb.models['S2-8-550-8-64-3']
del mdb.models['S2-8-550-8-64-4']
del mdb.models['S2-8-550-8-64-5']
del mdb.models['S2-9-250-6-64']
del mdb.models['S2-9-250-6-64-2']
del mdb.models['S2-9-250-8-53']
del mdb.models['S2-10-250-6-53']
del mdb.models['S2-10-250-6-53-2']
del mdb.models['S2-10-250-8-41']
del mdb.models['S2-11-250-8-64']
del mdb.models['S2-11-250-8-64-2']
del mdb.models['S2-11-250-8-64-3']
del mdb.models['S2-11-250-8-64-4']
del mdb.models['S2-11-450-4-64']
del mdb.models['S2-11-450-4-64-2']
del mdb.models['S2-11-450-4-64-3']
del mdb.models['S2-11-450-4-64-4']
del mdb.models['S2-11-450-4-64-5']
del mdb.models['S2-11-450-4-64-6']
del mdb.models['S2-12-550-8-64']
del mdb.models['S2-12-550-8-64-2']
del mdb.models['S2-12-550-8-64-3']
del mdb.models['S2-12-550-8-64-4']
del mdb.models['S2-12-550-8-64-5']
del mdb.models['S2-13-250-8-64']
del mdb.models['S2-13-250-8-64-2']
del mdb.models['S2-13-250-8-64-3']
del mdb.models['S2-1-250-8-64']
del mdb.models['S2-1-250-8-64-2']
del mdb.models['S2-1-250-8-64-3']
del mdb.models['S2-1-250-8-64-4']
# Save by Wangkaiyu on 2024_07_11-16.47.36; build 2022 2021_09_16-01.57.30 176069
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['S2-1-250-8-64-5'].parts['plate'].deleteMesh()
mdb.models['S2-1-250-8-64-5'].parts['plate'].deleteSeeds()
mdb.models['S2-1-250-8-64-5'].parts['plate'].deleteFeatures((
    'Partition cell-10', 'Partition cell-11', 'Partition cell-12', 
    'Partition cell-13', 'Partition cell-14', 'Partition cell-15', 
    'Partition cell-16', 'Partition cell-17', 'Partition cell-18', 
    'Partition cell-19', 'Partition cell-20'))
del mdb.models['S2-1-250-8-64-5'].parts['plate'].features['Partition cell-9']
mdb.models['S2-1-250-8-64-5'].parts['plate'].deleteFeatures((
    'Partition cell-1', 'Partition cell-2', 'Partition cell-3', 
    'Partition cell-4', 'Partition cell-5', 'Partition cell-6', 
    'Partition cell-7', 'Partition cell-8'))
mdb.models['S2-1-250-8-64-5'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-1-250-8-64-5'].parts['plate'].features['Partition face-1'].sketch)
mdb.models['S2-1-250-8-64-5'].parts['plate'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'], upToFeature=
    mdb.models['S2-1-250-8-64-5'].parts['plate'].features['Partition face-1'])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].Line(point1=(-125.0, 125.0), 
    point2=(125.0, 125.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[42])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].delete(objectList=(
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[42], ))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].ConstructionLine(point1=(
    -125.0, 125.0), point2=(125.0, 125.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[43])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[12], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[43])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[18], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[43])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].ConstructionLine(point1=(
    125.0, 125.0), point2=(125.0, 0.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[44])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[18], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[44])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[4], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[44])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].Line(point1=(-175.0, 125.0), 
    point2=(175.0, 125.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[45])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[30], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[45])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[40], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[30])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[41], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[32])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].ConstructionLine(point1=(
    125.0, -125.0), point2=(0.0, -125.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[46])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[6], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[46])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[10], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[46])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].ConstructionLine(point1=(
    -125.0, -125.0), point2=(-125.0, 0.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[47])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[16], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[47])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[14], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[47])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].ConstructionLine(point1=(
    -60.0, 60.0), point2=(60.0, 60.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[48])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[29], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[48])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[30], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[48])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].ConstructionLine(point1=(
    60.0, 60.0), point2=(60.0, -60.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[49])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[30], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[49])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[31], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[49])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].ConstructionLine(point1=(
    60.0, -60.0), point2=(-60.0, -60.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[50])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[31], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[50])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[28], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[50])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].ConstructionLine(point1=(
    -60.0, -60.0), point2=(-60.0, 60.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[51])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[28], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[51])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[29], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[51])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].Line(point1=(125.0, 175.0), 
    point2=(125.0, -175.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[52])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[31], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[52])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[42], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[31])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[43], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[33])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].Line(point1=(175.0, -125.0), 
    point2=(-175.0, -125.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[53])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[32], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[53])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[44], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[32])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[45], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[30])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].Line(point1=(-125.0, -175.0)
    , point2=(-125.0, 175.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[54])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[33], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[54])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[46], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[33])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[47], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[31])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].Line(point1=(-175.0, 60.0), 
    point2=(175.0, 60.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[55])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[30], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[55])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[48], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[30])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[49], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[32])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].Line(point1=(175.0, -60.0), 
    point2=(-175.0, -60.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[56])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[32], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[56])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[50], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[32])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[51], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[30])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].Line(point1=(-60.0, -175.0), 
    point2=(-60.0, 175.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[57])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[33], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[57])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[52], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[33])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[53], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[31])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].Line(point1=(60.0, 175.0), 
    point2=(60.0, -175.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[58])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[31], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[58])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[54], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[31])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[55], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[33])
mdb.models['S2-1-250-8-64-5'].parts['plate'].features['Partition face-1'].setValues(
    sketch=mdb.models['S2-1-250-8-64-5'].sketches['__edit__'])
del mdb.models['S2-1-250-8-64-5'].sketches['__edit__']
mdb.models['S2-1-250-8-64-5'].parts['plate'].regenerate()
mdb.models['S2-1-250-8-64-5'].parts['plate'].setMeshControls(algorithm=
    MEDIAL_AXIS, regions=
    mdb.models['S2-1-250-8-64-5'].parts['plate'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['S2-1-250-8-64-5'].parts['plate'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.5)
mdb.models['S2-1-250-8-64-5'].parts['plate'].generateMesh()
mdb.models['S2-1-250-8-64-5'].parts['plate'].deleteMesh(regions=
    mdb.models['S2-1-250-8-64-5'].parts['plate'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['S2-1-250-8-64-5'].parts['plate'].setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['S2-1-250-8-64-5'].parts['plate'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['S2-1-250-8-64-5'].parts['plate'].generateMesh()
mdb.models['S2-1-250-8-64-5'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['S2-1-250-8-64-5'].parts['plate'].features['Partition face-1'].sketch)
mdb.models['S2-1-250-8-64-5'].parts['plate'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'], upToFeature=
    mdb.models['S2-1-250-8-64-5'].parts['plate'].features['Partition face-1'])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].ConstructionLine(point1=(
    0.0, 125.0), point2=(0.0, -109.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[59])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[8], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[59])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[23], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[59])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].ConstructionLine(point1=(
    -125.0, 0.0), point2=(125.0, 0.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[60])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[14], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[60])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[4], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[60])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].Line(point1=(0.0, 175.0), 
    point2=(0.0, -175.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[61])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[31], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[61])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[56], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[31])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[37], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[38], midpoint=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[56])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[57], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[33])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[39], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[36], midpoint=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[57])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].Line(point1=(-175.0, 0.0), 
    point2=(175.0, 0.0))
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[62])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[30], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[62])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[58], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[30])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[36], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[37], midpoint=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[58])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[59], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].geometry[32])
mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].EqualDistanceConstraint(
    addUndoState=False, entity1=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[38], entity2=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[39], midpoint=
    mdb.models['S2-1-250-8-64-5'].sketches['__edit__'].vertices[59])
mdb.models['S2-1-250-8-64-5'].parts['plate'].features['Partition face-1'].setValues(
    sketch=mdb.models['S2-1-250-8-64-5'].sketches['__edit__'])
del mdb.models['S2-1-250-8-64-5'].sketches['__edit__']
mdb.models['S2-1-250-8-64-5'].parts['plate'].regenerate()
mdb.models['S2-1-250-8-64-5'].parts['plate'].generateMesh()
mdb.models['S2-1-250-8-64-5'].parts['plate'].deleteMesh(regions=
    mdb.models['S2-1-250-8-64-5'].parts['plate'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['S2-1-250-8-64-5'].parts['plate'].setMeshControls(algorithm=
    MEDIAL_AXIS, regions=
    mdb.models['S2-1-250-8-64-5'].parts['plate'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['S2-1-250-8-64-5'].parts['plate'].generateMesh()
mdb.models['S2-1-250-8-64-5'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
del mdb.models['S2-1-250-8-64-5'].interactions['CP-1-plane-1-plate-1']
mdb.models['S2-1-250-8-64-5'].constraints.delete(('Constraint-1', 
    'Constraint-2', 'Constraint-3', 'Constraint-4', 'Constraint-5', 
    'Constraint-6', 'Constraint-7', 'Constraint-8', 'Constraint-9', 
    'Constraint-10', 'Constraint-11', 'Constraint-12', 'Constraint-13', 
    'Constraint-14', 'Constraint-15', 'Constraint-16', 'Constraint-17'))
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-1', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#30020000 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-2', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #20300400 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-3', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #800000 #43 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-4', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#80000000 #2003000 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-5', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#c0200 #2 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-6', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#400c10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-7', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#47 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#1 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-8', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#400c080 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-9', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#3000100 #200 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-2-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-10', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#18000200 #800 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-3-1'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-11', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#40000c02 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-3-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-12', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#6004 #1 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-3-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-13', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#10029 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-2-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-14', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#60010 #4 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-1-3'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-15', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#300080 #10 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
mdb.models['S2-1-250-8-64-5'].MultipointConstraint(controlPoint=Region(
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['T-beam-1-lin-1-2'].vertices.getSequenceFromMask(
    mask=('[#2 ]', ), )), csys=None, mpcType=BEAM_MPC, name='Constraint-16', 
    surface=Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#800000 #40c0 ]', ), )), userMode=DOF_MODE_MPC, userType=0)
del mdb.models['S2-1-250-8-64-5'].rootAssembly.features['RP-1']
mdb.models['S2-1-250-8-64-5'].rootAssembly.ReferencePoint(point=
    mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plate-1'].vertices[54])
mdb.models['S2-1-250-8-64-5'].Coupling(controlPoint=Region(referencePoints=(
    mdb.models['S2-1-250-8-64-5'].rootAssembly.referencePoints[104], )), 
    couplingType=STRUCTURAL, influenceRadius=WHOLE_SURFACE, localCsys=None, 
    name='Constraint-17', surface=Region(
    side1Faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    mask=('[#0 #8050040 ]', ), )), u1=ON, u2=ON, u3=ON, ur1=ON, ur2=ON, ur3=ON, 
    weightingMethod=UNIFORM)
mdb.models['S2-1-250-8-64-5'].loads['Load-1'].setValues(distributionType=
    UNIFORM, field='', region=Region(referencePoints=(
    mdb.models['S2-1-250-8-64-5'].rootAssembly.referencePoints[104], )))
mdb.models['S2-1-250-8-64-5'].loads['Load-2'].setValues(distributionType=
    UNIFORM, field='', region=Region(referencePoints=(
    mdb.models['S2-1-250-8-64-5'].rootAssembly.referencePoints[104], )))
mdb.models['S2-1-250-8-64-5'].boundaryConditions['BC-1'].setValues(region=
    Region(
    faces=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), ), 
    edges=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff ]', ), ), 
    vertices=mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff:2 #1ffff ]', ), )))
del mdb.jobs['S2-2-450-8-64-1']
del mdb.jobs['S2-2-450-8-64-2']
del mdb.jobs['S2-2-450-8-64-3']
del mdb.jobs['S2-2-450-8-64-4']
del mdb.jobs['S2-2-450-8-64-5']
del mdb.jobs['S2-2-450-8-64-6']
del mdb.jobs['S2-2-450-8-64-7']
del mdb.jobs['S2-2-450-8-64-8']
del mdb.jobs['S2-3-450-8-64-1']
del mdb.jobs['S2-3-450-8-64-2']
del mdb.jobs['S2-3-450-8-64-3']
del mdb.jobs['S2-3-550-8-64-1']
del mdb.jobs['S2-3-550-8-64-2']
del mdb.jobs['S2-3-550-8-64-3']
del mdb.jobs['S2-3-550-8-64-4']
del mdb.jobs['S2-4-550-8-64-1']
del mdb.jobs['S2-4-550-8-64-2']
del mdb.jobs['S2-4-550-8-64-3']
del mdb.jobs['S2-5-550-8-64-1']
del mdb.jobs['S2-5-550-8-64-2']
del mdb.jobs['S2-6-450-8-64-1']
del mdb.jobs['S2-6-450-8-64-2']
del mdb.jobs['S2-7-450-8-64-1']
del mdb.jobs['S2-7-550-8-64-1']
del mdb.jobs['S2-7-550-8-64-2']
del mdb.jobs['S2-7-550-8-64-3']
del mdb.jobs['S2-8-550-8-64-1']
del mdb.jobs['S2-8-550-8-64-2']
del mdb.jobs['S2-8-550-8-64-3']
del mdb.jobs['S2-8-550-8-64-4']
del mdb.jobs['S2-8-550-8-64-5']
del mdb.jobs['S2-9-250-6-64-1']
del mdb.jobs['S2-9-250-6-64-2']
del mdb.jobs['S2-9-250-8-53-1']
del mdb.jobs['S2-10-250-6-53-1']
del mdb.jobs['S2-10-250-6-53-2']
del mdb.jobs['S2-10-250-8-41-1']
del mdb.jobs['S2-10-250-8-41-2']
del mdb.jobs['S2-11-250-8-64-1']
del mdb.jobs['S2-11-250-8-64-2']
del mdb.jobs['S2-11-250-8-64-3']
del mdb.jobs['S2-11-250-8-64-4']
del mdb.jobs['S2-11-450-4-64-1']
del mdb.jobs['S2-11-450-4-64-2']
del mdb.jobs['S2-11-450-4-64-3']
del mdb.jobs['S2-11-450-4-64-4']
del mdb.jobs['S2-11-450-4-64-5']
del mdb.jobs['S2-11-450-4-64-6']
del mdb.jobs['S2-12-550-8-64-1']
del mdb.jobs['S2-12-550-8-64-2']
del mdb.jobs['S2-12-550-8-64-3']
del mdb.jobs['S2-12-550-8-64-4']
del mdb.jobs['S2-12-550-8-64-5']
del mdb.jobs['S2-13-250-8-64-1']
del mdb.jobs['S2-13-250-8-64-2']
del mdb.jobs['S2-13-250-8-64-3']
del mdb.jobs['S2-14-250-4-41-1']
del mdb.jobs['S2-14-250-4-41-2']
del mdb.jobs['S2-14-250-4-41-3']
del mdb.jobs['S2-14-250-8-38-1']
del mdb.jobs['S2-14-250-8-38-2']
del mdb.jobs['S2-1-250-8-64-1']
del mdb.jobs['S2-1-250-8-64-2']
del mdb.jobs['S2-1-250-8-64-3']
del mdb.jobs['S2-1-250-8-64-4']
mdb.jobs['S2-1-250-8-64-5'].submit(consistencyChecking=OFF)
mdb.jobs['S2-1-250-8-64-5'].setValues(numCpus=4, numDomains=4, 
    numThreadsPerMpiProcess=1)
mdb.jobs['S2-1-250-8-64-5'].submit(consistencyChecking=OFF)
mdb.jobs['S2-1-250-8-64-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-CQQLBI3', 'handle': 0, 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  S2-1-250-8-64-5.dat file for possible error messages if the file exists.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  S2-1-250-8-64-5.dat file for possible error messages if the file exists.', 
    'jobName': 'S2-1-250-8-64-5'})
# Save by Wangkaiyu on 2024_07_12-09.26.54; build 2022 2021_09_16-01.57.30 176069
from part import *
from material import *
from section import *
from optimization import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['S2-1-250-8-64-5'].submit(consistencyChecking=OFF)
mdb.jobs['S2-1-250-8-64-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MS-RHMIWUFDWSIP', 'handle': 0, 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DISTRIBUTED COUPLING DEFINITION WITH COUPLING=STRUCTURAL WILL IGNORE THE STRUCTURAL COUPLING AS AT LEAST SOME OF THE NODES IN THE CLOUD DO NOT HAVE ALL THREE ROTATIONAL DEGREES OF FREEDOM ACTIVE', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A 3D DISTRIBUTED COUPLING DEFINITION WITH ROTATIONAL COUPLING=STRUCTURAL WILL IGNORE THE STRUCTURAL ROTATIONAL COUPLING AS ALL OF NODES IN THE CLOUD ARE FROM ELEMENTS WHICH DO NOT HAVE ALL ROTATIONAL DEGREES OF FREEDOM ACTIVE', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THERE ARE 10254 BOUNDARY CONDITIONS SPECIFIED IN THIS MODEL. OVERCONSTRAINT CHECKS FOR BOUNDARY CONDITIONS SPECIFIED ON SECONDARY NODES OF RIGID BODIES, OF *TIE OPTIONS, OR OF *COUPLING OPTIONS REQUIRE 4 MB OF MEMORY. IF THIS IS A PROBLEM, PLEASE TURN OFF OVERCONSTRAINT CHECKS USING *CONSTRAINT CONTROLS, NO CHECKS or INCREASE THE MEMORY USED BY THE PRE-PROCESSOR.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THERE ARE 20516 BOUNDARY CONDITIONS SPECIFIED IN THIS MODEL. OVERCONSTRAINT CHECKS FOR BOUNDARY CONDITIONS SPECIFIED ON SECONDARY NODES OF RIGID BODIES, OF *TIE OPTIONS, OR OF *COUPLING OPTIONS REQUIRE 8 MB OF MEMORY. IF THIS IS A PROBLEM, PLEASE TURN OFF OVERCONSTRAINT CHECKS USING *CONSTRAINT CONTROLS, NO CHECKS or INCREASE THE MEMORY USED BY THE PRE-PROCESSOR.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THERE ARE 20516 BOUNDARY CONDITIONS SPECIFIED IN THIS MODEL. OVERCONSTRAINT CHECKS FOR BOUNDARY CONDITIONS SPECIFIED ON SECONDARY NODES OF RIGID BODIES, OF *TIE OPTIONS, OR OF *COUPLING OPTIONS REQUIRE 8 MB OF MEMORY. IF THIS IS A PROBLEM, PLEASE TURN OFF OVERCONSTRAINT CHECKS USING *CONSTRAINT CONTROLS, NO CHECKS or INCREASE THE MEMORY USED BY THE PRE-PROCESSOR.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THERE ARE 10262 BOUNDARY CONDITIONS SPECIFIED IN THIS MODEL. OVERCONSTRAINT CHECKS FOR BOUNDARY CONDITIONS SPECIFIED ON SECONDARY NODES OF RIGID BODIES, OF *TIE OPTIONS, OR OF *COUPLING OPTIONS REQUIRE 4 MB OF MEMORY. IF THIS IS A PROBLEM, PLEASE TURN OFF OVERCONSTRAINT CHECKS USING *CONSTRAINT CONTROLS, NO CHECKS or INCREASE THE MEMORY USED BY THE PRE-PROCESSOR.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\Abaqus2022\\Work\\S2\\example\\S2-1-250-8-64-5.odb', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MS-RHMIWUFDWSIP', 'handle': 22384, 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'S2-1-250-8-64-5', 'memory': 371.0})
mdb.jobs['S2-1-250-8-64-5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16310.0, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(MINIMUM_MEMORY, {'minimum_memory': 66.0, 
    'phase': STANDARD_PHASE, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.025, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 3U', 'timeIncrement': 0.00625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 4U', 'timeIncrement': 0.0015625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node PLATE-1.7 D.O.F. 3 ratio = 2.32094E+12.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 5U', 'timeIncrement': 0.000390625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['S2-1-250-8-64-5']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.models['S2-1-250-8-64-5'].rootAssembly.Surface(name='CP-2-plane-1', 
    side1Faces=
    mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plane-1'].faces.getSequenceFromMask(
    ('[#ffffffff #ffff ]', ), ))
mdb.models['S2-1-250-8-64-5'].rootAssembly.Surface(name='CP-2-plate-1', 
    side1Faces=
    mdb.models['S2-1-250-8-64-5'].rootAssembly.instances['plate-1'].faces.getSequenceFromMask(
    ('[#0:2 #100000 ]', ), ))
mdb.models['S2-1-250-8-64-5'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', main=
    mdb.models['S2-1-250-8-64-5'].rootAssembly.surfaces['CP-2-plane-1'], name=
    'CP-1-plane-1-plate-1', secondary=
    mdb.models['S2-1-250-8-64-5'].rootAssembly.surfaces['CP-2-plate-1'], 
    sliding=FINITE, surfaceSmoothing=AUTOMATIC)
mdb.jobs['S2-1-250-8-64-5'].submit(consistencyChecking=OFF)
mdb.jobs['S2-1-250-8-64-5']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MS-RHMIWUFDWSIP', 'handle': 0, 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A DISTRIBUTED COUPLING DEFINITION WITH COUPLING=STRUCTURAL WILL IGNORE THE STRUCTURAL COUPLING AS AT LEAST SOME OF THE NODES IN THE CLOUD DO NOT HAVE ALL THREE ROTATIONAL DEGREES OF FREEDOM ACTIVE', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'A 3D DISTRIBUTED COUPLING DEFINITION WITH ROTATIONAL COUPLING=STRUCTURAL WILL IGNORE THE STRUCTURAL ROTATIONAL COUPLING AS ALL OF NODES IN THE CLOUD ARE FROM ELEMENTS WHICH DO NOT HAVE ALL ROTATIONAL DEGREES OF FREEDOM ACTIVE', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THERE ARE 10254 BOUNDARY CONDITIONS SPECIFIED IN THIS MODEL. OVERCONSTRAINT CHECKS FOR BOUNDARY CONDITIONS SPECIFIED ON SECONDARY NODES OF RIGID BODIES, OF *TIE OPTIONS, OR OF *COUPLING OPTIONS REQUIRE 4 MB OF MEMORY. IF THIS IS A PROBLEM, PLEASE TURN OFF OVERCONSTRAINT CHECKS USING *CONSTRAINT CONTROLS, NO CHECKS or INCREASE THE MEMORY USED BY THE PRE-PROCESSOR.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THERE ARE 20516 BOUNDARY CONDITIONS SPECIFIED IN THIS MODEL. OVERCONSTRAINT CHECKS FOR BOUNDARY CONDITIONS SPECIFIED ON SECONDARY NODES OF RIGID BODIES, OF *TIE OPTIONS, OR OF *COUPLING OPTIONS REQUIRE 8 MB OF MEMORY. IF THIS IS A PROBLEM, PLEASE TURN OFF OVERCONSTRAINT CHECKS USING *CONSTRAINT CONTROLS, NO CHECKS or INCREASE THE MEMORY USED BY THE PRE-PROCESSOR.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THERE ARE 20516 BOUNDARY CONDITIONS SPECIFIED IN THIS MODEL. OVERCONSTRAINT CHECKS FOR BOUNDARY CONDITIONS SPECIFIED ON SECONDARY NODES OF RIGID BODIES, OF *TIE OPTIONS, OR OF *COUPLING OPTIONS REQUIRE 8 MB OF MEMORY. IF THIS IS A PROBLEM, PLEASE TURN OFF OVERCONSTRAINT CHECKS USING *CONSTRAINT CONTROLS, NO CHECKS or INCREASE THE MEMORY USED BY THE PRE-PROCESSOR.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OVERCONSTRAINT CHECKS: THERE ARE 10262 BOUNDARY CONDITIONS SPECIFIED IN THIS MODEL. OVERCONSTRAINT CHECKS FOR BOUNDARY CONDITIONS SPECIFIED ON SECONDARY NODES OF RIGID BODIES, OF *TIE OPTIONS, OR OF *COUPLING OPTIONS REQUIRE 4 MB OF MEMORY. IF THIS IS A PROBLEM, PLEASE TURN OFF OVERCONSTRAINT CHECKS USING *CONSTRAINT CONTROLS, NO CHECKS or INCREASE THE MEMORY USED BY THE PRE-PROCESSOR.', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'D:\\Abaqus2022\\Work\\S2\\example\\S2-1-250-8-64-5.odb', 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MS-RHMIWUFDWSIP', 'handle': 4452, 
    'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'S2-1-250-8-64-5', 'memory': 606.0})
mdb.jobs['S2-1-250-8-64-5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16310.0, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(MINIMUM_MEMORY, {'minimum_memory': 96.0, 
    'phase': STANDARD_PHASE, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 0.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 1, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 0, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'S2-1-250-8-64-5', 'memory': 518.0})
mdb.jobs['S2-1-250-8-64-5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16310.0, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 1, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 2, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 3, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 1.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 2, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 4, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 1.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 2, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 5, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 1, 'frame': 6, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 2, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['S2-1-250-8-64-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 3, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 2, 'frame': 0, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'S2-1-250-8-64-5', 'memory': 518.0})
mdb.jobs['S2-1-250-8-64-5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16310.0, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 2.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 3, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 2, 'frame': 1, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 2.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 3, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 2, 'frame': 2, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 2.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 3, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 2, 'frame': 3, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 2.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 3, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 2, 'frame': 4, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 2.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 3, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 2, 'frame': 5, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 2, 'frame': 6, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 3, 'jobName': 'S2-1-250-8-64-5', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 3, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 4, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 3, 'frame': 0, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'S2-1-250-8-64-5', 'memory': 518.0})
mdb.jobs['S2-1-250-8-64-5']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16310.0, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(MINIMUM_MEMORY, {'minimum_memory': 87.0, 
    'phase': STANDARD_PHASE, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 3.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 4, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 7, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 3, 'frame': 1, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 3.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 4, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 3, 'frame': 2, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 3.35, 'attempts': 1, 
    'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 'step': 4, 
    'jobName': 'S2-1-250-8-64-5', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 3, 'frame': 3, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 3.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 4, 'jobName': 'S2-1-250-8-64-5', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 3, 'frame': 4, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 3.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 4, 'jobName': 'S2-1-250-8-64-5', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 3, 'frame': 5, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 3, 'frame': 6, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 0.0874999999999999, 'increment': 6, 'stepTime': 1.0, 
    'step': 4, 'jobName': 'S2-1-250-8-64-5', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['S2-1-250-8-64-5']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 4, 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'S2-1-250-8-64-5'})
mdb.jobs['S2-1-250-8-64-5']._Message(JOB_COMPLETED, {
    'time': 'Fri Jul 12 09:41:14 2024', 'jobName': 'S2-1-250-8-64-5'})
# Save by Administrator on 2024_07_12-09.41.27; build 2022 2021_09_16-01.57.30 176069
